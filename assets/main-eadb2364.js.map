{"version":3,"file":"main-eadb2364.js","sources":["../../src/components/list-add-edit.jsx","../../src/components/account-info.jsx","../../src/components/account-sheet.jsx","../../src/components/drafts.jsx","../../src/components/media-modal.jsx","../../src/assets/floating-button.svg","../../src/assets/multi-column.svg","../../src/assets/tab-menu-bar.svg","../../src/components/AsyncText.jsx","../../src/components/shortcuts-settings.jsx","../../src/components/shortcuts.jsx","../../src/components/menu2.jsx","../../src/utils/timeline-utils.jsx","../../src/utils/usePageVisibility.js","../../src/utils/useScroll.js","../../src/components/nav-menu.jsx","../../src/components/timeline.jsx","../../src/pages/account-statuses.jsx","../../src/pages/accounts.jsx","../../src/pages/bookmarks.jsx","../../src/pages/favourites.jsx","../../src/pages/followed-hashtags.jsx","../../src/utils/filters.jsx","../../src/pages/following.jsx","../../src/pages/hashtag.jsx","../../src/pages/list.jsx","../../src/pages/mentions.jsx","../../src/components/follow-request-buttons.jsx","../../src/components/notification.jsx","../../src/utils/group-notifications.jsx","../../src/pages/notifications.jsx","../../src/pages/public.jsx","../../src/pages/trending.jsx","../../src/components/columns.jsx","../../src/pages/home.jsx","../../src/utils/get-instance-status-url.js","../../src/pages/HttpRoute.jsx","../../src/pages/lists.jsx","../../src/data/instances.json?url","../../src/utils/auth.js","../../src/pages/login.jsx","../../src/pages/search.jsx","../../src/assets/logo.svg","../../src/pages/settings.jsx","../../src/pages/status.jsx","../../src/assets/features/boosts-carousel.jpg","../../src/assets/features/grouped-notifications.jpg","../../src/assets/features/multi-column.jpg","../../src/assets/features/multi-hashtag-timeline.jpg","../../src/assets/features/nested-comments-thread.jpg","../../src/assets/logo-text.svg","../../src/pages/welcome.jsx","../../src/app.jsx","../../src/main.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport supports from '../utils/supports';\n\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\n\nfunction ListAddEdit({ list, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const editMode = !!list;\n  const nameFieldRef = useRef();\n  const repliesPolicyFieldRef = useRef();\n  const exclusiveFieldRef = useRef();\n  useEffect(() => {\n    if (editMode) {\n      nameFieldRef.current.value = list.title;\n      repliesPolicyFieldRef.current.value = list.repliesPolicy;\n      if (exclusiveFieldRef.current) {\n        exclusiveFieldRef.current.checked = list.exclusive;\n      }\n    }\n  }, [editMode]);\n  const supportsExclusive = supports('@mastodon/list-exclusive');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}{' '}\n      <header>\n        <h2>{editMode ? 'Edit list' : 'New list'}</h2>\n      </header>\n      <main>\n        <form\n          class=\"list-form\"\n          onSubmit={(e) => {\n            e.preventDefault(); // Get form values\n\n            const formData = new FormData(e.target);\n            const title = formData.get('title');\n            const repliesPolicy = formData.get('replies_policy');\n            const exclusive = formData.get('exclusive') === 'on';\n            console.log({\n              title,\n              repliesPolicy,\n              exclusive,\n            });\n            setUIState('loading');\n\n            (async () => {\n              try {\n                let listResult;\n\n                if (editMode) {\n                  listResult = await masto.v1.lists.update(list.id, {\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                } else {\n                  listResult = await masto.v1.lists.create({\n                    title,\n                    replies_policy: repliesPolicy,\n                    exclusive,\n                  });\n                }\n\n                console.log(listResult);\n                setUIState('default');\n                onClose?.({\n                  state: 'success',\n                  list: listResult,\n                });\n              } catch (e) {\n                console.error(e);\n                setUIState('error');\n                alert(\n                  editMode ? 'Unable to edit list.' : 'Unable to create list.',\n                );\n              }\n            })();\n          }}\n        >\n          <div class=\"list-form-row\">\n            <label for=\"list-title\">\n              Name{' '}\n              <input\n                ref={nameFieldRef}\n                type=\"text\"\n                id=\"list-title\"\n                name=\"title\"\n                required\n                disabled={uiState === 'loading'}\n                dir=\"auto\"\n              />\n            </label>\n          </div>\n          <div class=\"list-form-row\">\n            <select\n              ref={repliesPolicyFieldRef}\n              name=\"replies_policy\"\n              required\n              disabled={uiState === 'loading'}\n            >\n              <option value=\"list\">Show replies to list members</option>\n              <option value=\"followed\">Show replies to people I follow</option>\n              <option value=\"none\">Don't show replies</option>\n            </select>\n          </div>\n          {supportsExclusive && (\n            <div class=\"list-form-row\">\n              <label class=\"label-block\">\n                <input\n                  ref={exclusiveFieldRef}\n                  type=\"checkbox\"\n                  name=\"exclusive\"\n                  disabled={uiState === 'loading'}\n                />{' '}\n                Hide posts on this list from Home/Following\n              </label>\n            </div>\n          )}\n          <div class=\"list-form-footer\">\n            <button type=\"submit\" disabled={uiState === 'loading'}>\n              {editMode ? 'Save' : 'Create'}\n            </button>\n            {editMode && (\n              <MenuConfirm\n                disabled={uiState === 'loading'}\n                align=\"end\"\n                menuItemClassName=\"danger\"\n                confirmLabel=\"Delete this list?\"\n                onClick={() => {\n                  // const yes = confirm('Delete this list?');\n                  // if (!yes) return;\n                  setUIState('loading');\n\n                  (async () => {\n                    try {\n                      await masto.v1.lists.remove(list.id);\n                      setUIState('default');\n                      onClose?.({\n                        state: 'deleted',\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      setUIState('error');\n                      alert('Unable to delete list.');\n                    }\n                  })();\n                }}\n              >\n                <button\n                  type=\"button\"\n                  class=\"light danger\"\n                  disabled={uiState === 'loading'}\n                >\n                  Delete…\n                </button>\n              </MenuConfirm>\n            )}\n          </div>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nexport default ListAddEdit;\n","import './account-info.css';\n\nimport { Menu, MenuDivider, MenuItem, SubMenu } from '@szhsin/react-menu';\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport getHTMLText from '../utils/getHTMLText';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport shortenNumber from '../utils/shorten-number';\nimport showToast from '../utils/show-toast';\nimport states, { hideAllModals } from '../utils/states';\nimport store from '../utils/store';\nimport { updateAccount } from '../utils/store-utils';\n\nimport AccountBlock from './account-block';\nimport Avatar from './avatar';\nimport EmojiText from './emoji-text';\nimport Icon from './icon';\nimport Link from './link';\nimport ListAddEdit from './list-add-edit';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nconst MUTE_DURATIONS = [\n  1000 * 60 * 5, // 5 minutes\n  1000 * 60 * 30, // 30 minutes\n  1000 * 60 * 60, // 1 hour\n  1000 * 60 * 60 * 6, // 6 hours\n  1000 * 60 * 60 * 24, // 1 day\n  1000 * 60 * 60 * 24 * 3, // 3 days\n  1000 * 60 * 60 * 24 * 7, // 1 week\n  0, // forever\n];\nconst MUTE_DURATIONS_LABELS = {\n  0: 'Forever',\n  300_000: '5 minutes',\n  1_800_000: '30 minutes',\n  3_600_000: '1 hour',\n  21_600_000: '6 hours',\n  86_400_000: '1 day',\n  259_200_000: '3 days',\n  604_800_000: '1 week',\n};\n\nfunction AccountInfo({\n  account,\n  fetchAccount = () => {},\n  standalone,\n  instance,\n  authenticated,\n}) {\n  const [uiState, setUIState] = useState('default');\n  const isString = typeof account === 'string';\n  const [info, setInfo] = useState(isString ? null : account);\n\n  useEffect(() => {\n    if (!isString) {\n      setInfo(account);\n      return;\n    }\n    setUIState('loading');\n    (async () => {\n      try {\n        const info = await fetchAccount();\n        states.accounts[`${info.id}@${instance}`] = info;\n        setInfo(info);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setInfo(null);\n        setUIState('error');\n      }\n    })();\n  }, [isString, account, fetchAccount]);\n\n  const {\n    acct,\n    avatar,\n    avatarStatic,\n    bot,\n    createdAt,\n    displayName,\n    emojis,\n    fields,\n    followersCount,\n    followingCount,\n    group,\n    // header,\n    // headerStatic,\n    id,\n    lastStatusAt,\n    locked,\n    note,\n    statusesCount,\n    url,\n    username,\n  } = info || {};\n  let headerIsAvatar = false;\n  let { header, headerStatic } = info || {};\n  if (!header || /missing\\.png$/.test(header)) {\n    if (avatar && !/missing\\.png$/.test(avatar)) {\n      header = avatar;\n      headerIsAvatar = true;\n      if (avatarStatic && !/missing\\.png$/.test(avatarStatic)) {\n        headerStatic = avatarStatic;\n      }\n    }\n  }\n\n  const [headerCornerColors, setHeaderCornerColors] = useState([]);\n\n  return (\n    <div\n      class={`account-container  ${uiState === 'loading' ? 'skeleton' : ''}`}\n      style={{\n        '--header-color-1': headerCornerColors[0],\n        '--header-color-2': headerCornerColors[1],\n        '--header-color-3': headerCornerColors[2],\n        '--header-color-4': headerCornerColors[3],\n      }}\n    >\n      {uiState === 'error' && (\n        <div class=\"ui-state\">\n          <p>Unable to load account.</p>\n          <p>\n            <a href={account} target=\"_blank\">\n              Go to account page <Icon icon=\"external\" />\n            </a>\n          </p>\n        </div>\n      )}\n      {uiState === 'loading' ? (\n        <>\n          <header>\n            <AccountBlock avatarSize=\"xxxl\" skeleton />\n          </header>\n          <main>\n            <div class=\"note\">\n              <p>████████ ███████</p>\n              <p>███████████████ ███████████████</p>\n            </div>\n            <p class=\"stats\">\n              <div>\n                <span>██</span> Followers\n              </div>\n              <div>\n                <span>██</span> Following\n              </div>\n              <div>\n                <span>██</span> Posts\n              </div>\n              <div>Joined ██</div>\n            </p>\n          </main>\n        </>\n      ) : (\n        info && (\n          <>\n            {header && !/missing\\.png$/.test(header) && (\n              <img\n                src={header}\n                alt=\"\"\n                class={`header-banner ${\n                  headerIsAvatar ? 'header-is-avatar' : ''\n                }`}\n                onError={(e) => {\n                  if (e.target.crossOrigin) {\n                    if (e.target.src !== headerStatic) {\n                      e.target.src = headerStatic;\n                    } else {\n                      e.target.removeAttribute('crossorigin');\n                      e.target.src = header;\n                    }\n                  } else if (e.target.src !== headerStatic) {\n                    e.target.src = headerStatic;\n                  } else {\n                    e.target.remove();\n                  }\n                }}\n                crossOrigin=\"anonymous\"\n                onLoad={(e) => {\n                  e.target.classList.add('loaded');\n                  try {\n                    // Get color from four corners of image\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d');\n                    canvas.width = e.target.width;\n                    canvas.height = e.target.height;\n                    ctx.drawImage(e.target, 0, 0);\n                    // const colors = [\n                    //   ctx.getImageData(0, 0, 1, 1).data,\n                    //   ctx.getImageData(e.target.width - 1, 0, 1, 1).data,\n                    //   ctx.getImageData(0, e.target.height - 1, 1, 1).data,\n                    //   ctx.getImageData(\n                    //     e.target.width - 1,\n                    //     e.target.height - 1,\n                    //     1,\n                    //     1,\n                    //   ).data,\n                    // ];\n                    // Get 10x10 pixels from corners, get average color from each\n                    const pixelDimension = 10;\n                    const colors = [\n                      ctx.getImageData(0, 0, pixelDimension, pixelDimension)\n                        .data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        0,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        0,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                      ctx.getImageData(\n                        e.target.width - pixelDimension,\n                        e.target.height - pixelDimension,\n                        pixelDimension,\n                        pixelDimension,\n                      ).data,\n                    ].map((data) => {\n                      let r = 0;\n                      let g = 0;\n                      let b = 0;\n                      let a = 0;\n                      for (let i = 0; i < data.length; i += 4) {\n                        r += data[i];\n                        g += data[i + 1];\n                        b += data[i + 2];\n                        a += data[i + 3];\n                      }\n                      const dataLength = data.length / 4;\n                      return [\n                        r / dataLength,\n                        g / dataLength,\n                        b / dataLength,\n                        a / dataLength,\n                      ];\n                    });\n                    const rgbColors = colors.map((color) => {\n                      const [r, g, b, a] = lightenRGB(color);\n                      return `rgba(${r}, ${g}, ${b}, ${a})`;\n                    });\n                    setHeaderCornerColors(rgbColors);\n                    console.log({ colors, rgbColors });\n                  } catch (e) {\n                    // Silently fail\n                  }\n                }}\n              />\n            )}\n            <header>\n              <AccountBlock\n                account={info}\n                instance={instance}\n                avatarSize=\"xxxl\"\n                external={standalone}\n                internal={!standalone}\n              />\n            </header>\n            <main tabIndex=\"-1\">\n              {bot && (\n                <>\n                  <span class=\"tag\">\n                    <Icon icon=\"bot\" /> Automated\n                  </span>\n                </>\n              )}\n              {group && (\n                <>\n                  <span class=\"tag\">\n                    <Icon icon=\"group\" /> Group\n                  </span>\n                </>\n              )}\n              <div\n                class=\"note\"\n                onClick={handleContentLinks({\n                  instance,\n                })}\n                dangerouslySetInnerHTML={{\n                  __html: enhanceContent(note, { emojis }),\n                }}\n              />\n              {fields?.length > 0 && (\n                <div class=\"profile-metadata\">\n                  {fields.map(({ name, value, verifiedAt }, i) => (\n                    <div\n                      class={`profile-field ${\n                        verifiedAt ? 'profile-verified' : ''\n                      }`}\n                      key={name + i}\n                    >\n                      <b>\n                        <EmojiText text={name} emojis={emojis} />{' '}\n                        {!!verifiedAt && <Icon icon=\"check-circle\" size=\"s\" />}\n                      </b>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: enhanceContent(value, { emojis }),\n                        }}\n                      />\n                    </div>\n                  ))}\n                </div>\n              )}\n              <p class=\"stats\">\n                <div>\n                  <span title={followersCount}>\n                    {shortenNumber(followersCount)}\n                  </span>{' '}\n                  Followers\n                </div>\n                <div class=\"insignificant\">\n                  <span title={followingCount}>\n                    {shortenNumber(followingCount)}\n                  </span>{' '}\n                  Following\n                  <br />\n                </div>\n                {standalone ? (\n                  <div class=\"insignificant\">\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </div>\n                ) : (\n                  <Link\n                    class=\"insignificant\"\n                    to={instance ? `/${instance}/a/${id}` : `/a/${id}`}\n                    onClick={() => {\n                      hideAllModals();\n                    }}\n                  >\n                    <span title={statusesCount}>\n                      {shortenNumber(statusesCount)}\n                    </span>{' '}\n                    Posts\n                  </Link>\n                )}\n                {!!createdAt && (\n                  <div class=\"insignificant\">\n                    Joined{' '}\n                    <time datetime={createdAt}>\n                      {niceDateTime(createdAt, {\n                        hideTime: true,\n                      })}\n                    </time>\n                  </div>\n                )}\n              </p>\n              <RelatedActions\n                info={info}\n                instance={instance}\n                authenticated={authenticated}\n              />\n            </main>\n          </>\n        )\n      )}\n    </div>\n  );\n}\n\nfunction RelatedActions({ info, instance, authenticated }) {\n  if (!info) return null;\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated: currentAuthenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n\n  const [relationshipUIState, setRelationshipUIState] = useState('default');\n  const [relationship, setRelationship] = useState(null);\n  const [familiarFollowers, setFamiliarFollowers] = useState([]);\n\n  const { id, acct, url, username, locked, lastStatusAt, note, fields } = info;\n  const accountID = useRef(id);\n\n  const {\n    following,\n    showingReblogs,\n    notifying,\n    followedBy,\n    blocking,\n    blockedBy,\n    muting,\n    mutingNotifications,\n    requested,\n    domainBlocking,\n    endorsed,\n  } = relationship || {};\n\n  const [currentInfo, setCurrentInfo] = useState(null);\n  const [isSelf, setIsSelf] = useState(false);\n\n  useEffect(() => {\n    if (info) {\n      const currentAccount = store.session.get('currentAccount');\n      let currentID;\n      (async () => {\n        if (sameInstance && authenticated) {\n          currentID = id;\n        } else if (!sameInstance && currentAuthenticated) {\n          // Grab this account from my logged-in instance\n          const acctHasInstance = info.acct.includes('@');\n          try {\n            const results = await currentMasto.v2.search({\n              q: acctHasInstance ? info.acct : `${info.username}@${instance}`,\n              type: 'accounts',\n              limit: 1,\n              resolve: true,\n            });\n            console.log('🥏 Fetched account from logged-in instance', results);\n            if (results.accounts.length) {\n              currentID = results.accounts[0].id;\n              setCurrentInfo(results.accounts[0]);\n            }\n          } catch (e) {\n            console.error(e);\n          }\n        }\n\n        if (!currentID) return;\n\n        if (currentAccount === currentID) {\n          // It's myself!\n          setIsSelf(true);\n          return;\n        }\n\n        accountID.current = currentID;\n\n        setRelationshipUIState('loading');\n        setFamiliarFollowers([]);\n\n        const fetchRelationships = currentMasto.v1.accounts.fetchRelationships([\n          currentID,\n        ]);\n        const fetchFamiliarFollowers =\n          currentMasto.v1.accounts.fetchFamiliarFollowers(currentID);\n\n        try {\n          const relationships = await fetchRelationships;\n          console.log('fetched relationship', relationships);\n          if (relationships.length) {\n            const relationship = relationships[0];\n            setRelationship(relationship);\n\n            if (!relationship.following) {\n              try {\n                const followers = await fetchFamiliarFollowers;\n                console.log('fetched familiar followers', followers);\n                setFamiliarFollowers(followers[0].accounts.slice(0, 10));\n              } catch (e) {\n                console.error(e);\n              }\n            }\n          }\n          setRelationshipUIState('default');\n        } catch (e) {\n          console.error(e);\n          setRelationshipUIState('error');\n        }\n      })();\n    }\n  }, [info, authenticated]);\n\n  useEffect(() => {\n    if (info && isSelf) {\n      updateAccount(info);\n    }\n  }, [info, isSelf]);\n\n  const loading = relationshipUIState === 'loading';\n  const menuInstanceRef = useRef(null);\n\n  const [showTranslatedBio, setShowTranslatedBio] = useState(false);\n  const [showAddRemoveLists, setShowAddRemoveLists] = useState(false);\n\n  return (\n    <>\n      <div\n        class=\"common-followers shazam-container no-animation\"\n        hidden={!familiarFollowers?.length}\n      >\n        <div class=\"shazam-container-inner\">\n          <p>\n            Followed by{' '}\n            <span class=\"ib\">\n              {familiarFollowers.map((follower) => (\n                <a\n                  href={follower.url}\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = {\n                      account: follower,\n                      instance,\n                    };\n                  }}\n                >\n                  <Avatar\n                    url={follower.avatarStatic}\n                    size=\"l\"\n                    alt={`${follower.displayName} @${follower.acct}`}\n                    squircle={follower?.bot}\n                  />\n                </a>\n              ))}\n            </span>\n          </p>\n        </div>\n      </div>\n      <p class=\"actions\">\n        <span>\n          {followedBy ? (\n            <span class=\"tag\">Following you</span>\n          ) : !!lastStatusAt ? (\n            <small class=\"insignificant\">\n              Last post:{' '}\n              {niceDateTime(lastStatusAt, {\n                hideTime: true,\n              })}\n            </small>\n          ) : (\n            <span />\n          )}\n          {muting && <span class=\"tag danger\">Muted</span>}\n          {blocking && <span class=\"tag danger\">Blocked</span>}\n        </span>{' '}\n        <span class=\"buttons\">\n          <Menu\n            instanceRef={menuInstanceRef}\n            portal={{\n              target: document.body,\n            }}\n            containerProps={{\n              style: {\n                // Higher than the backdrop\n                zIndex: 1001,\n              },\n              onClick: (e) => {\n                if (e.target === e.currentTarget) {\n                  menuInstanceRef.current?.closeMenu?.();\n                }\n              },\n            }}\n            align=\"center\"\n            position=\"anchor\"\n            overflow=\"auto\"\n            boundingBoxPadding=\"8 8 8 8\"\n            menuButton={\n              <button\n                type=\"button\"\n                title=\"More\"\n                class=\"plain\"\n                disabled={loading}\n              >\n                <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n              </button>\n            }\n          >\n            {currentAuthenticated && !isSelf && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    states.showCompose = {\n                      draftStatus: {\n                        status: `@${currentInfo?.acct || acct} `,\n                      },\n                    };\n                  }}\n                >\n                  <Icon icon=\"at\" />\n                  <span>Mention @{username}</span>\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    setShowTranslatedBio(true);\n                  }}\n                >\n                  <Icon icon=\"translate\" />\n                  <span>Translate bio</span>\n                </MenuItem>\n                {/* Add/remove from lists is only possible if following the account */}\n                {following && (\n                  <MenuItem\n                    onClick={() => {\n                      setShowAddRemoveLists(true);\n                    }}\n                  >\n                    <Icon icon=\"list\" />\n                    <span>Add/remove from Lists</span>\n                  </MenuItem>\n                )}\n                <MenuDivider />\n              </>\n            )}\n            <MenuItem href={url} target=\"_blank\">\n              <Icon icon=\"external\" />\n              <small class=\"menu-double-lines\">{niceAccountURL(url)}</small>\n            </MenuItem>\n            <div class=\"menu-horizontal\">\n              <MenuItem\n                onClick={() => {\n                  // Copy url to clipboard\n                  try {\n                    navigator.clipboard.writeText(url);\n                    showToast('Link copied');\n                  } catch (e) {\n                    console.error(e);\n                    showToast('Unable to copy link');\n                  }\n                }}\n              >\n                <Icon icon=\"link\" />\n                <span>Copy</span>\n              </MenuItem>\n              {navigator?.share &&\n                navigator?.canShare?.({\n                  url,\n                }) && (\n                  <MenuItem\n                    onClick={() => {\n                      try {\n                        navigator.share({\n                          url,\n                        });\n                      } catch (e) {\n                        console.error(e);\n                        alert(\"Sharing doesn't seem to work.\");\n                      }\n                    }}\n                  >\n                    <Icon icon=\"share\" />\n                    <span>Share…</span>\n                  </MenuItem>\n                )}\n            </div>\n            {!!relationship && (\n              <>\n                <MenuDivider />\n                {muting ? (\n                  <MenuItem\n                    onClick={() => {\n                      setRelationshipUIState('loading');\n                      (async () => {\n                        try {\n                          const newRelationship =\n                            await currentMasto.v1.accounts.unmute(\n                              currentInfo?.id || id,\n                            );\n                          console.log('unmuting', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unmuted @${username}`);\n                        } catch (e) {\n                          console.error(e);\n                          setRelationshipUIState('error');\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"unmute\" />\n                    <span>Unmute @{username}</span>\n                  </MenuItem>\n                ) : (\n                  <SubMenu\n                    openTrigger=\"clickOnly\"\n                    direction=\"bottom\"\n                    overflow=\"auto\"\n                    shift={16}\n                    label={\n                      <>\n                        <Icon icon=\"mute\" />\n                        <span class=\"menu-grow\">Mute @{username}…</span>\n                        <span\n                          style={{\n                            textOverflow: 'clip',\n                          }}\n                        >\n                          <Icon icon=\"time\" />\n                          <Icon icon=\"chevron-right\" />\n                        </span>\n                      </>\n                    }\n                  >\n                    <div class=\"menu-wrap\">\n                      {MUTE_DURATIONS.map((duration) => (\n                        <MenuItem\n                          onClick={() => {\n                            setRelationshipUIState('loading');\n                            (async () => {\n                              try {\n                                const newRelationship =\n                                  await currentMasto.v1.accounts.mute(\n                                    currentInfo?.id || id,\n                                    {\n                                      duration,\n                                    },\n                                  );\n                                console.log('muting', newRelationship);\n                                setRelationship(newRelationship);\n                                setRelationshipUIState('default');\n                                showToast(\n                                  `Muted @${username} for ${MUTE_DURATIONS_LABELS[duration]}`,\n                                );\n                              } catch (e) {\n                                console.error(e);\n                                setRelationshipUIState('error');\n                                showToast(`Unable to mute @${username}`);\n                              }\n                            })();\n                          }}\n                        >\n                          {MUTE_DURATIONS_LABELS[duration]}\n                        </MenuItem>\n                      ))}\n                    </div>\n                  </SubMenu>\n                )}\n                <MenuConfirm\n                  subMenu\n                  confirm={!blocking}\n                  confirmLabel={\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}?</span>\n                    </>\n                  }\n                  menuItemClassName=\"danger\"\n                  onClick={() => {\n                    // if (!blocking && !confirm(`Block @${username}?`)) {\n                    //   return;\n                    // }\n                    setRelationshipUIState('loading');\n                    (async () => {\n                      try {\n                        if (blocking) {\n                          const newRelationship =\n                            await currentMasto.v1.accounts.unblock(\n                              currentInfo?.id || id,\n                            );\n                          console.log('unblocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Unblocked @${username}`);\n                        } else {\n                          const newRelationship =\n                            await currentMasto.v1.accounts.block(\n                              currentInfo?.id || id,\n                            );\n                          console.log('blocking', newRelationship);\n                          setRelationship(newRelationship);\n                          setRelationshipUIState('default');\n                          showToast(`Blocked @${username}`);\n                        }\n                      } catch (e) {\n                        console.error(e);\n                        setRelationshipUIState('error');\n                        if (blocking) {\n                          showToast(`Unable to unblock @${username}`);\n                        } else {\n                          showToast(`Unable to block @${username}`);\n                        }\n                      }\n                    })();\n                  }}\n                >\n                  {blocking ? (\n                    <>\n                      <Icon icon=\"unblock\" />\n                      <span>Unblock @{username}</span>\n                    </>\n                  ) : (\n                    <>\n                      <Icon icon=\"block\" />\n                      <span>Block @{username}…</span>\n                    </>\n                  )}\n                </MenuConfirm>\n                {/* <MenuItem>\n                <Icon icon=\"flag\" />\n                <span>Report @{username}…</span>\n              </MenuItem> */}\n              </>\n            )}\n          </Menu>\n          {!relationship && relationshipUIState === 'loading' && (\n            <Loader abrupt />\n          )}\n          {!!relationship && (\n            <MenuConfirm\n              confirm={following || requested}\n              confirmLabel={\n                <span>\n                  {requested\n                    ? 'Withdraw follow request?'\n                    : `Unfollow @${info.acct || info.username}?`}\n                </span>\n              }\n              menuItemClassName=\"danger\"\n              align=\"end\"\n              disabled={loading}\n              onClick={() => {\n                setRelationshipUIState('loading');\n                (async () => {\n                  try {\n                    let newRelationship;\n\n                    if (following || requested) {\n                      // const yes = confirm(\n                      //   requested\n                      //     ? 'Withdraw follow request?'\n                      //     : `Unfollow @${info.acct || info.username}?`,\n                      // );\n\n                      // if (yes) {\n                      newRelationship = await currentMasto.v1.accounts.unfollow(\n                        accountID.current,\n                      );\n                      // }\n                    } else {\n                      newRelationship = await currentMasto.v1.accounts.follow(\n                        accountID.current,\n                      );\n                    }\n\n                    if (newRelationship) setRelationship(newRelationship);\n                    setRelationshipUIState('default');\n                  } catch (e) {\n                    alert(e);\n                    setRelationshipUIState('error');\n                  }\n                })();\n              }}\n            >\n              <button\n                type=\"button\"\n                class={`${following || requested ? 'light swap' : ''}`}\n                data-swap-state={following || requested ? 'danger' : ''}\n                disabled={loading}\n              >\n                {following ? (\n                  <>\n                    <span>Following</span>\n                    <span>Unfollow…</span>\n                  </>\n                ) : requested ? (\n                  <>\n                    <span>Requested</span>\n                    <span>Withdraw…</span>\n                  </>\n                ) : locked ? (\n                  <>\n                    <Icon icon=\"lock\" /> <span>Follow</span>\n                  </>\n                ) : (\n                  'Follow'\n                )}\n              </button>\n            </MenuConfirm>\n          )}\n        </span>\n      </p>\n      {!!showTranslatedBio && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowTranslatedBio(false);\n            }\n          }}\n        >\n          <TranslatedBioSheet\n            note={note}\n            fields={fields}\n            onClose={() => setShowTranslatedBio(false)}\n          />\n        </Modal>\n      )}\n      {!!showAddRemoveLists && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowAddRemoveLists(false);\n            }\n          }}\n        >\n          <AddRemoveListsSheet\n            accountID={accountID.current}\n            onClose={() => setShowAddRemoveLists(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\n// Apply more alpha if high luminence\nfunction lightenRGB([r, g, b]) {\n  const luminence = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  console.log('luminence', luminence);\n  let alpha;\n  if (luminence >= 220) {\n    alpha = 1;\n  } else if (luminence <= 50) {\n    alpha = 0.1;\n  } else {\n    alpha = luminence / 255;\n  }\n  alpha = Math.min(1, alpha);\n  return [r, g, b, alpha];\n}\n\nfunction niceAccountURL(url) {\n  if (!url) return;\n  const urlObj = new URL(url);\n  const { host, pathname } = urlObj;\n  const path = pathname.replace(/\\/$/, '').replace(/^\\//, '');\n  return (\n    <>\n      <span class=\"more-insignificant\">{host}/</span>\n      <wbr />\n      <span>{path}</span>\n    </>\n  );\n}\n\nfunction TranslatedBioSheet({ note, fields, onClose }) {\n  const fieldsText =\n    fields\n      ?.map(({ name, value }) => `${name}\\n${getHTMLText(value)}`)\n      .join('\\n\\n') || '';\n\n  const text = getHTMLText(note) + (fieldsText ? `\\n\\n${fieldsText}` : '');\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Translated Bio</h2>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {text}\n        </p>\n        <TranslationBlock forceTranslate text={text} />\n      </main>\n    </div>\n  );\n}\n\nfunction AddRemoveListsSheet({ accountID, onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [lists, setLists] = useState([]);\n  const [listsContainingAccount, setListsContainingAccount] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        const listsContainingAccount = await masto.v1.accounts.listLists(\n          accountID,\n        );\n        console.log({ lists, listsContainingAccount });\n        setLists(lists);\n        setListsContainingAccount(listsContainingAccount);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div class=\"sheet\" id=\"list-add-remove-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Add/Remove from Lists</h2>\n      </header>\n      <main>\n        {lists.length > 0 ? (\n          <ul class=\"list-add-remove\">\n            {lists.map((list) => {\n              const inList = listsContainingAccount.some(\n                (l) => l.id === list.id,\n              );\n              return (\n                <li>\n                  <button\n                    type=\"button\"\n                    class={`light ${inList ? 'checked' : ''}`}\n                    disabled={uiState === 'loading'}\n                    onClick={() => {\n                      setUIState('loading');\n                      (async () => {\n                        try {\n                          if (inList) {\n                            await masto.v1.lists.removeAccount(list.id, {\n                              accountIds: [accountID],\n                            });\n                          } else {\n                            await masto.v1.lists.addAccount(list.id, {\n                              accountIds: [accountID],\n                            });\n                          }\n                          // setUIState('default');\n                          reload();\n                        } catch (e) {\n                          console.error(e);\n                          setUIState('error');\n                          alert(\n                            inList\n                              ? 'Unable to remove from list.'\n                              : 'Unable to add to list.',\n                          );\n                        }\n                      })();\n                    }}\n                  >\n                    <Icon icon=\"check-circle\" />\n                    <span>{list.title}</span>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        ) : uiState === 'loading' ? (\n          <p class=\"ui-state\">\n            <Loader abrupt />\n          </p>\n        ) : uiState === 'error' ? (\n          <p class=\"ui-state\">Unable to load lists.</p>\n        ) : (\n          <p class=\"ui-state\">No lists.</p>\n        )}\n        <button\n          type=\"button\"\n          class=\"plain2\"\n          onClick={() => setShowListAddEditModal(true)}\n          disabled={uiState !== 'default'}\n        >\n          <Icon icon=\"plus\" size=\"l\" /> <span>New list</span>\n        </button>\n      </main>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default AccountInfo;\n","import { useEffect } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AccountInfo from './account-info';\nimport Icon from './icon';\n\nfunction AccountSheet({ account, instance: propInstance, onClose }) {\n  const { masto, instance, authenticated } = api({ instance: propInstance });\n  const isString = typeof account === 'string';\n\n  const escRef = useHotkeys('esc', onClose, [onClose]);\n\n  useEffect(() => {\n    if (!isString) {\n      states.accounts[`${account.id}@${instance}`] = account;\n    }\n  }, [account]);\n\n  return (\n    <div\n      ref={escRef}\n      class=\"sheet\"\n      onClick={(e) => {\n        const accountBlock = e.target.closest('.account-block');\n        if (accountBlock) {\n          onClose({\n            destination: 'account-statuses',\n          });\n        }\n      }}\n    >\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <AccountInfo\n        instance={instance}\n        authenticated={authenticated}\n        account={account}\n        fetchAccount={async () => {\n          if (isString) {\n            try {\n              const info = await masto.v1.accounts.lookup({\n                acct: account,\n                skip_webfinger: false,\n              });\n              return info;\n            } catch (e) {\n              const result = await masto.v2.search({\n                q: account,\n                type: 'accounts',\n                limit: 1,\n                resolve: authenticated,\n              });\n              if (result.accounts.length) {\n                return result.accounts[0];\n              }\n            }\n          } else {\n            return account;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AccountSheet;\n","import './drafts.css';\n\nimport { useEffect, useMemo, useReducer, useState } from 'react';\n\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport niceDateTime from '../utils/nice-date-time';\nimport states from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Icon from './icon';\nimport Loader from './loader';\nimport MenuConfirm from './menu-confirm';\n\nfunction Drafts({ onClose }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [drafts, setDrafts] = useState([]);\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const keys = await db.drafts.keys();\n        if (keys.length) {\n          const ns = getCurrentAccountNS();\n          const ownKeys = keys.filter((key) => key.startsWith(ns));\n          if (ownKeys.length) {\n            const drafts = await db.drafts.getMany(ownKeys);\n            drafts.sort(\n              (a, b) =>\n                new Date(b.updatedAt).getTime() -\n                new Date(a.updatedAt).getTime(),\n            );\n            setDrafts(drafts);\n          } else {\n            setDrafts([]);\n          }\n        } else {\n          setDrafts([]);\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const hasDrafts = drafts?.length > 0;\n\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Unsent drafts <Loader abrupt hidden={uiState !== 'loading'} />\n        </h2>\n        {hasDrafts && (\n          <div class=\"insignificant\">\n            Looks like you have unsent drafts. Let's continue where you left\n            off.\n          </div>\n        )}\n      </header>\n      <main>\n        {hasDrafts ? (\n          <>\n            <ul class=\"drafts-list\">\n              {drafts.map((draft) => {\n                const { updatedAt, key, draftStatus, replyTo } = draft;\n                const updatedAtDate = new Date(updatedAt);\n                return (\n                  <li key={updatedAt}>\n                    <div class=\"mini-draft-meta\">\n                      <b>\n                        <Icon icon={replyTo ? 'reply' : 'quill'} size=\"s\" />{' '}\n                        <time>\n                          {!!replyTo && (\n                            <>\n                              @{replyTo.account.acct}\n                              <br />\n                            </>\n                          )}\n                          {niceDateTime(updatedAtDate)}\n                        </time>\n                      </b>\n                      <MenuConfirm\n                        confirmLabel={<span>Delete this draft?</span>}\n                        menuItemClassName=\"danger\"\n                        align=\"end\"\n                        disabled={uiState === 'loading'}\n                        onClick={() => {\n                          (async () => {\n                            try {\n                              // const yes = confirm('Delete this draft?');\n                              // if (yes) {\n                              await db.drafts.del(key);\n                              reload();\n                              // }\n                            } catch (e) {\n                              alert('Error deleting draft! Please try again.');\n                            }\n                          })();\n                        }}\n                      >\n                        <button\n                          type=\"button\"\n                          class=\"small light\"\n                          disabled={uiState === 'loading'}\n                        >\n                          Delete&hellip;\n                        </button>\n                      </MenuConfirm>\n                    </div>\n                    <button\n                      type=\"button\"\n                      disabled={uiState === 'loading'}\n                      class=\"draft-item\"\n                      onClick={async () => {\n                        // console.log({ draftStatus });\n                        let replyToStatus;\n                        if (replyTo) {\n                          setUIState('loading');\n                          try {\n                            replyToStatus = await masto.v1.statuses.fetch(\n                              replyTo.id,\n                            );\n                          } catch (e) {\n                            console.error(e);\n                            alert('Error fetching reply-to status!');\n                            setUIState('default');\n                            return;\n                          }\n                          setUIState('default');\n                        }\n                        window.__COMPOSE__ = {\n                          draftStatus,\n                          replyToStatus,\n                        };\n                        states.showCompose = true;\n                        states.showDrafts = false;\n                      }}\n                    >\n                      <MiniDraft draft={draft} />\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n            {drafts.length > 1 && (\n              <p>\n                <MenuConfirm\n                  confirmLabel={<span>Delete all drafts?</span>}\n                  menuItemClassName=\"danger\"\n                  disabled={uiState === 'loading'}\n                  onClick={() => {\n                    (async () => {\n                      // const yes = confirm('Delete all drafts?');\n                      // if (yes) {\n                      setUIState('loading');\n                      try {\n                        await db.drafts.delMany(\n                          drafts.map((draft) => draft.key),\n                        );\n                        setUIState('default');\n                        reload();\n                      } catch (e) {\n                        console.error(e);\n                        alert('Error deleting drafts! Please try again.');\n                        setUIState('error');\n                      }\n                      // }\n                    })();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"light danger\"\n                    disabled={uiState === 'loading'}\n                  >\n                    Delete all&hellip;\n                  </button>\n                </MenuConfirm>\n              </p>\n            )}\n          </>\n        ) : (\n          <p>No drafts found.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction MiniDraft({ draft }) {\n  const { draftStatus, replyTo } = draft;\n  const { status, spoilerText, poll, mediaAttachments } = draftStatus;\n  const hasPoll = poll?.options?.length > 0;\n  const hasMedia = mediaAttachments?.length > 0;\n  const hasPollOrMedia = hasPoll || hasMedia;\n  const firstImageMedia = useMemo(() => {\n    if (!hasMedia) return;\n    const image = mediaAttachments.find((media) => /image/.test(media.type));\n    if (!image) return;\n    const { file } = image;\n    const objectURL = URL.createObjectURL(file);\n    return objectURL;\n  }, [hasMedia, mediaAttachments]);\n  return (\n    <>\n      <div class=\"mini-draft\">\n        {hasPollOrMedia && (\n          <div\n            class={`mini-draft-aside ${firstImageMedia ? 'has-image' : ''}`}\n            style={\n              firstImageMedia\n                ? {\n                    '--bg-image': `url(${firstImageMedia})`,\n                  }\n                : {}\n            }\n          >\n            {hasPoll && <Icon icon=\"poll\" />}\n            {hasMedia && (\n              <span>\n                <Icon icon=\"attachment\" />{' '}\n                <small>{mediaAttachments?.length}</small>\n              </span>\n            )}\n          </div>\n        )}\n        <div class=\"mini-draft-main\">\n          {!!spoilerText && <div class=\"mini-draft-spoiler\">{spoilerText}</div>}\n          {!!status && <div class=\"mini-draft-status\">{status}</div>}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Drafts;\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { getBlurHashAverageColor } from 'fast-blurhash';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Media from './media';\nimport MenuLink from './menu-link';\nimport Modal from './modal';\nimport TranslationBlock from './translation-block';\n\nfunction MediaModal({\n  mediaAttachments,\n  statusID,\n  instance,\n  index = 0,\n  onClose = () => {},\n}) {\n  const carouselRef = useRef(null);\n\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const carouselFocusItem = useRef(null);\n  useLayoutEffect(() => {\n    carouselFocusItem.current?.scrollIntoView();\n\n    // history.pushState({ mediaModal: true }, '');\n    // const handlePopState = (e) => {\n    //   if (e.state?.mediaModal) {\n    //     onClose();\n    //   }\n    // };\n    // window.addEventListener('popstate', handlePopState);\n    // return () => {\n    //   window.removeEventListener('popstate', handlePopState);\n    // };\n  }, []);\n  const prevStatusID = useRef(statusID);\n  useEffect(() => {\n    const scrollLeft = index * carouselRef.current.clientWidth;\n    const differentStatusID = prevStatusID.current !== statusID;\n    if (differentStatusID) prevStatusID.current = statusID;\n    carouselRef.current.scrollTo({\n      left: scrollLeft,\n      behavior: differentStatusID ? 'auto' : 'smooth',\n    });\n    carouselRef.current.focus();\n  }, [index, statusID]);\n\n  const [showControls, setShowControls] = useState(true);\n\n  useEffect(() => {\n    let handleSwipe = () => {\n      onClose();\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('swiped-down', handleSwipe);\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('swiped-down', handleSwipe);\n      }\n    };\n  }, []);\n\n  useHotkeys('esc', onClose, [onClose]);\n\n  const [showMediaAlt, setShowMediaAlt] = useState(false);\n\n  useEffect(() => {\n    let handleScroll = () => {\n      const { clientWidth, scrollLeft } = carouselRef.current;\n      const index = Math.round(scrollLeft / clientWidth);\n      setCurrentIndex(index);\n    };\n    if (carouselRef.current) {\n      carouselRef.current.addEventListener('scroll', handleScroll, {\n        passive: true,\n      });\n    }\n    return () => {\n      if (carouselRef.current) {\n        carouselRef.current.removeEventListener('scroll', handleScroll);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      carouselRef.current?.focus?.();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div class=\"media-modal-container\">\n      <div\n        ref={carouselRef}\n        tabIndex=\"0\"\n        data-swipe-threshold=\"44\"\n        class=\"carousel\"\n        onClick={(e) => {\n          if (\n            e.target.classList.contains('carousel-item') ||\n            e.target.classList.contains('media') ||\n            e.target.classList.contains('media-zoom')\n          ) {\n            onClose();\n          }\n        }}\n      >\n        {mediaAttachments?.map((media, i) => {\n          const { blurhash } = media;\n          const rgbAverageColor = blurhash\n            ? getBlurHashAverageColor(blurhash)\n            : null;\n          return (\n            <div\n              class=\"carousel-item\"\n              style={{\n                '--average-color': `rgb(${rgbAverageColor?.join(',')})`,\n                '--average-color-alpha': `rgba(${rgbAverageColor?.join(\n                  ',',\n                )}, .5)`,\n              }}\n              tabindex=\"0\"\n              key={media.id}\n              ref={i === currentIndex ? carouselFocusItem : null}\n              onClick={(e) => {\n                if (e.target !== e.currentTarget) {\n                  setShowControls(!showControls);\n                }\n              }}\n            >\n              {!!media.description && (\n                <button\n                  type=\"button\"\n                  class=\"media-alt\"\n                  hidden={!showControls}\n                  onClick={() => {\n                    setShowMediaAlt(media.description);\n                  }}\n                >\n                  <Icon icon=\"info\" />\n                  <span class=\"media-alt-desc\">{media.description}</span>\n                </button>\n              )}\n              <Media media={media} showOriginal />\n            </div>\n          );\n        })}\n      </div>\n      <div class=\"carousel-top-controls\" hidden={!showControls}>\n        <span>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            onClick={() => onClose()}\n          >\n            <Icon icon=\"x\" />\n          </button>\n        </span>\n        {mediaAttachments?.length > 1 ? (\n          <span class=\"carousel-dots\">\n            {mediaAttachments?.map((media, i) => (\n              <button\n                key={media.id}\n                type=\"button\"\n                disabled={i === currentIndex}\n                class={`carousel-dot ${i === currentIndex ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  carouselRef.current.scrollTo({\n                    left: carouselRef.current.clientWidth * i,\n                    behavior: 'smooth',\n                  });\n                  carouselRef.current.focus();\n                }}\n              >\n                <Icon icon=\"round\" size=\"s\" />\n              </button>\n            ))}\n          </span>\n        ) : (\n          <span />\n        )}\n        <span>\n          <Menu\n            overflow=\"auto\"\n            align=\"end\"\n            position=\"anchor\"\n            boundingBoxPadding=\"8 8 8 8\"\n            gap={4}\n            menuClassName=\"glass-menu\"\n            menuButton={\n              <button type=\"button\" class=\"carousel-button\">\n                <Icon icon=\"more\" alt=\"More\" />\n              </button>\n            }\n          >\n            <MenuLink\n              href={\n                mediaAttachments[currentIndex]?.remoteUrl ||\n                mediaAttachments[currentIndex]?.url\n              }\n              class=\"carousel-button\"\n              target=\"_blank\"\n              title=\"Open original media in new window\"\n            >\n              <Icon icon=\"popout\" />\n              <span>Open original media</span>\n            </MenuLink>\n          </Menu>{' '}\n          <Link\n            to={`${instance ? `/${instance}` : ''}/s/${statusID}${\n              window.matchMedia('(min-width: calc(40em + 350px))').matches\n                ? `?media=${currentIndex + 1}`\n                : ''\n            }`}\n            class=\"button carousel-button media-post-link\"\n            // onClick={() => {\n            //   // if small screen (not media query min-width 40em + 350px), run onClose\n            //   if (\n            //     !window.matchMedia('(min-width: calc(40em + 350px))').matches\n            //   ) {\n            //     onClose();\n            //   }\n            // }}\n          >\n            <span class=\"button-label\">See post </span>&raquo;\n          </Link>\n        </span>\n      </div>\n      {mediaAttachments?.length > 1 && (\n        <div class=\"carousel-controls\" hidden={!showControls}>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === 0}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex - 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-left\" />\n          </button>\n          <button\n            type=\"button\"\n            class=\"carousel-button\"\n            hidden={currentIndex === mediaAttachments.length - 1}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              carouselRef.current.focus();\n              carouselRef.current.scrollTo({\n                left: carouselRef.current.clientWidth * (currentIndex + 1),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"arrow-right\" />\n          </button>\n        </div>\n      )}\n      {!!showMediaAlt && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowMediaAlt(false);\n              carouselRef.current.focus();\n            }\n          }}\n        >\n          <MediaAltModal\n            alt={showMediaAlt}\n            onClose={() => setShowMediaAlt(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction MediaAltModal({ alt, onClose }) {\n  const [forceTranslate, setForceTranslate] = useState(false);\n  return (\n    <div class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close outer\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Media description</h2>\n        <div class=\"header-side\">\n          <Menu\n            align=\"end\"\n            menuButton={\n              <button type=\"button\" class=\"plain4\">\n                <Icon icon=\"more\" alt=\"More\" size=\"xl\" />\n              </button>\n            }\n          >\n            <MenuItem\n              disabled={forceTranslate}\n              onClick={() => {\n                setForceTranslate(true);\n              }}\n            >\n              <Icon icon=\"translate\" />\n              <span>Translate</span>\n            </MenuItem>\n          </Menu>\n        </div>\n      </header>\n      <main>\n        <p\n          style={{\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {alt}\n        </p>\n        {forceTranslate && (\n          <TranslationBlock forceTranslate={forceTranslate} text={alt} />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default MediaModal;\n","export default \"__VITE_ASSET__bb9f04b2__\"","export default \"__VITE_ASSET__4fe390d9__\"","export default \"__VITE_ASSET__976e7e89__\"","import { useEffect, useState } from 'preact/hooks';\n\nfunction AsyncText({ children }) {\n  if (typeof children === 'string') return children;\n  const [text, setText] = useState('');\n  useEffect(() => {\n    Promise.resolve(children).then(setText);\n  }, [children]);\n  return text;\n}\n\nexport default AsyncText;\n","import './shortcuts-settings.css';\n\nimport {\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n} from 'lz-string';\nimport mem from 'mem';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport floatingButtonUrl from '../assets/floating-button.svg';\nimport multiColumnUrl from '../assets/multi-column.svg';\nimport tabMenuBarUrl from '../assets/tab-menu-bar.svg';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport MenuConfirm from './menu-confirm';\nimport Modal from './modal';\n\nconst SHORTCUTS_LIMIT = 9;\n\nconst TYPES = [\n  'following',\n  'mentions',\n  'notifications',\n  'list',\n  'public',\n  'trending',\n  // NOTE: Hide for now\n  // 'search', // Search on Mastodon ain't great\n  // 'account-statuses', // Need @acct search first\n  'hashtag',\n  'bookmarks',\n  'favourites',\n];\nconst TYPE_TEXT = {\n  following: 'Home / Following',\n  notifications: 'Notifications',\n  list: 'List',\n  public: 'Public (Local / Federated)',\n  search: 'Search',\n  'account-statuses': 'Account',\n  bookmarks: 'Bookmarks',\n  favourites: 'Favourites',\n  hashtag: 'Hashtag',\n  trending: 'Trending',\n  mentions: 'Mentions',\n};\nconst TYPE_PARAMS = {\n  list: [\n    {\n      text: 'List ID',\n      name: 'id',\n    },\n  ],\n  public: [\n    {\n      text: 'Local only',\n      name: 'local',\n      type: 'checkbox',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  trending: [\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n  search: [\n    {\n      text: 'Search term',\n      name: 'query',\n      type: 'text',\n    },\n  ],\n  'account-statuses': [\n    {\n      text: '@',\n      name: 'id',\n      type: 'text',\n      placeholder: 'cheeaun@mastodon.social',\n    },\n  ],\n  hashtag: [\n    {\n      text: '#',\n      name: 'hashtag',\n      type: 'text',\n      placeholder: 'e.g. PixelArt (Max 5, space-separated)',\n      pattern: '[^#]+',\n    },\n    {\n      text: 'Instance',\n      name: 'instance',\n      type: 'text',\n      placeholder: 'Optional, e.g. mastodon.social',\n      notRequired: true,\n    },\n  ],\n};\nexport const SHORTCUTS_META = {\n  following: {\n    id: 'home',\n    title: (_, index) => (index === 0 ? 'Home' : 'Following'),\n    path: '/',\n    icon: 'home',\n  },\n  mentions: {\n    id: 'mentions',\n    title: 'Mentions',\n    path: '/mentions',\n    icon: 'at',\n  },\n  notifications: {\n    id: 'notifications',\n    title: 'Notifications',\n    path: '/notifications',\n    icon: 'notification',\n  },\n  list: {\n    id: 'list',\n    title: mem(\n      async ({ id }) => {\n        const list = await api().masto.v1.lists.fetch(id);\n        return list.title;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/l/${id}`,\n    icon: 'list',\n  },\n  public: {\n    id: 'public',\n    title: ({ local }) => (local ? 'Local' : 'Federated'),\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ local, instance }) => `/${instance}/p${local ? '/l' : ''}`,\n    icon: ({ local }) => (local ? 'group' : 'earth'),\n  },\n  trending: {\n    id: 'trending',\n    title: 'Trending',\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ instance }) => `/${instance}/trending`,\n    icon: 'chart',\n  },\n  search: {\n    id: 'search',\n    title: ({ query }) => query,\n    path: ({ query }) => `/search?q=${query}`,\n    icon: 'search',\n  },\n  'account-statuses': {\n    id: 'account-statuses',\n    title: mem(\n      async ({ id }) => {\n        const account = await api().masto.v1.accounts.fetch(id);\n        return account.username || account.acct || account.displayName;\n      },\n      {\n        cacheKey: ([{ id }]) => id,\n      },\n    ),\n    path: ({ id }) => `/a/${id}`,\n    icon: 'user',\n  },\n  bookmarks: {\n    id: 'bookmarks',\n    title: 'Bookmarks',\n    path: '/b',\n    icon: 'bookmark',\n  },\n  favourites: {\n    id: 'favourites',\n    title: 'Favourites',\n    path: '/f',\n    icon: 'heart',\n  },\n  hashtag: {\n    id: 'hashtag',\n    title: ({ hashtag }) => hashtag,\n    subtitle: ({ instance }) => instance || api().instance,\n    path: ({ hashtag, instance }) =>\n      `${instance ? `/${instance}` : ''}/t/${hashtag.split(/\\s+/).join('+')}`,\n    icon: 'hashtag',\n  },\n};\n\nfunction ShortcutsSettings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const { masto } = api();\n  const { shortcuts } = snapStates;\n\n  const [lists, setLists] = useState([]);\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        setLists(lists);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list();\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        setFollowedHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"shortcuts-settings-container\" class=\"sheet\" tabindex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          <Icon icon=\"shortcut\" /> Shortcuts{' '}\n          <sup\n            style={{\n              fontSize: 12,\n              opacity: 0.5,\n              textTransform: 'uppercase',\n            }}\n          >\n            beta\n          </sup>\n        </h2>\n      </header>\n      <main>\n        <p>\n          Specify a list of shortcuts that'll appear&nbsp;as:\n          <div class=\"shortcuts-view-mode\">\n            {[\n              {\n                value: 'float-button',\n                label: 'Floating button',\n                imgURL: floatingButtonUrl,\n              },\n              {\n                value: 'tab-menu-bar',\n                label: 'Tab/Menu bar',\n                imgURL: tabMenuBarUrl,\n              },\n              {\n                value: 'multi-column',\n                label: 'Multi-column',\n                imgURL: multiColumnUrl,\n              },\n            ].map(({ value, label, imgURL }) => (\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"shortcuts-view-mode\"\n                  value={value}\n                  checked={\n                    snapStates.settings.shortcutsViewMode === value ||\n                    (value === 'float-button' &&\n                      !snapStates.settings.shortcutsViewMode)\n                  }\n                  onChange={(e) => {\n                    states.settings.shortcutsViewMode = e.target.value;\n                  }}\n                />{' '}\n                <img src={imgURL} alt=\"\" width=\"80\" height=\"58\" />{' '}\n                <span>{label}</span>\n              </label>\n            ))}\n          </div>\n          {/* <select\n              value={snapStates.settings.shortcutsViewMode || 'float-button'}\n              onChange={(e) => {\n                states.settings.shortcutsViewMode = e.target.value;\n              }}\n            >\n              <option value=\"float-button\">Floating button</option>\n              <option value=\"multi-column\">Multi-column</option>\n              <option value=\"tab-menu-bar\">Tab/Menu bar </option>\n            </select> */}\n        </p>\n        {/* <p>\n          <details>\n            <summary class=\"insignificant\">\n              Experimental Multi-column mode\n            </summary>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={snapStates.settings.shortcutsColumnsMode}\n                onChange={(e) => {\n                  states.settings.shortcutsColumnsMode = e.target.checked;\n                }}\n              />{' '}\n              Show shortcuts in multiple columns instead of the floating button.\n            </label>\n          </details>\n        </p> */}\n        {shortcuts.length > 0 ? (\n          <ol class=\"shortcuts-list\">\n            {shortcuts.filter(Boolean).map((shortcut, i) => {\n              const key = i + Object.values(shortcut);\n              const { type } = shortcut;\n              if (!SHORTCUTS_META[type]) return null;\n              let { icon, title, subtitle } = SHORTCUTS_META[type];\n              if (typeof title === 'function') {\n                title = title(shortcut, i);\n              }\n              if (typeof subtitle === 'function') {\n                subtitle = subtitle(shortcut, i);\n              }\n              if (typeof icon === 'function') {\n                icon = icon(shortcut, i);\n              }\n              return (\n                <li key={key}>\n                  <Icon icon={icon} />\n                  <span class=\"shortcut-text\">\n                    <AsyncText>{title}</AsyncText>\n                    {subtitle && (\n                      <>\n                        {' '}\n                        <small class=\"ib insignificant\">{subtitle}</small>\n                      </>\n                    )}\n                  </span>\n                  <span class=\"shortcut-actions\">\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === 0}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i > 0) {\n                          const temp = states.shortcuts[i - 1];\n                          shortcutsArr[i - 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-up\" alt=\"Move up\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      disabled={i === shortcuts.length - 1}\n                      onClick={() => {\n                        const shortcutsArr = Array.from(states.shortcuts);\n                        if (i < states.shortcuts.length - 1) {\n                          const temp = states.shortcuts[i + 1];\n                          shortcutsArr[i + 1] = shortcut;\n                          shortcutsArr[i] = temp;\n                          states.shortcuts = shortcutsArr;\n                        }\n                      }}\n                    >\n                      <Icon icon=\"arrow-down\" alt=\"Move down\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        setShowForm({\n                          shortcut,\n                          shortcutIndex: i,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" alt=\"Edit\" />\n                    </button>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain small\"\n                      onClick={() => {\n                        states.shortcuts.splice(i, 1);\n                      }}\n                    >\n                      <Icon icon=\"x\" alt=\"Remove\" />\n                    </button> */}\n                  </span>\n                </li>\n              );\n            })}\n          </ol>\n        ) : (\n          <div class=\"ui-state insignificant\">\n            <p>No shortcuts yet. Tap on the Add shortcut button.</p>\n            <p>\n              Not sure what to add?\n              <br />\n              Try adding{' '}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.shortcuts = [\n                    {\n                      type: 'following',\n                    },\n                    {\n                      type: 'notifications',\n                    },\n                  ];\n                }}\n              >\n                Home / Following and Notifications\n              </a>{' '}\n              first.\n            </p>\n          </div>\n        )}\n        <p class=\"insignificant\">\n          {shortcuts.length >= SHORTCUTS_LIMIT &&\n            `Max ${SHORTCUTS_LIMIT} shortcuts`}\n        </p>\n        <p\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <button\n            type=\"button\"\n            class=\"light\"\n            onClick={() => setShowImportExport(true)}\n          >\n            Import/export\n          </button>\n          <button\n            type=\"button\"\n            disabled={shortcuts.length >= SHORTCUTS_LIMIT}\n            onClick={() => setShowForm(true)}\n          >\n            <Icon icon=\"plus\" /> <span>Add shortcut</span>\n          </button>\n        </p>\n      </main>\n      {showForm && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowForm(false);\n            }\n          }}\n        >\n          <ShortcutForm\n            shortcut={showForm.shortcut}\n            shortcutIndex={showForm.shortcutIndex}\n            lists={lists}\n            followedHashtags={followedHashtags}\n            onSubmit={({ result, mode }) => {\n              console.log('onSubmit', result);\n              if (mode === 'edit') {\n                states.shortcuts[showForm.shortcutIndex] = result;\n              } else {\n                states.shortcuts.push(result);\n              }\n            }}\n            onClose={() => setShowForm(false)}\n          />\n        </Modal>\n      )}\n      {showImportExport && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowImportExport(false);\n            }\n          }}\n        >\n          <ImportExport\n            shortcuts={shortcuts}\n            onClose={() => setShowImportExport(false)}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nfunction ShortcutForm({\n  lists,\n  followedHashtags,\n  onSubmit,\n  disabled,\n  shortcut,\n  shortcutIndex,\n  onClose,\n}) {\n  console.log('shortcut', shortcut);\n  const editMode = !!shortcut;\n  const [currentType, setCurrentType] = useState(shortcut?.type || null);\n\n  const formRef = useRef();\n  useEffect(() => {\n    if (editMode && currentType && TYPE_PARAMS[currentType]) {\n      // Populate form\n      const form = formRef.current;\n      TYPE_PARAMS[currentType].forEach(({ name, type }) => {\n        const input = form.querySelector(`[name=\"${name}\"]`);\n        if (input && shortcut[name]) {\n          if (type === 'checkbox') {\n            input.checked = shortcut[name] === 'on' ? true : false;\n          } else {\n            input.value = shortcut[name];\n          }\n        }\n      });\n    }\n  }, [editMode, currentType]);\n\n  return (\n    <div id=\"shortcut-settings-form\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>{editMode ? 'Edit' : 'Add'} shortcut</h2>\n      </header>\n      <main tabindex=\"-1\">\n        <form\n          ref={formRef}\n          onSubmit={(e) => {\n            // Construct a nice object from form\n            e.preventDefault();\n            const data = new FormData(e.target);\n            const result = {};\n            data.forEach((value, key) => {\n              result[key] = value?.trim();\n              if (key === 'instance') {\n                // Remove protocol and trailing slash\n                result[key] = result[key]\n                  .replace(/^https?:\\/\\//, '')\n                  .replace(/\\/+$/, '');\n                // Remove @acct@ or acct@ from instance URL\n                result[key] = result[key].replace(/^@?[^@]+@/, '');\n              }\n            });\n            console.log('result', result);\n            if (!result.type) return;\n            onSubmit({\n              result,\n              mode: editMode ? 'edit' : 'add',\n            });\n            // Reset\n            e.target.reset();\n            setCurrentType(null);\n            onClose?.();\n          }}\n        >\n          <p>\n            <label>\n              <span>Timeline</span>\n              <select\n                required\n                disabled={disabled}\n                onChange={(e) => {\n                  setCurrentType(e.target.value);\n                }}\n                defaultValue={editMode ? shortcut.type : undefined}\n                name=\"type\"\n              >\n                <option></option>\n                {TYPES.map((type) => (\n                  <option value={type}>{TYPE_TEXT[type]}</option>\n                ))}\n              </select>\n            </label>\n          </p>\n          {TYPE_PARAMS[currentType]?.map?.(\n            ({ text, name, type, placeholder, pattern, notRequired }) => {\n              if (currentType === 'list') {\n                return (\n                  <p>\n                    <label>\n                      <span>List</span>\n                      <select\n                        name=\"id\"\n                        required={!notRequired}\n                        disabled={disabled}\n                      >\n                        {lists.map((list) => (\n                          <option value={list.id}>{list.title}</option>\n                        ))}\n                      </select>\n                    </label>\n                  </p>\n                );\n              }\n\n              return (\n                <p>\n                  <label>\n                    <span>{text}</span>{' '}\n                    <input\n                      type={type}\n                      name={name}\n                      placeholder={placeholder}\n                      required={type === 'text' && !notRequired}\n                      disabled={disabled}\n                      list={\n                        currentType === 'hashtag'\n                          ? 'followed-hashtags-datalist'\n                          : null\n                      }\n                      autocorrect=\"off\"\n                      autocapitalize=\"off\"\n                      spellcheck={false}\n                      pattern={pattern}\n                    />\n                    {currentType === 'hashtag' &&\n                      followedHashtags.length > 0 && (\n                        <datalist id=\"followed-hashtags-datalist\">\n                          {followedHashtags.map((tag) => (\n                            <option value={tag.name} />\n                          ))}\n                        </datalist>\n                      )}\n                  </label>\n                </p>\n              );\n            },\n          )}\n          <footer>\n            <button type=\"submit\" class=\"block\" disabled={disabled}>\n              {editMode ? 'Save' : 'Add'}\n            </button>\n            {editMode && (\n              <button\n                type=\"button\"\n                class=\"light danger\"\n                onClick={() => {\n                  states.shortcuts.splice(shortcutIndex, 1);\n                  onClose?.();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          </footer>\n        </form>\n      </main>\n    </div>\n  );\n}\n\nfunction ImportExport({ shortcuts, onClose }) {\n  const shortcutsStr = useMemo(() => {\n    if (!shortcuts) return '';\n    if (!shortcuts.filter(Boolean).length) return '';\n    return compressToEncodedURIComponent(\n      JSON.stringify(shortcuts.filter(Boolean)),\n    );\n  }, [shortcuts]);\n  const [importShortcutStr, setImportShortcutStr] = useState('');\n  const [importUIState, setImportUIState] = useState('default');\n  const parsedImportShortcutStr = useMemo(() => {\n    if (!importShortcutStr) {\n      setImportUIState('default');\n      return null;\n    }\n    try {\n      const parsed = JSON.parse(\n        decompressFromEncodedURIComponent(importShortcutStr),\n      );\n      // Very basic validation, I know\n      if (!Array.isArray(parsed)) throw new Error('Not an array');\n      setImportUIState('default');\n      return parsed;\n    } catch (err) {\n      // Fallback to JSON string parsing\n      // There's a chance that someone might want to import a JSON string instead of the compressed version\n      try {\n        const parsed = JSON.parse(importShortcutStr);\n        if (!Array.isArray(parsed)) throw new Error('Not an array');\n        setImportUIState('default');\n        return parsed;\n      } catch (err) {\n        setImportUIState('error');\n        return null;\n      }\n    }\n  }, [importShortcutStr]);\n  const hasCurrentSettings = states.shortcuts.length > 0;\n\n  return (\n    <div id=\"import-export-container\" class=\"sheet\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>\n          Import/Export <small class=\"ib insignificant\">Shortcuts</small>\n        </h2>\n      </header>\n      <main tabindex=\"-1\">\n        <section>\n          <h3>\n            <Icon icon=\"arrow-down-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Import</span>\n          </h3>\n          <p>\n            <input\n              type=\"text\"\n              name=\"import\"\n              placeholder=\"Paste shortcuts here\"\n              class=\"block\"\n              onInput={(e) => {\n                setImportShortcutStr(e.target.value);\n              }}\n            />\n          </p>\n          {!!parsedImportShortcutStr &&\n            Array.isArray(parsedImportShortcutStr) && (\n              <>\n                <p>\n                  <b>{parsedImportShortcutStr.length}</b> shortcut\n                  {parsedImportShortcutStr.length > 1 ? 's' : ''}{' '}\n                  <small class=\"insignificant\">\n                    ({importShortcutStr.length} characters)\n                  </small>\n                </p>\n                <ol class=\"import-settings-list\">\n                  {parsedImportShortcutStr.map((shortcut) => (\n                    <li>\n                      <span\n                        style={{\n                          opacity: shortcuts.some((s) =>\n                            // Compare all properties\n                            Object.keys(s).every(\n                              (key) => s[key] === shortcut[key],\n                            ),\n                          )\n                            ? 1\n                            : 0,\n                        }}\n                      >\n                        *\n                      </span>\n                      <span>\n                        {TYPE_TEXT[shortcut.type]}\n                        {shortcut.type === 'list' && ' ⚠️'}{' '}\n                        {TYPE_PARAMS[shortcut.type]?.map?.(\n                          ({ text, name, type }) =>\n                            shortcut[name] ? (\n                              <>\n                                <span class=\"tag collapsed insignificant\">\n                                  {text}:{' '}\n                                  {type === 'checkbox'\n                                    ? shortcut[name] === 'on'\n                                      ? '✅'\n                                      : '❌'\n                                    : shortcut[name]}\n                                </span>{' '}\n                              </>\n                            ) : null,\n                        )}\n                      </span>\n                    </li>\n                  ))}\n                </ol>\n                <p>\n                  <small>* Exists in current shortcuts</small>\n                  <br />\n                  <small>\n                    ⚠️ List may not work if it's from a different account.\n                  </small>\n                </p>\n              </>\n            )}\n          {importUIState === 'error' && (\n            <p class=\"error\">\n              <small>⚠️ Invalid settings format</small>\n            </p>\n          )}\n          <p>\n            {hasCurrentSettings && (\n              <>\n                <MenuConfirm\n                  confirmLabel=\"Append to current shortcuts?\"\n                  menuFooter={\n                    <div class=\"footer\">\n                      Only shortcuts that don’t exist in current shortcuts will\n                      be appended.\n                    </div>\n                  }\n                  onClick={() => {\n                    // states.shortcuts = [\n                    //   ...states.shortcuts,\n                    //   ...parsedImportShortcutStr,\n                    // ];\n                    // Append non-unique shortcuts only\n                    const nonUniqueShortcuts = parsedImportShortcutStr.filter(\n                      (shortcut) =>\n                        !states.shortcuts.some((s) =>\n                          // Compare all properties\n                          Object.keys(s).every(\n                            (key) => s[key] === shortcut[key],\n                          ),\n                        ),\n                    );\n                    if (!nonUniqueShortcuts.length) {\n                      showToast('No new shortcuts to import');\n                      return;\n                    }\n                    let newShortcuts = [\n                      ...states.shortcuts,\n                      ...nonUniqueShortcuts,\n                    ];\n                    const exceededLimit = newShortcuts.length > SHORTCUTS_LIMIT;\n                    if (exceededLimit) {\n                      // If exceeded, trim it\n                      newShortcuts = newShortcuts.slice(0, SHORTCUTS_LIMIT);\n                    }\n                    states.shortcuts = newShortcuts;\n                    showToast(\n                      exceededLimit\n                        ? `Shortcuts imported. Exceeded max ${SHORTCUTS_LIMIT}, so the rest are not imported.`\n                        : 'Shortcuts imported',\n                    );\n                    onClose?.();\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain2\"\n                    disabled={!parsedImportShortcutStr}\n                  >\n                    Import & append…\n                  </button>\n                </MenuConfirm>{' '}\n              </>\n            )}\n            <MenuConfirm\n              confirmLabel={\n                hasCurrentSettings\n                  ? 'Override current shortcuts?'\n                  : 'Import shortcuts?'\n              }\n              menuItemClassName={hasCurrentSettings ? 'danger' : undefined}\n              onClick={() => {\n                states.shortcuts = parsedImportShortcutStr;\n                showToast('Shortcuts imported');\n                onClose?.();\n              }}\n            >\n              <button\n                type=\"button\"\n                class=\"plain2\"\n                disabled={!parsedImportShortcutStr}\n              >\n                {hasCurrentSettings ? 'or override…' : 'Import…'}\n              </button>\n            </MenuConfirm>\n          </p>\n        </section>\n        <section>\n          <h3>\n            <Icon icon=\"arrow-up-circle\" size=\"l\" class=\"insignificant\" />{' '}\n            <span>Export</span>\n          </h3>\n          <p>\n            <input\n              style={{ width: '100%' }}\n              type=\"text\"\n              value={shortcutsStr}\n              readOnly\n              onClick={(e) => {\n                if (!e.target.value) return;\n                e.target.select();\n                // Copy url to clipboard\n                try {\n                  navigator.clipboard.writeText(e.target.value);\n                  showToast('Shortcuts copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcuts');\n                }\n              }}\n            />\n          </p>\n          <p>\n            <button\n              type=\"button\"\n              class=\"plain2\"\n              disabled={!shortcutsStr}\n              onClick={() => {\n                try {\n                  navigator.clipboard.writeText(shortcutsStr);\n                  showToast('Shortcut settings copied');\n                } catch (e) {\n                  console.error(e);\n                  showToast('Unable to copy shortcut settings');\n                }\n              }}\n            >\n              <Icon icon=\"clipboard\" /> <span>Copy</span>\n            </button>{' '}\n            {navigator?.share &&\n              navigator?.canShare?.({\n                text: shortcutsStr,\n              }) && (\n                <button\n                  type=\"button\"\n                  class=\"plain2\"\n                  disabled={!shortcutsStr}\n                  onClick={() => {\n                    try {\n                      navigator.share({\n                        text: shortcutsStr,\n                      });\n                    } catch (e) {\n                      console.error(e);\n                      alert(\"Sharing doesn't seem to work.\");\n                    }\n                  }}\n                >\n                  <Icon icon=\"share\" /> <span>Share</span>\n                </button>\n              )}{' '}\n            {shortcutsStr.length > 0 && (\n              <small class=\"insignificant\">\n                {shortcutsStr.length} characters\n              </small>\n            )}\n          </p>\n          {!!shortcutsStr && (\n            <details>\n              <summary class=\"insignificant\">\n                <small>Raw Shortcuts JSON</small>\n              </summary>\n              <textarea style={{ width: '100%' }} rows={10} readOnly>\n                {JSON.stringify(shortcuts.filter(Boolean), null, 2)}\n              </textarea>\n            </details>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default ShortcutsSettings;\n","import './shortcuts.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport { SHORTCUTS_META } from '../components/shortcuts-settings';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\n\nimport AsyncText from './AsyncText';\nimport Icon from './icon';\nimport Link from './link';\nimport MenuLink from './menu-link';\n\nfunction Shortcuts() {\n  const { instance } = api();\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  if (!shortcuts.length) {\n    return null;\n  }\n\n  const menuRef = useRef();\n\n  const formattedShortcuts = useMemo(\n    () =>\n      shortcuts\n        .map((pin, i) => {\n          const { type, ...data } = pin;\n          if (!SHORTCUTS_META[type]) return null;\n          let { id, path, title, subtitle, icon } = SHORTCUTS_META[type];\n\n          if (typeof id === 'function') {\n            id = id(data, i);\n          }\n          if (typeof path === 'function') {\n            path = path(\n              {\n                ...data,\n                instance: data.instance || instance,\n              },\n              i,\n            );\n          }\n          if (typeof title === 'function') {\n            title = title(data, i);\n          }\n          if (typeof subtitle === 'function') {\n            subtitle = subtitle(data, i);\n          }\n          if (typeof icon === 'function') {\n            icon = icon(data, i);\n          }\n\n          return {\n            id,\n            path,\n            title,\n            subtitle,\n            icon,\n          };\n        })\n        .filter(Boolean),\n    [shortcuts],\n  );\n\n  const navigate = useNavigate();\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    const index = parseInt(handler.keys[0], 10) - 1;\n    if (index < formattedShortcuts.length) {\n      const { path } = formattedShortcuts[index];\n      if (path) {\n        navigate(path);\n        menuRef.current?.closeMenu?.();\n      }\n    }\n  });\n\n  return (\n    <div id=\"shortcuts\">\n      {snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? (\n        <nav class=\"tab-bar\">\n          <ul>\n            {formattedShortcuts.map(\n              ({ id, path, title, subtitle, icon }, i) => {\n                return (\n                  <li key={i + title}>\n                    <Link\n                      class={subtitle ? 'has-subtitle' : ''}\n                      to={path}\n                      onClick={(e) => {\n                        if (e.target.classList.contains('is-active')) {\n                          e.preventDefault();\n                          const page = document.getElementById(`${id}-page`);\n                          console.log(id, page);\n                          if (page) {\n                            page.scrollTop = 0;\n                            const updatesButton =\n                              page.querySelector('.updates-button');\n                            if (updatesButton) {\n                              updatesButton.click();\n                            }\n                          }\n                        }\n                      }}\n                    >\n                      <Icon icon={icon} size=\"xl\" alt={title} />\n                      <span>\n                        <AsyncText>{title}</AsyncText>\n                        {subtitle && (\n                          <>\n                            <br />\n                            <small>{subtitle}</small>\n                          </>\n                        )}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              },\n            )}\n          </ul>\n        </nav>\n      ) : (\n        <Menu\n          instanceRef={menuRef}\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          boundingBoxPadding=\"8 8 8 8\"\n          menuClassName=\"glass-menu shortcuts-menu\"\n          gap={8}\n          position=\"anchor\"\n          menuButton={\n            <button\n              type=\"button\"\n              id=\"shortcuts-button\"\n              class=\"plain\"\n              onTransitionStart={(e) => {\n                // Close menu if the button disappears\n                try {\n                  const { target } = e;\n                  if (getComputedStyle(target).pointerEvents === 'none') {\n                    menuRef.current?.closeMenu?.();\n                  }\n                } catch (e) {}\n              }}\n            >\n              <Icon icon=\"shortcut\" size=\"xl\" alt=\"Shortcuts\" />\n            </button>\n          }\n        >\n          {formattedShortcuts.map(({ path, title, subtitle, icon }, i) => {\n            return (\n              <MenuLink to={path} key={i + title} class=\"glass-menu-item\">\n                <Icon icon={icon} size=\"l\" />{' '}\n                <span class=\"menu-grow\">\n                  <span>\n                    <AsyncText>{title}</AsyncText>\n                  </span>\n                  {subtitle && (\n                    <>\n                      {' '}\n                      <small class=\"more-insignificant\">{subtitle}</small>\n                    </>\n                  )}\n                </span>\n                <span class=\"menu-shortcut hide-until-focus-visible\">\n                  {i + 1}\n                </span>\n              </MenuLink>\n            );\n          })}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default Shortcuts;\n","import { Menu } from '@szhsin/react-menu';\nimport { useWindowSize } from '@uidotdev/usehooks';\nimport { useRef } from 'preact/hooks';\n\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\n\n// It's like Menu but with sensible defaults, bug fixes and improvements.\nfunction Menu2(props) {\n  const { containerProps } = props;\n  const size = useWindowSize();\n  const instanceRef = useRef();\n  return (\n    <Menu\n      boundingBoxPadding={safeBoundingBoxPadding()}\n      repositionFlag={`${size.width}x${size.height}`}\n      {...props}\n      instanceRef={instanceRef}\n      containerProps={{\n        onClick: (e) => {\n          if (e.target === e.currentTarget) {\n            instanceRef.current?.closeMenu?.();\n          }\n          containerProps?.onClick?.(e);\n        },\n        ...containerProps,\n      }}\n    />\n  );\n}\n\nexport default Menu2;\n","import store from './store';\n\nexport function groupBoosts(values) {\n  let newValues = [];\n  let boostStash = [];\n  let serialBoosts = 0;\n  for (let i = 0; i < values.length; i++) {\n    const item = values[i];\n    if (item.reblog && !item.account?.group) {\n      boostStash.push(item);\n      serialBoosts++;\n    } else {\n      newValues.push(item);\n      if (serialBoosts < 3) {\n        serialBoosts = 0;\n      }\n    }\n  }\n  // if boostStash is more than quarter of values\n  // or if there are 3 or more boosts in a row\n  if (\n    values.length > 10 &&\n    (boostStash.length > values.length / 4 || serialBoosts >= 3)\n  ) {\n    // if boostStash is more than 3 quarter of values\n    const boostStashID = boostStash.map((status) => status.id);\n    if (boostStash.length > (values.length * 3) / 4) {\n      // insert boost array at the end of specialHome list\n      newValues = [\n        ...newValues,\n        { id: boostStashID, items: boostStash, type: 'boosts' },\n      ];\n    } else {\n      // insert boosts array in the middle of specialHome list\n      const half = Math.floor(newValues.length / 2);\n      newValues = [\n        ...newValues.slice(0, half),\n        {\n          id: boostStashID,\n          items: boostStash,\n          type: 'boosts',\n        },\n        ...newValues.slice(half),\n      ];\n    }\n    return newValues;\n  } else {\n    return values;\n  }\n}\n\nexport function dedupeBoosts(items, instance) {\n  const boostedStatusIDs = store.account.get('boostedStatusIDs') || {};\n  const filteredItems = items.filter((item) => {\n    if (!item.reblog) return true;\n    const statusKey = `${instance}-${item.reblog.id}`;\n    const boosterID = boostedStatusIDs[statusKey];\n    if (boosterID && boosterID !== item.id) {\n      console.warn(\n        `🚫 Duplicate boost by ${item.account.displayName}`,\n        item,\n        item.reblog,\n      );\n      return false;\n    } else {\n      boostedStatusIDs[statusKey] = item.id;\n    }\n    return true;\n  });\n  // Limit to 50\n  const keys = Object.keys(boostedStatusIDs);\n  if (keys.length > 50) {\n    keys.slice(0, keys.length - 50).forEach((key) => {\n      delete boostedStatusIDs[key];\n    });\n  }\n  store.account.set('boostedStatusIDs', boostedStatusIDs);\n  return filteredItems;\n}\n\nexport function groupContext(items) {\n  const contexts = [];\n  let contextIndex = 0;\n  items.forEach((item) => {\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) return;\n      if (\n        contexts[i].find((t) => t.id === item.inReplyToId) ||\n        contexts[i].find((t) => t.inReplyToId === item.id)\n      ) {\n        contexts[i].push(item);\n        return;\n      }\n    }\n    const repliedItem = items.find((i) => i.id === item.inReplyToId);\n    if (repliedItem) {\n      contexts[contextIndex++] = [item, repliedItem];\n    }\n  });\n\n  // Check for cross-item contexts\n  // Merge contexts into one if they have a common item (same id)\n  for (let i = 0; i < contexts.length; i++) {\n    for (let j = i + 1; j < contexts.length; j++) {\n      const commonItem = contexts[i].find((t) => contexts[j].includes(t));\n      if (commonItem) {\n        contexts[i] = [...contexts[i], ...contexts[j]];\n        // Remove duplicate items\n        contexts[i] = contexts[i].filter(\n          (item, index, self) =>\n            self.findIndex((t) => t.id === item.id) === index,\n        );\n        contexts.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  // Sort items by checking inReplyToId\n  contexts.forEach((context) => {\n    context.sort((a, b) => {\n      if (!a.inReplyToId && !b.inReplyToId) {\n        return new Date(a.createdAt) - new Date(b.createdAt);\n      }\n      if (a.inReplyToId === b.id) return 1;\n      if (b.inReplyToId === a.id) return -1;\n      if (!a.inReplyToId) return -1;\n      if (!b.inReplyToId) return 1;\n      return new Date(a.createdAt) - new Date(b.createdAt);\n    });\n  });\n\n  // Tag items that has different author than first post's author\n  contexts.forEach((context) => {\n    const firstItemAccountID = context[0].account.id;\n    context.forEach((item) => {\n      if (item.account.id !== firstItemAccountID) {\n        item._differentAuthor = true;\n      }\n    });\n  });\n\n  if (contexts.length) console.log('🧵 Contexts', contexts);\n\n  const newItems = [];\n  const appliedContextIndices = [];\n  items.forEach((item) => {\n    if (item.reblog) {\n      newItems.push(item);\n      return;\n    }\n    for (let i = 0; i < contexts.length; i++) {\n      if (contexts[i].find((t) => t.id === item.id)) {\n        if (appliedContextIndices.includes(i)) return;\n        const contextItems = contexts[i];\n        contextItems.sort((a, b) => {\n          const aDate = new Date(a.createdAt);\n          const bDate = new Date(b.createdAt);\n          return aDate - bDate;\n        });\n        const firstItemAccountID = contextItems[0].account.id;\n        newItems.push({\n          id: contextItems.map((i) => i.id),\n          items: contextItems,\n          type: contextItems.every((it) => it.account.id === firstItemAccountID)\n            ? 'thread'\n            : 'conversation',\n        });\n        appliedContextIndices.push(i);\n        return;\n      }\n    }\n    newItems.push(item);\n  });\n\n  return newItems;\n}\n","import { useEffect, useRef } from 'preact/hooks';\n\nexport default function usePageVisibility(fn = () => {}, deps = []) {\n  const savedCallback = useRef(fn);\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [deps]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const hidden = document.hidden || document.visibilityState === 'hidden';\n      console.log('👀 Page visibility changed', hidden ? 'hidden' : 'visible');\n      savedCallback.current(!hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () =>\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n}\n","import { useLayoutEffect, useState } from 'preact/hooks';\n\nexport default function useScroll({\n  scrollableRef,\n  distanceFromStart = 1, // ratio of clientHeight/clientWidth\n  distanceFromEnd = 1, // ratio of clientHeight/clientWidth\n  scrollThresholdStart = 10,\n  scrollThresholdEnd = 10,\n  direction = 'vertical',\n  distanceFromStartPx: _distanceFromStartPx,\n  distanceFromEndPx: _distanceFromEndPx,\n} = {}) {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [reachStart, setReachStart] = useState(false);\n  const [reachEnd, setReachEnd] = useState(false);\n  const [nearReachStart, setNearReachStart] = useState(false);\n  const [nearReachEnd, setNearReachEnd] = useState(false);\n  const isVertical = direction === 'vertical';\n\n  useLayoutEffect(() => {\n    const scrollableElement = scrollableRef.current;\n    if (!scrollableElement) return {};\n    let previousScrollStart = isVertical\n      ? scrollableElement.scrollTop\n      : scrollableElement.scrollLeft;\n\n    function onScroll() {\n      const {\n        scrollTop,\n        scrollLeft,\n        scrollHeight,\n        scrollWidth,\n        clientHeight,\n        clientWidth,\n      } = scrollableElement;\n      const scrollStart = isVertical ? scrollTop : scrollLeft;\n      const scrollDimension = isVertical ? scrollHeight : scrollWidth;\n      const clientDimension = isVertical ? clientHeight : clientWidth;\n      const scrollDistance = Math.abs(scrollStart - previousScrollStart);\n      const distanceFromStartPx =\n        _distanceFromStartPx ||\n        Math.min(\n          clientDimension * distanceFromStart,\n          scrollDimension,\n          scrollStart,\n        );\n      const distanceFromEndPx =\n        _distanceFromEndPx ||\n        Math.min(\n          clientDimension * distanceFromEnd,\n          scrollDimension,\n          scrollDimension - scrollStart - clientDimension,\n        );\n\n      if (\n        scrollDistance >=\n        (previousScrollStart < scrollStart\n          ? scrollThresholdEnd\n          : scrollThresholdStart)\n      ) {\n        setScrollDirection(previousScrollStart < scrollStart ? 'end' : 'start');\n        previousScrollStart = scrollStart;\n      }\n\n      setReachStart(scrollStart <= 0);\n      setReachEnd(scrollStart + clientDimension >= scrollDimension);\n      setNearReachStart(scrollStart <= distanceFromStartPx);\n      setNearReachEnd(\n        scrollStart + clientDimension >= scrollDimension - distanceFromEndPx,\n      );\n    }\n\n    scrollableElement.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => scrollableElement.removeEventListener('scroll', onScroll);\n  }, [\n    distanceFromStart,\n    distanceFromEnd,\n    scrollThresholdStart,\n    scrollThresholdEnd,\n  ]);\n\n  return {\n    scrollDirection,\n    reachStart,\n    reachEnd,\n    nearReachStart,\n    nearReachEnd,\n    init: () => {\n      if (scrollableRef.current) {\n        scrollableRef.current.dispatchEvent(new Event('scroll'));\n      }\n    },\n  };\n}\n","import './nav-menu.css';\n\nimport { ControlledMenu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useLongPress } from 'use-long-press';\nimport { useSnapshot } from 'valtio';\n\nimport { api } from '../utils/api';\nimport safeBoundingBoxPadding from '../utils/safe-bounding-box-padding';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport Icon from './icon';\nimport MenuLink from './menu-link';\n\nfunction NavMenu(props) {\n  const snapStates = useSnapshot(states);\n  const { instance, authenticated } = api();\n\n  const [currentAccount, setCurrentAccount] = useState();\n  const [moreThanOneAccount, setMoreThanOneAccount] = useState(false);\n\n  useEffect(() => {\n    const accounts = store.local.getJSON('accounts') || [];\n    const acc = accounts.find(\n      (account) => account.info.id === store.session.get('currentAccount'),\n    );\n    if (acc) setCurrentAccount(acc);\n    setMoreThanOneAccount(accounts.length > 1);\n  }, []);\n\n  // Home = Following\n  // But when in multi-column mode, Home becomes columns of anything\n  // User may choose pin or not to pin Following\n  // If user doesn't pin Following, we show it in the menu\n  const showFollowing =\n    (snapStates.settings.shortcutsColumnsMode ||\n      snapStates.settings.shortcutsViewMode === 'multi-column') &&\n    !snapStates.shortcuts.find((pin) => pin.type === 'following');\n\n  const bindLongPress = useLongPress(\n    () => {\n      states.showAccounts = true;\n    },\n    {\n      threshold: 600,\n      detect: 'touch',\n      cancelOnMovement: true,\n    },\n  );\n\n  const buttonRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n\n  const boundingBoxPadding = safeBoundingBoxPadding([\n    0,\n    0,\n    snapStates.settings.shortcutsViewMode === 'tab-menu-bar' ? 50 : 0,\n    0,\n  ]);\n\n  return (\n    <>\n      <button\n        ref={buttonRef}\n        type=\"button\"\n        class={`button plain nav-menu-button ${\n          moreThanOneAccount ? 'with-avatar' : ''\n        } ${open ? 'active' : ''}`}\n        style={{ position: 'relative' }}\n        onClick={() => {\n          setMenuState((state) => (!state ? 'open' : undefined));\n        }}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          states.showAccounts = true;\n        }}\n        {...bindLongPress()}\n      >\n        {moreThanOneAccount && (\n          <Avatar\n            url={\n              currentAccount?.info?.avatar || currentAccount?.info?.avatarStatic\n            }\n            size=\"l\"\n            squircle={currentAccount?.info?.bot}\n          />\n        )}\n        <Icon icon=\"menu\" size={moreThanOneAccount ? 's' : 'l'} />\n      </button>\n      <ControlledMenu\n        menuClassName=\"nav-menu\"\n        state={menuState}\n        anchorRef={buttonRef}\n        onClose={() => {\n          setMenuState(undefined);\n        }}\n        containerProps={{\n          style: {\n            zIndex: 10,\n          },\n          onClick: () => {\n            setMenuState(undefined);\n          },\n        }}\n        portal={{\n          target: document.body,\n        }}\n        {...props}\n        overflow=\"auto\"\n        viewScroll=\"close\"\n        position=\"anchor\"\n        align=\"center\"\n        boundingBoxPadding={boundingBoxPadding}\n        unmountOnClose\n      >\n        <section>\n          {!!snapStates.appVersion?.commitHash &&\n            __COMMIT_HASH__ !== snapStates.appVersion.commitHash && (\n              <>\n                <MenuItem\n                  onClick={() => {\n                    const yes = confirm('Reload page now to update?');\n                    if (yes) {\n                      (async () => {\n                        try {\n                          location.reload();\n                        } catch (e) {}\n                      })();\n                    }\n                  }}\n                >\n                  <Icon icon=\"sparkles\" size=\"l\" />{' '}\n                  <span>New update available…</span>\n                </MenuItem>\n                <MenuDivider />\n              </>\n            )}\n          <MenuLink to=\"/\">\n            <Icon icon=\"home\" size=\"l\" /> <span>Home</span>\n          </MenuLink>\n          {authenticated && (\n            <>\n              {showFollowing && (\n                <MenuLink to=\"/following\">\n                  <Icon icon=\"following\" size=\"l\" /> <span>Following</span>\n                </MenuLink>\n              )}\n              <MenuLink to=\"/mentions\">\n                <Icon icon=\"at\" size=\"l\" /> <span>Mentions</span>\n              </MenuLink>\n              <MenuLink to=\"/notifications\">\n                <Icon icon=\"notification\" size=\"l\" /> <span>Notifications</span>\n                {snapStates.notificationsShowNew && (\n                  <sup title=\"New\" style={{ opacity: 0.5 }}>\n                    {' '}\n                    &bull;\n                  </sup>\n                )}\n              </MenuLink>\n              <MenuDivider />\n              <MenuLink to=\"/l\">\n                <Icon icon=\"list\" size=\"l\" /> <span>Lists</span>\n              </MenuLink>\n              <MenuLink to=\"/ft\">\n                <Icon icon=\"hashtag\" size=\"l\" /> <span>Followed Hashtags</span>\n              </MenuLink>\n              <MenuLink to=\"/b\">\n                <Icon icon=\"bookmark\" size=\"l\" /> <span>Bookmarks</span>\n              </MenuLink>\n              <MenuLink to=\"/f\">\n                <Icon icon=\"heart\" size=\"l\" /> <span>Favourites</span>\n              </MenuLink>\n            </>\n          )}\n          <MenuDivider />\n          <MenuLink to={`/search`}>\n            <Icon icon=\"search\" size=\"l\" /> <span>Search</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p/l`}>\n            <Icon icon=\"group\" size=\"l\" /> <span>Local</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/p`}>\n            <Icon icon=\"earth\" size=\"l\" /> <span>Federated</span>\n          </MenuLink>\n          <MenuLink to={`/${instance}/trending`}>\n            <Icon icon=\"chart\" size=\"l\" /> <span>Trending</span>\n          </MenuLink>\n        </section>\n        <section>\n          {authenticated ? (\n            <>\n              <MenuDivider />\n              {currentAccount?.info?.id && (\n                <MenuLink to={`/${instance}/a/${currentAccount.info.id}`}>\n                  <Icon icon=\"user\" size=\"l\" /> <span>Profile</span>\n                </MenuLink>\n              )}\n              <MenuItem\n                onClick={() => {\n                  states.showAccounts = true;\n                }}\n              >\n                <Icon icon=\"group\" size=\"l\" /> <span>Accounts&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showShortcutsSettings = true;\n                }}\n              >\n                <Icon icon=\"shortcut\" size=\"l\" />{' '}\n                <span>Shortcuts Settings&hellip;</span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  states.showSettings = true;\n                }}\n              >\n                <Icon icon=\"gear\" size=\"l\" /> <span>Settings&hellip;</span>\n              </MenuItem>\n            </>\n          ) : (\n            <>\n              <MenuDivider />\n              <MenuLink to=\"/login\">\n                <Icon icon=\"user\" size=\"l\" /> <span>Log in</span>\n              </MenuLink>\n            </>\n          )}\n        </section>\n      </ControlledMenu>\n    </>\n  );\n}\n\nexport default NavMenu;\n","import { useIdle } from '@uidotdev/usehooks';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport states, { statusKey } from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { groupBoosts, groupContext } from '../utils/timeline-utils';\nimport useInterval from '../utils/useInterval';\nimport usePageVisibility from '../utils/usePageVisibility';\nimport useScroll from '../utils/useScroll';\n\nimport Icon from './icon';\nimport Link from './link';\nimport Loader from './loader';\nimport NavMenu from './nav-menu';\nimport Status from './status';\n\nfunction Timeline({\n  title,\n  titleComponent,\n  id,\n  instance,\n  emptyText,\n  errorText,\n  useItemID, // use statusID instead of status object, assuming it's already in states\n  boostsCarousel,\n  fetchItems = () => {},\n  checkForUpdates = () => {},\n  checkForUpdatesInterval = 60_000, // 1 minute\n  headerStart,\n  headerEnd,\n  timelineStart,\n  allowFilters,\n  refresh,\n}) {\n  const snapStates = useSnapshot(states);\n  const [items, setItems] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const [showNew, setShowNew] = useState(false);\n  const [visible, setVisible] = useState(true);\n  const scrollableRef = useRef();\n\n  console.debug('RENDER Timeline', id, refresh);\n\n  const loadItems = useDebouncedCallback(\n    (firstLoad) => {\n      setShowNew(false);\n      if (uiState === 'loading') return;\n      setUIState('loading');\n      (async () => {\n        try {\n          let { done, value } = await fetchItems(firstLoad);\n          if (Array.isArray(value)) {\n            if (boostsCarousel) {\n              value = groupBoosts(value);\n            }\n            value = groupContext(value);\n            console.log(value);\n            if (firstLoad) {\n              setItems(value);\n            } else {\n              setItems((items) => [...items, ...value]);\n            }\n            if (!value.length) done = true;\n            setShowMore(!done);\n          } else {\n            setShowMore(false);\n          }\n          setUIState('default');\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n        } finally {\n          loadItems.cancel();\n        }\n      })();\n    },\n    1500,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const itemsSelector = '.timeline-item, .timeline-item-alt';\n\n  const jRef = useHotkeys('j, shift+j', (_, handler) => {\n    // focus on next status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let nextItem = allItems[activeItemIndex + 1];\n      if (handler.shift) {\n        // get next status that's not .timeline-item-alt\n        nextItem = allItems.find(\n          (item, index) =>\n            index > activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (nextItem) {\n        nextItem.focus();\n        nextItem.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const kRef = useHotkeys('k, shift+k', (_, handler) => {\n    // focus on previous status after active item\n    const activeItem = document.activeElement.closest(itemsSelector);\n    const activeItemRect = activeItem?.getBoundingClientRect();\n    const allItems = Array.from(\n      scrollableRef.current.querySelectorAll(itemsSelector),\n    );\n    if (\n      activeItem &&\n      activeItemRect.top < scrollableRef.current.clientHeight &&\n      activeItemRect.bottom > 0\n    ) {\n      const activeItemIndex = allItems.indexOf(activeItem);\n      let prevItem = allItems[activeItemIndex - 1];\n      if (handler.shift) {\n        // get prev status that's not .timeline-item-alt\n        prevItem = allItems.findLast(\n          (item, index) =>\n            index < activeItemIndex &&\n            !item.classList.contains('timeline-item-alt'),\n        );\n      }\n      if (prevItem) {\n        prevItem.focus();\n        prevItem.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostItem = allItems.find((item) => {\n        const itemRect = item.getBoundingClientRect();\n        return itemRect.top >= 44 && itemRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostItem) {\n        topmostItem.focus();\n        topmostItem.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  const oRef = useHotkeys(['enter', 'o'], () => {\n    // open active status\n    const activeItem = document.activeElement.closest(itemsSelector);\n    if (activeItem) {\n      activeItem.click();\n    }\n  });\n\n  const {\n    scrollDirection,\n    nearReachStart,\n    nearReachEnd,\n    reachStart,\n    reachEnd,\n  } = useScroll({\n    scrollableRef,\n    distanceFromEnd: 2,\n    scrollThresholdStart: 44,\n  });\n\n  useEffect(() => {\n    scrollableRef.current?.scrollTo({ top: 0 });\n    loadItems(true);\n  }, []);\n  useEffect(() => {\n    loadItems(true);\n  }, [refresh]);\n\n  useEffect(() => {\n    if (reachStart) {\n      loadItems(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd || (reachEnd && showMore)) {\n      loadItems();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const isHovering = useRef(false);\n  const idle = useIdle(5000);\n  console.debug('🧘‍♀️ IDLE', idle);\n  const loadOrCheckUpdates = useCallback(\n    async ({ disableHoverCheck = false } = {}) => {\n      console.log('✨ Load or check updates', {\n        autoRefresh: snapStates.settings.autoRefresh,\n        scrollTop: scrollableRef.current.scrollTop,\n        disableHoverCheck,\n        idle,\n        inBackground: inBackground(),\n      });\n      if (\n        snapStates.settings.autoRefresh &&\n        scrollableRef.current.scrollTop === 0 &&\n        (disableHoverCheck || idle) &&\n        !inBackground()\n      ) {\n        console.log('✨ Load updates', snapStates.settings.autoRefresh);\n        loadItems(true);\n      } else {\n        console.log('✨ Check updates', snapStates.settings.autoRefresh);\n        const hasUpdate = await checkForUpdates();\n        if (hasUpdate) {\n          console.log('✨ Has new updates', id);\n          setShowNew(true);\n        }\n      }\n    },\n    [id, idle, loadItems, checkForUpdates, snapStates.settings.autoRefresh],\n  );\n\n  const lastHiddenTime = useRef();\n  usePageVisibility(\n    (visible) => {\n      if (visible) {\n        const timeDiff = Date.now() - lastHiddenTime.current;\n        if (!lastHiddenTime.current || timeDiff > 1000 * 60) {\n          loadOrCheckUpdates({\n            disableHoverCheck: true,\n          });\n        }\n      } else {\n        lastHiddenTime.current = Date.now();\n      }\n      setVisible(visible);\n    },\n    [checkForUpdates, loadOrCheckUpdates, snapStates.settings.autoRefresh],\n  );\n\n  // checkForUpdates interval\n  useInterval(\n    loadOrCheckUpdates,\n    visible && !showNew ? checkForUpdatesInterval : null,\n  );\n\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n\n  return (\n    <div\n      id={`${id}-page`}\n      class=\"deck-container\"\n      ref={(node) => {\n        scrollableRef.current = node;\n        jRef.current = node;\n        kRef.current = node;\n        oRef.current = node;\n      }}\n      tabIndex=\"-1\"\n      onPointerEnter={(e) => {\n        isHovering.current = true;\n      }}\n      onPointerLeave={() => {\n        isHovering.current = false;\n      }}\n    >\n      <div class=\"timeline-deck deck\">\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({\n                top: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n          onDblClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              loadItems(true);\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              {headerStart !== null && headerStart !== undefined ? (\n                headerStart\n              ) : (\n                <Link to=\"/\" class=\"button plain home-button\">\n                  <Icon icon=\"home\" size=\"l\" />\n                </Link>\n              )}\n            </div>\n            {title && (titleComponent ? titleComponent : <h1>{title}</h1>)}\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n              {!!headerEnd && headerEnd}\n            </div>\n          </div>\n          {items.length > 0 &&\n            uiState !== 'loading' &&\n            !hiddenUI &&\n            showNew && (\n              <button\n                class=\"updates-button shiny-pill\"\n                type=\"button\"\n                onClick={() => {\n                  loadItems(true);\n                  scrollableRef.current?.scrollTo({\n                    top: 0,\n                    behavior: 'smooth',\n                  });\n                }}\n              >\n                <Icon icon=\"arrow-up\" /> New posts\n              </button>\n            )}\n        </header>\n        {!!timelineStart && <div class=\"timeline-start\">{timelineStart}</div>}\n        {!!items.length ? (\n          <>\n            <ul class=\"timeline\">\n              {items.map((status) => {\n                const { id: statusID, reblog, items, type, _pinned } = status;\n                const actualStatusID = reblog?.id || statusID;\n                const url = instance\n                  ? `/${instance}/s/${actualStatusID}`\n                  : `/s/${actualStatusID}`;\n                let title = '';\n                if (type === 'boosts') {\n                  title = `${items.length} Boosts`;\n                } else if (type === 'pinned') {\n                  title = 'Pinned posts';\n                }\n                const isCarousel = type === 'boosts' || type === 'pinned';\n                if (items) {\n                  if (isCarousel) {\n                    // Here, we don't hide filtered posts, but we sort them last\n                    items.sort((a, b) => {\n                      if (a._filtered && !b._filtered) {\n                        return 1;\n                      }\n                      if (!a._filtered && b._filtered) {\n                        return -1;\n                      }\n                      return 0;\n                    });\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class=\"timeline-item-carousel\"\n                      >\n                        <StatusCarousel\n                          title={title}\n                          class={`${type}-carousel`}\n                        >\n                          {items.map((item) => {\n                            const { id: statusID, reblog } = item;\n                            const actualStatusID = reblog?.id || statusID;\n                            const url = instance\n                              ? `/${instance}/s/${actualStatusID}`\n                              : `/s/${actualStatusID}`;\n                            return (\n                              <li key={statusID}>\n                                <Link\n                                  class=\"status-carousel-link timeline-item-alt\"\n                                  to={url}\n                                >\n                                  {useItemID ? (\n                                    <Status\n                                      statusID={statusID}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                    />\n                                  ) : (\n                                    <Status\n                                      status={item}\n                                      instance={instance}\n                                      size=\"s\"\n                                      contentTextWeight\n                                    />\n                                  )}\n                                </Link>\n                              </li>\n                            );\n                          })}\n                        </StatusCarousel>\n                      </li>\n                    );\n                  }\n                  const manyItems = items.length > 3;\n                  return items.map((item, i) => {\n                    const { id: statusID, _differentAuthor } = item;\n                    const url = instance\n                      ? `/${instance}/s/${statusID}`\n                      : `/s/${statusID}`;\n                    const isMiddle = i > 0 && i < items.length - 1;\n                    const isSpoiler = item.sensitive && !!item.spoilerText;\n                    const showCompact =\n                      (isSpoiler && i > 0) ||\n                      (manyItems && isMiddle && type === 'thread');\n                    return (\n                      <li\n                        key={`timeline-${statusID}`}\n                        class={`timeline-item-container timeline-item-container-type-${type} timeline-item-container-${\n                          i === 0\n                            ? 'start'\n                            : i === items.length - 1\n                            ? 'end'\n                            : 'middle'\n                        } ${\n                          _differentAuthor ? 'timeline-item-diff-author' : ''\n                        }`}\n                      >\n                        <Link class=\"status-link timeline-item\" to={url}>\n                          {showCompact ? (\n                            <TimelineStatusCompact\n                              status={item}\n                              instance={instance}\n                            />\n                          ) : useItemID ? (\n                            <Status\n                              statusID={statusID}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          ) : (\n                            <Status\n                              status={item}\n                              instance={instance}\n                              allowFilters={allowFilters}\n                            />\n                          )}\n                        </Link>\n                      </li>\n                    );\n                  });\n                }\n                return (\n                  <li key={`timeline-${statusID + _pinned}`}>\n                    <Link class=\"status-link timeline-item\" to={url}>\n                      {useItemID ? (\n                        <Status\n                          statusID={statusID}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      ) : (\n                        <Status\n                          status={status}\n                          instance={instance}\n                          allowFilters={allowFilters}\n                        />\n                      )}\n                    </Link>\n                  </li>\n                );\n              })}\n              {showMore && uiState === 'loading' && (\n                <>\n                  <li\n                    style={{\n                      height: '20vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                  <li\n                    style={{\n                      height: '25vh',\n                    }}\n                  >\n                    <Status skeleton />\n                  </li>\n                </>\n              )}\n            </ul>\n            {uiState === 'default' &&\n              (showMore ? (\n                <InView\n                  onChange={(inView) => {\n                    if (inView) {\n                      loadItems();\n                    }\n                  }}\n                >\n                  <button\n                    type=\"button\"\n                    class=\"plain block\"\n                    onClick={() => loadItems()}\n                    style={{ marginBlockEnd: '6em' }}\n                  >\n                    Show more&hellip;\n                  </button>\n                </InView>\n              ) : (\n                <p class=\"ui-state insignificant\">The end.</p>\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <ul class=\"timeline\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <li key={i}>\n                <Status skeleton />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          uiState !== 'error' && <p class=\"ui-state\">{emptyText}</p>\n        )}\n        {uiState === 'error' && (\n          <p class=\"ui-state\">\n            {errorText}\n            <br />\n            <br />\n            <button\n              class=\"button plain\"\n              onClick={() => loadItems(!items.length)}\n            >\n              Try again\n            </button>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction StatusCarousel({ title, class: className, children }) {\n  const carouselRef = useRef();\n  const { reachStart, reachEnd, init } = useScroll({\n    scrollableRef: carouselRef,\n    direction: 'horizontal',\n  });\n  useEffect(() => {\n    init?.();\n  }, []);\n\n  return (\n    <div class={`status-carousel ${className}`}>\n      <header>\n        <h3>{title}</h3>\n        <span>\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachStart}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: -Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-left\" />\n          </button>{' '}\n          <button\n            type=\"button\"\n            class=\"small plain2\"\n            disabled={reachEnd}\n            onClick={() => {\n              carouselRef.current?.scrollBy({\n                left: Math.min(320, carouselRef.current?.offsetWidth),\n                behavior: 'smooth',\n              });\n            }}\n          >\n            <Icon icon=\"chevron-right\" />\n          </button>\n        </span>\n      </header>\n      <ul ref={carouselRef}>{children}</ul>\n    </div>\n  );\n}\n\nfunction TimelineStatusCompact({ status, instance }) {\n  const snapStates = useSnapshot(states);\n  const { id } = status;\n  const statusPeekText = statusPeek(status);\n  const sKey = statusKey(id, instance);\n  return (\n    <article class=\"status compact-thread\" tabindex=\"-1\">\n      {!!snapStates.statusThreadNumber[sKey] ? (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n          {snapStates.statusThreadNumber[sKey]\n            ? ` ${snapStates.statusThreadNumber[sKey]}/X`\n            : ''}\n        </div>\n      ) : (\n        <div class=\"status-thread-badge\">\n          <Icon icon=\"thread\" size=\"s\" />\n        </div>\n      )}\n      <div class=\"content-compact\" title={statusPeekText}>\n        {statusPeekText}\n        {status.sensitive && status.spoilerText && (\n          <>\n            {' '}\n            <span class=\"spoiler-badge\">\n              <Icon icon=\"eye-close\" size=\"s\" />\n            </span>\n          </>\n        )}\n      </div>\n    </article>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nexport default Timeline;\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountInfo from '../components/account-info';\nimport EmojiText from '../components/emoji-text';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction AccountStatuses() {\n  const snapStates = useSnapshot(states);\n  const { id, ...params } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const excludeReplies = !searchParams.get('replies');\n  const excludeBoosts = !!searchParams.get('boosts');\n  const tagged = searchParams.get('tagged');\n  const media = !!searchParams.get('media');\n  const { masto, instance, authenticated } = api({ instance: params.instance });\n  const accountStatusesIterator = useRef();\n  async function fetchAccountStatuses(firstLoad) {\n    const results = [];\n    if (firstLoad) {\n      const { value: pinnedStatuses } = await masto.v1.accounts\n        .listStatuses(id, {\n          pinned: true,\n        })\n        .next();\n      if (pinnedStatuses?.length && !tagged && !media) {\n        pinnedStatuses.forEach((status) => {\n          status._pinned = true;\n          saveStatus(status, instance);\n        });\n        if (pinnedStatuses.length >= 3) {\n          const pinnedStatusesIds = pinnedStatuses.map((status) => status.id);\n          results.push({\n            id: pinnedStatusesIds,\n            items: pinnedStatuses,\n            type: 'pinned',\n          });\n        } else {\n          results.push(...pinnedStatuses);\n        }\n      }\n    }\n    if (firstLoad || !accountStatusesIterator.current) {\n      accountStatusesIterator.current = masto.v1.accounts.listStatuses(id, {\n        limit: LIMIT,\n        exclude_replies: excludeReplies,\n        exclude_reblogs: excludeBoosts,\n        only_media: media,\n        tagged,\n      });\n    }\n    const { value, done } = await accountStatusesIterator.current.next();\n    if (value?.length) {\n      results.push(...value);\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      value: results,\n      done,\n    };\n  }\n\n  const [account, setAccount] = useState();\n  const [featuredTags, setFeaturedTags] = useState([]);\n  useTitle(\n    `${account?.displayName ? account.displayName + ' ' : ''}@${\n      account?.acct ? account.acct : 'Account posts'\n    }`,\n    '/:instance?/a/:id',\n  );\n  useEffect(() => {\n    (async () => {\n      try {\n        const acc = await masto.v1.accounts.fetch(id);\n        console.log(acc);\n        setAccount(acc);\n      } catch (e) {\n        console.error(e);\n      }\n      try {\n        const featuredTags = await masto.v1.accounts.listFeaturedTags(id);\n        console.log({ featuredTags });\n        setFeaturedTags(featuredTags);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const { displayName, acct, emojis } = account || {};\n\n  const filterBarRef = useRef();\n  const TimelineStart = useMemo(() => {\n    const cachedAccount = snapStates.accounts[`${id}@${instance}`];\n    const filtered = !excludeReplies || excludeBoosts || tagged || media;\n    return (\n      <>\n        <AccountInfo\n          instance={instance}\n          account={cachedAccount || id}\n          fetchAccount={() => masto.v1.accounts.fetch(id)}\n          authenticated={authenticated}\n          standalone\n        />\n        <div class=\"filter-bar\" ref={filterBarRef}>\n          {filtered ? (\n            <Link\n              to={`/${instance}/a/${id}`}\n              class=\"insignificant filter-clear\"\n              title=\"Clear filters\"\n            >\n              <Icon icon=\"x\" size=\"l\" />\n            </Link>\n          ) : (\n            <Icon icon=\"filter\" class=\"insignificant\" size=\"l\" />\n          )}\n          <Link\n            to={`/${instance}/a/${id}${excludeReplies ? '?replies=1' : ''}`}\n            onClick={() => {\n              if (excludeReplies) {\n                showToast('Showing post with replies');\n              }\n            }}\n            class={excludeReplies ? '' : 'is-active'}\n          >\n            + Replies\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${excludeBoosts ? '' : '?boosts=0'}`}\n            onClick={() => {\n              if (!excludeBoosts) {\n                showToast('Showing posts without boosts');\n              }\n            }}\n            class={!excludeBoosts ? '' : 'is-active'}\n          >\n            - Boosts\n          </Link>\n          <Link\n            to={`/${instance}/a/${id}${media ? '' : '?media=1'}`}\n            onClick={() => {\n              if (!media) {\n                showToast('Showing posts with media');\n              }\n            }}\n            class={media ? 'is-active' : ''}\n          >\n            Media\n          </Link>\n          {featuredTags.map((tag) => (\n            <Link\n              to={`/${instance}/a/${id}${\n                tagged === tag.name\n                  ? ''\n                  : `?tagged=${encodeURIComponent(tag.name)}`\n              }`}\n              onClick={() => {\n                if (tagged !== tag.name) {\n                  showToast(`Showing posts tagged with #${tag.name}`);\n                }\n              }}\n              class={tagged === tag.name ? 'is-active' : ''}\n            >\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {tag.name}\n              </span>\n              {\n                // The count differs based on instance 😅\n              }\n              {/* <span class=\"filter-count\">{tag.statusesCount}</span> */}\n            </Link>\n          ))}\n        </div>\n      </>\n    );\n  }, [\n    id,\n    instance,\n    authenticated,\n    excludeReplies,\n    excludeBoosts,\n    featuredTags,\n    tagged,\n    media,\n  ]);\n\n  useEffect(() => {\n    // Focus on .is-active\n    const active = filterBarRef.current?.querySelector('.is-active');\n    if (active) {\n      console.log('active', active, active.offsetLeft);\n      filterBarRef.current.scrollTo({\n        behavior: 'smooth',\n        left:\n          active.offsetLeft -\n          (filterBarRef.current.offsetWidth - active.offsetWidth) / 2,\n      });\n    }\n  }, [featuredTags, tagged, media, excludeReplies, excludeBoosts]);\n\n  const accountInstance = useMemo(() => {\n    if (!account?.url) return null;\n    const domain = new URL(account.url).hostname;\n    return domain;\n  }, [account]);\n  const sameInstance = instance === accountInstance;\n  const allowSwitch = !!account && !sameInstance;\n\n  return (\n    <Timeline\n      key={id}\n      title={`${account?.acct ? '@' + account.acct : 'Posts'}`}\n      titleComponent={\n        <h1\n          class=\"header-account\"\n          // onClick={() => {\n          //   states.showAccount = {\n          //     account,\n          //     instance,\n          //   };\n          // }}\n        >\n          <b>\n            <EmojiText text={displayName} emojis={emojis} />\n          </b>\n          <div>\n            <span>@{acct}</span>\n          </div>\n        </h1>\n      }\n      id=\"account-statuses\"\n      instance={instance}\n      emptyText=\"Nothing to see here yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchAccountStatuses}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      timelineStart={TimelineStart}\n      refresh={excludeReplies + excludeBoosts + tagged + media}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            disabled={!allowSwitch}\n            onClick={() => {\n              (async () => {\n                try {\n                  const { masto } = api({\n                    instance: accountInstance,\n                  });\n                  const acc = await masto.v1.accounts.lookup({\n                    acct: account.acct,\n                  });\n                  const { id } = acc;\n                  location.hash = `/${accountInstance}/a/${id}`;\n                } catch (e) {\n                  console.error(e);\n                  alert('Unable to fetch account info');\n                }\n              })();\n            }}\n          >\n            <Icon icon=\"transfer\" />{' '}\n            <small class=\"menu-double-lines\">\n              Switch to account's instance (<b>{accountInstance}</b>)\n            </small>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default AccountStatuses;\n","import './accounts.css';\n\nimport { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useReducer, useState } from 'preact/hooks';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport MenuConfirm from '../components/menu-confirm';\nimport NameText from '../components/name-text';\nimport { api } from '../utils/api';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nfunction Accounts({ onClose }) {\n  const { masto } = api();\n  // Accounts\n  const accounts = store.local.getJSON('accounts');\n  const currentAccount = store.session.get('currentAccount');\n  const moreThanOneAccount = accounts.length > 1;\n  const [currentDefault, setCurrentDefault] = useState(0);\n\n  const [_, reload] = useReducer((x) => x + 1, 0);\n\n  return (\n    <div id=\"accounts-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header class=\"header-grid\">\n        <h2>Accounts</h2>\n      </header>\n      <main>\n        <section>\n          <ul class=\"accounts-list\">\n            {accounts.map((account, i) => {\n              const isCurrent = account.info.id === currentAccount;\n              const isDefault = i === (currentDefault || 0);\n              return (\n                <li key={i + account.id}>\n                  <div>\n                    {moreThanOneAccount && (\n                      <span class={`current ${isCurrent ? 'is-current' : ''}`}>\n                        <Icon icon=\"check-circle\" alt=\"Current\" />\n                      </span>\n                    )}\n                    <Avatar\n                      url={account.info.avatarStatic}\n                      size=\"xxl\"\n                      onDblClick={async () => {\n                        if (isCurrent) {\n                          try {\n                            const info = await masto.v1.accounts.fetch(\n                              account.info.id,\n                            );\n                            console.log('fetched account info', info);\n                            account.info = info;\n                            store.local.setJSON('accounts', accounts);\n                            reload();\n                          } catch (e) {}\n                        }\n                      }}\n                    />\n                    <NameText\n                      account={\n                        moreThanOneAccount\n                          ? {\n                              ...account.info,\n                              acct: /@/.test(account.info.acct)\n                                ? account.info.acct\n                                : `${account.info.acct}@${account.instanceURL}`,\n                            }\n                          : account.info\n                      }\n                      showAcct\n                      onClick={() => {\n                        if (isCurrent) {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        } else {\n                          store.session.set('currentAccount', account.info.id);\n                          location.reload();\n                        }\n                      }}\n                    />\n                  </div>\n                  <div class=\"actions\">\n                    {isDefault && moreThanOneAccount && (\n                      <>\n                        <span class=\"tag\">Default</span>{' '}\n                      </>\n                    )}\n                    <Menu\n                      align=\"end\"\n                      menuButton={\n                        <button\n                          type=\"button\"\n                          title=\"More\"\n                          class=\"plain more-button\"\n                        >\n                          <Icon icon=\"more\" size=\"l\" alt=\"More\" />\n                        </button>\n                      }\n                    >\n                      <MenuItem\n                        onClick={() => {\n                          states.showAccount = `${account.info.username}@${account.instanceURL}`;\n                        }}\n                      >\n                        <Icon icon=\"user\" />\n                        <span>View profile…</span>\n                      </MenuItem>\n                      <MenuDivider />\n                      {moreThanOneAccount && (\n                        <MenuItem\n                          disabled={isDefault}\n                          onClick={() => {\n                            // Move account to the top of the list\n                            accounts.splice(i, 1);\n                            accounts.unshift(account);\n                            store.local.setJSON('accounts', accounts);\n                            setCurrentDefault(i);\n                          }}\n                        >\n                          <Icon icon=\"check-circle\" />\n                          <span>Set as default</span>\n                        </MenuItem>\n                      )}\n                      <MenuConfirm\n                        subMenu\n                        confirmLabel={\n                          <>\n                            <Icon icon=\"exit\" />\n                            <span>Log out @{account.info.acct}?</span>\n                          </>\n                        }\n                        disabled={!isCurrent}\n                        menuItemClassName=\"danger\"\n                        onClick={() => {\n                          // const yes = confirm('Log out?');\n                          // if (!yes) return;\n                          accounts.splice(i, 1);\n                          store.local.setJSON('accounts', accounts);\n                          // location.reload();\n                          location.href = '/';\n                        }}\n                      >\n                        <Icon icon=\"exit\" />\n                        <span>Log out…</span>\n                      </MenuConfirm>\n                    </Menu>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <p>\n            <Link to=\"/login\" class=\"button plain2\" onClick={onClose}>\n              <Icon icon=\"plus\" /> <span>Add an existing account</span>\n            </Link>\n          </p>\n          {moreThanOneAccount && (\n            <p>\n              <small>\n                Note: <i>Default</i> account will always be used for first load.\n                Switched accounts will persist during the session.\n              </small>\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Accounts;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Bookmarks() {\n  useTitle('Bookmarks', '/b');\n  const { masto, instance } = api();\n  const bookmarksIterator = useRef();\n  async function fetchBookmarks(firstLoad) {\n    if (firstLoad || !bookmarksIterator.current) {\n      bookmarksIterator.current = masto.v1.bookmarks.list({ limit: LIMIT });\n    }\n    return await bookmarksIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Bookmarks\"\n      id=\"bookmarks\"\n      emptyText=\"No bookmarks yet. Go bookmark something!\"\n      errorText=\"Unable to load bookmarks\"\n      instance={instance}\n      fetchItems={fetchBookmarks}\n    />\n  );\n}\n\nexport default Bookmarks;\n","import { useRef } from 'preact/hooks';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Favourites() {\n  useTitle('Favourites', '/f');\n  const { masto, instance } = api();\n  const favouritesIterator = useRef();\n  async function fetchFavourites(firstLoad) {\n    if (firstLoad || !favouritesIterator.current) {\n      favouritesIterator.current = masto.v1.favourites.list({ limit: LIMIT });\n    }\n    return await favouritesIterator.current.next();\n  }\n\n  return (\n    <Timeline\n      title=\"Favourites\"\n      id=\"favourites\"\n      emptyText=\"No favourites yet. Go favourite something!\"\n      errorText=\"Unable to load favourites\"\n      instance={instance}\n      fetchItems={fetchFavourites}\n    />\n  );\n}\n\nexport default Favourites;\n","import { useEffect, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 200;\n\nfunction FollowedHashtags() {\n  const { masto, instance } = api();\n  useTitle(`Followed Hashtags`, `/ft`);\n  const [uiState, setUIState] = useState('default');\n\n  const [followedHashtags, setFollowedHashtags] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const iterator = masto.v1.followedTags.list({\n          limit: LIMIT,\n        });\n        const tags = [];\n        do {\n          const { value, done } = await iterator.next();\n          if (done || value?.length === 0) break;\n          tags.push(...value);\n        } while (true);\n        tags.sort((a, b) => a.name.localeCompare(b.name));\n        console.log(tags);\n        setFollowedHashtags(tags);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, []);\n\n  return (\n    <div id=\"followed-hashtags-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Followed Hashtags</h1>\n            <div class=\"header-side\" />\n          </div>\n        </header>\n        <main>\n          {followedHashtags.length > 0 ? (\n            <ul class=\"link-list\">\n              {followedHashtags.map((tag) => (\n                <li>\n                  <Link\n                    to={\n                      instance ? `/${instance}/t/${tag.name}` : `/t/${tag.name}`\n                    }\n                  >\n                    <Icon icon=\"hashtag\" /> <span>{tag.name}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load followed hashtags.</p>\n          ) : (\n            <p class=\"ui-state\">No hashtags followed yet.</p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default FollowedHashtags;\n","import store from './store';\n\nexport function filteredItem(item, filterContext, currentAccountID) {\n  const { filtered } = item;\n  if (!filtered?.length) return true;\n  const isSelf = currentAccountID && item.account?.id === currentAccountID;\n  if (isSelf) return true;\n  const appliedFilters = filtered.filter((f) => {\n    const { filter } = f;\n    const hasContext = filter.context.includes(filterContext);\n    if (!hasContext) return false;\n    if (!filter.expiresAt) return hasContext;\n    return new Date(filter.expiresAt) > new Date();\n  });\n  if (!appliedFilters.length) return true;\n  const isHidden = appliedFilters.some((f) => f.filter.filterAction === 'hide');\n  console.log({ isHidden, filtered, appliedFilters, item });\n  if (isHidden) return false;\n  const isWarn = appliedFilters.some((f) => f.filter.filterAction === 'warn');\n  if (isWarn) {\n    const filterTitles = appliedFilters.map((f) => f.filter.title);\n    item._filtered = {\n      titles: filterTitles,\n      titlesStr: filterTitles.join(' • '),\n    };\n  }\n  return isWarn;\n}\nexport function filteredItems(items, filterContext) {\n  if (!items?.length) return [];\n  if (!filterContext) return items;\n  const currentAccountID = store.session.get('currentAccount');\n  return items.filter((item) =>\n    filteredItem(item, filterContext, currentAccountID),\n  );\n}\n","import { useEffect, useRef } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { getStatus, saveStatus } from '../utils/states';\nimport { dedupeBoosts } from '../utils/timeline-utils';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Following({ title, path, id, ...props }) {\n  useTitle(title || 'Following', path || '/following');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const homeIterator = useRef();\n  const latestItem = useRef();\n\n  console.debug('RENDER Following', title, id);\n\n  async function fetchHome(firstLoad) {\n    if (firstLoad || !homeIterator.current) {\n      homeIterator.current = masto.v1.timelines.listHome({ limit: LIMIT });\n    }\n    const results = await homeIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n      value = dedupeBoosts(value, instance);\n\n      // ENFORCE sort by datetime (Latest first)\n      value.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        return bDate - aDate;\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listHome({\n          limit: 5,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      console.log('checkForUpdates', latestItem.current, value);\n      if (value?.length) {\n        latestItem.current = value[0].id;\n        value = dedupeBoosts(value, instance);\n        value = filteredItems(value, 'home');\n        if (value.some((item) => !item.reblog)) {\n          return true;\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const ws = useRef();\n  const streamUser = async () => {\n    console.log('🎏 Start streaming user', ws.current);\n    if (\n      ws.current &&\n      (ws.current.readyState === WebSocket.CONNECTING ||\n        ws.current.readyState === WebSocket.OPEN)\n    ) {\n      console.log('🎏 Streaming user already open');\n      return;\n    }\n    const stream = await masto.v1.stream.streamUser();\n    ws.current = stream.ws;\n    ws.current.__id = Math.random();\n    console.log('🎏 Streaming user', ws.current);\n\n    stream.on('status.update', (status) => {\n      console.log(`🔄 Status ${status.id} updated`);\n      saveStatus(status, instance);\n    });\n\n    stream.on('delete', (statusID) => {\n      console.log(`❌ Status ${statusID} deleted`);\n      // delete states.statuses[statusID];\n      const s = getStatus(statusID, instance);\n      if (s) s._deleted = true;\n    });\n\n    stream.ws.onclose = () => {\n      console.log('🎏 Streaming user closed');\n    };\n\n    return stream;\n  };\n  useEffect(() => {\n    let stream;\n    (async () => {\n      stream = await streamUser();\n    })();\n    return () => {\n      if (stream) {\n        stream.ws.close();\n        ws.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <Timeline\n      title={title || 'Following'}\n      id={id || 'following'}\n      emptyText=\"Nothing to see here.\"\n      errorText=\"Unable to load posts.\"\n      instance={instance}\n      fetchItems={fetchHome}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      {...props}\n      allowFilters\n    />\n  );\n}\n\nexport default Following;\n","import {\n  FocusableItem,\n  Menu,\n  MenuDivider,\n  MenuGroup,\n  MenuItem,\n} from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport showToast from '../utils/show-toast';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\n// Limit is 4 per \"mode\"\n// https://github.com/mastodon/mastodon/issues/15194\n// Hard-coded https://github.com/mastodon/mastodon/blob/19614ba2477f3d12468f5ec251ce1cc5f8c6210c/app/models/tag_feed.rb#L4\nconst TAGS_LIMIT_PER_MODE = 4;\nconst TOTAL_TAGS_LIMIT = TAGS_LIMIT_PER_MODE + 1;\n\nfunction Hashtags({ columnMode, ...props }) {\n  // const navigate = useNavigate();\n  let { hashtag, ...params } = columnMode ? {} : useParams();\n  if (props.hashtag) hashtag = props.hashtag;\n  let hashtags = hashtag.trim().split(/[\\s+]+/);\n  hashtags.sort();\n  hashtag = hashtags[0];\n\n  const { masto, instance, authenticated } = api({\n    instance: props?.instance || params.instance,\n  });\n  const { authenticated: currentAuthenticated } = api();\n  const hashtagTitle = hashtags.map((t) => `#${t}`).join(' ');\n  const title = instance ? `${hashtagTitle} on ${instance}` : hashtagTitle;\n  useTitle(title, `/:instance?/t/:hashtag`);\n  const latestItem = useRef();\n\n  // const hashtagsIterator = useRef();\n  const maxID = useRef(undefined);\n  async function fetchHashtags(firstLoad) {\n    // if (firstLoad || !hashtagsIterator.current) {\n    //   hashtagsIterator.current = masto.v1.timelines.listHashtag(hashtag, {\n    //     limit: LIMIT,\n    //     any: hashtags.slice(1),\n    //   });\n    // }\n    // const results = await hashtagsIterator.current.next();\n\n    // NOTE: Temporary fix for listHashtag not persisting `any` in subsequent calls.\n    const results = await masto.v1.timelines\n      .listHashtag(hashtag, {\n        limit: LIMIT,\n        any: hashtags.slice(1),\n        maxId: firstLoad ? undefined : maxID.current,\n      })\n      .next();\n    const { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n\n      maxID.current = value[value.length - 1].id;\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listHashtag(hashtag, {\n          limit: 1,\n          any: hashtags.slice(1),\n          since_id: latestItem.current,\n        })\n        .next();\n      const { value } = results;\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [followUIState, setFollowUIState] = useState('default');\n  const [info, setInfo] = useState();\n  // Get hashtag info\n  useEffect(() => {\n    (async () => {\n      try {\n        const info = await masto.v1.tags.fetch(hashtag);\n        console.log(info);\n        setInfo(info);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [hashtag]);\n\n  const reachLimit = hashtags.length >= TOTAL_TAGS_LIMIT;\n\n  return (\n    <Timeline\n      key={instance + hashtagTitle}\n      title={title}\n      titleComponent={\n        !!instance && (\n          <h1 class=\"header-account\">\n            <b>{hashtagTitle}</b>\n            <div>{instance}</div>\n          </h1>\n        )\n      }\n      id=\"hashtag\"\n      instance={instance}\n      emptyText=\"No one has posted anything with this tag yet.\"\n      errorText=\"Unable to load posts with this tag\"\n      fetchItems={fetchHashtags}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerEnd={\n        <Menu2\n          portal\n          setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          {!!info && hashtags.length === 1 && (\n            <>\n              <MenuConfirm\n                subMenu\n                confirm={info.following}\n                confirmLabel={`Unfollow #${hashtag}?`}\n                disabled={followUIState === 'loading' || !authenticated}\n                onClick={() => {\n                  setFollowUIState('loading');\n                  if (info.following) {\n                    // const yes = confirm(`Unfollow #${hashtag}?`);\n                    // if (!yes) {\n                    //   setFollowUIState('default');\n                    //   return;\n                    // }\n                    masto.v1.tags\n                      .unfollow(hashtag)\n                      .then(() => {\n                        setInfo({ ...info, following: false });\n                        showToast(`Unfollowed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  } else {\n                    masto.v1.tags\n                      .follow(hashtag)\n                      .then(() => {\n                        setInfo({ ...info, following: true });\n                        showToast(`Followed #${hashtag}`);\n                      })\n                      .catch((e) => {\n                        alert(e);\n                        console.error(e);\n                      })\n                      .finally(() => {\n                        setFollowUIState('default');\n                      });\n                  }\n                }}\n              >\n                {info.following ? (\n                  <>\n                    <Icon icon=\"check-circle\" /> <span>Following…</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon icon=\"plus\" /> <span>Follow</span>\n                  </>\n                )}\n              </MenuConfirm>\n              <MenuDivider />\n            </>\n          )}\n          <FocusableItem className=\"menu-field\" disabled={reachLimit}>\n            {({ ref }) => (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  const newHashtag = e.target[0].value?.trim?.();\n                  // Use includes but need to be case insensitive\n                  if (\n                    newHashtag &&\n                    !hashtags.some(\n                      (t) => t.toLowerCase() === newHashtag.toLowerCase(),\n                    )\n                  ) {\n                    hashtags.push(newHashtag);\n                    hashtags.sort();\n                    // navigate(\n                    //   instance\n                    //     ? `/${instance}/t/${hashtags.join('+')}`\n                    //     : `/t/${hashtags.join('+')}`,\n                    // );\n                    location.hash = instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`;\n                  }\n                }}\n              >\n                <Icon icon=\"hashtag\" />\n                <input\n                  ref={ref}\n                  type=\"text\"\n                  placeholder={\n                    reachLimit ? `Max ${TOTAL_TAGS_LIMIT} tags` : 'Add hashtag'\n                  }\n                  required\n                  autocorrect=\"off\"\n                  autocapitalize=\"off\"\n                  spellcheck={false}\n                  // no spaces, no hashtags\n                  pattern=\"[^#][^\\s#]+[^#]\"\n                  disabled={reachLimit}\n                />\n              </form>\n            )}\n          </FocusableItem>\n          <MenuGroup takeOverflow>\n            {hashtags.map((t, i) => (\n              <MenuItem\n                key={t}\n                disabled={hashtags.length === 1}\n                onClick={(e) => {\n                  hashtags.splice(i, 1);\n                  hashtags.sort();\n                  navigate(\n                    instance\n                      ? `/${instance}/t/${hashtags.join('+')}`\n                      : `/t/${hashtags.join('+')}`,\n                  );\n                }}\n              >\n                <Icon icon=\"x\" alt=\"Remove hashtag\" class=\"danger-icon\" />\n                <span>\n                  <span class=\"more-insignificant\">#</span>\n                  {t}\n                </span>\n              </MenuItem>\n            ))}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuItem\n            disabled={!currentAuthenticated}\n            onClick={() => {\n              const shortcut = {\n                type: 'hashtag',\n                hashtag: hashtags.join(' '),\n                instance,\n              };\n              // Check if already exists\n              const exists = states.shortcuts.some(\n                (s) =>\n                  s.type === shortcut.type &&\n                  s.hashtag\n                    .split(/[\\s+]+/)\n                    .sort()\n                    .join(' ') ===\n                    shortcut.hashtag\n                      .split(/[\\s+]+/)\n                      .sort()\n                      .join(' ') &&\n                  (s.instance ? s.instance === shortcut.instance : true),\n              );\n              if (exists) {\n                alert('This shortcut already exists');\n              } else {\n                states.shortcuts.push(shortcut);\n                showToast(`Hashtag shortcut added`);\n              }\n            }}\n          >\n            <Icon icon=\"shortcut\" /> <span>Add to Shorcuts</span>\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                navigate(`/${newInstance}/t/${hashtags.join('+')}`);\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Hashtags;\n","import './lists.css';\n\nimport { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Menu2 from '../components/menu2';\nimport MenuConfirm from '../components/menu-confirm';\nimport Modal from '../components/modal';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states, { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction List(props) {\n  const snapStates = useSnapshot(states);\n  const { masto, instance } = api();\n  const id = props?.id || useParams()?.id;\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n  // const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n\n  const listIterator = useRef();\n  async function fetchList(firstLoad) {\n    if (firstLoad || !listIterator.current) {\n      listIterator.current = masto.v1.timelines.listList(id, {\n        limit: LIMIT,\n      });\n    }\n    const results = await listIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'home');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines.listList(id, {\n        limit: 1,\n        since_id: latestItem.current,\n      });\n      let { value } = results;\n      value = filteredItems(value, 'home');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const [list, setList] = useState({ title: 'List' });\n  // const [title, setTitle] = useState(`List`);\n  useTitle(list.title, `/l/:id`);\n  useEffect(() => {\n    (async () => {\n      try {\n        const list = await masto.v1.lists.fetch(id);\n        setList(list);\n        // setTitle(list.title);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [id]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n  const [showManageMembersModal, setShowManageMembersModal] = useState(false);\n\n  return (\n    <>\n      <Timeline\n        key={id}\n        title={list.title}\n        id=\"list\"\n        emptyText=\"Nothing yet.\"\n        errorText=\"Unable to load posts.\"\n        instance={instance}\n        fetchItems={fetchList}\n        checkForUpdates={checkForUpdates}\n        useItemID\n        boostsCarousel={snapStates.settings.boostsCarousel}\n        allowFilters\n        // refresh={reloadCount}\n        headerStart={\n          <Link to=\"/l\" class=\"button plain\">\n            <Icon icon=\"list\" size=\"l\" />\n          </Link>\n        }\n        headerEnd={\n          <Menu2\n            portal\n            setDownOverflow\n            overflow=\"auto\"\n            viewScroll=\"close\"\n            position=\"anchor\"\n            menuButton={\n              <button type=\"button\" class=\"plain\">\n                <Icon icon=\"more\" size=\"l\" />\n              </button>\n            }\n          >\n            <MenuItem\n              onClick={() =>\n                setShowListAddEditModal({\n                  list,\n                })\n              }\n            >\n              <Icon icon=\"pencil\" size=\"l\" />\n              <span>Edit</span>\n            </MenuItem>\n            <MenuItem onClick={() => setShowManageMembersModal(true)}>\n              <Icon icon=\"group\" size=\"l\" />\n              <span>Manage members</span>\n            </MenuItem>\n          </Menu2>\n        }\n      />\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success' && result.list) {\n                setList(result.list);\n                // reload();\n              } else if (result.state === 'deleted') {\n                // navigate('/l');\n                location.hash = '/l';\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n      {showManageMembersModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowManageMembersModal(false);\n            }\n          }}\n        >\n          <ListManageMembers\n            listID={id}\n            onClose={() => setShowManageMembersModal(false)}\n          />\n        </Modal>\n      )}\n    </>\n  );\n}\n\nconst MEMBERS_LIMIT = 40;\nfunction ListManageMembers({ listID, onClose }) {\n  // Show list of members with [Remove] button\n  // API only returns 40 members at a time, so this need to be paginated with infinite scroll\n  // Show [Add] button after removing a member\n  const { masto, instance } = api();\n  const [members, setMembers] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n\n  const membersIterator = useRef();\n\n  async function fetchMembers(firstLoad) {\n    setShowMore(false);\n    setUIState('loading');\n    (async () => {\n      try {\n        if (firstLoad || !membersIterator.current) {\n          membersIterator.current = masto.v1.lists.listAccounts(listID, {\n            limit: MEMBERS_LIMIT,\n          });\n        }\n        const results = await membersIterator.current.next();\n        let { done, value } = results;\n        if (value?.length) {\n          if (firstLoad) {\n            setMembers(value);\n          } else {\n            setMembers(members.concat(value));\n          }\n          setShowMore(!done);\n        } else {\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    fetchMembers(true);\n  }, []);\n\n  return (\n    <div class=\"sheet\" id=\"list-manage-members-container\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Manage members</h2>\n      </header>\n      <main>\n        <ul>\n          {members.map((member) => (\n            <li key={member.id}>\n              <AccountBlock account={member} instance={instance} />\n              <RemoveAddButton account={member} listID={listID} />\n            </li>\n          ))}\n          {showMore && uiState === 'default' && (\n            <InView as=\"li\" onChange={(inView) => inView && fetchMembers()}>\n              <button type=\"button\" class=\"light block\" onClick={fetchMembers}>\n                Show more&hellip;\n              </button>\n            </InView>\n          )}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nfunction RemoveAddButton({ account, listID }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [removed, setRemoved] = useState(false);\n\n  return (\n    <MenuConfirm\n      confirm={!removed}\n      confirmLabel={<span>Remove @{account.username} from list?</span>}\n      align=\"end\"\n      menuItemClassName=\"danger\"\n      onClick={() => {\n        if (removed) {\n          setUIState('loading');\n          (async () => {\n            try {\n              await masto.v1.lists.addAccount(listID, {\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(false);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        } else {\n          // const yes = confirm(`Remove ${account.username} from this list?`);\n          // if (!yes) return;\n          setUIState('loading');\n\n          (async () => {\n            try {\n              await masto.v1.lists.removeAccount(listID, {\n                accountIds: [account.id],\n              });\n              setUIState('default');\n              setRemoved(true);\n            } catch (e) {\n              setUIState('error');\n            }\n          })();\n        }\n      }}\n    >\n      <button\n        type=\"button\"\n        class={`light ${removed ? '' : 'danger'}`}\n        disabled={uiState === 'loading'}\n      >\n        {removed ? 'Add' : 'Remove…'}\n      </button>\n    </MenuConfirm>\n  );\n}\n\nexport default List;\n","import { useMemo, useRef, useState } from 'preact/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\nconst emptySearchParams = new URLSearchParams();\n\nfunction Mentions({ columnMode, ...props }) {\n  useTitle('Mentions', '/mentions');\n  const { masto, instance } = api();\n  const [searchParams] = columnMode ? [emptySearchParams] : useSearchParams();\n  const [stateType, setStateType] = useState(null);\n  const type = props?.type || searchParams.get('type') || stateType;\n\n  const mentionsIterator = useRef();\n  const latestItem = useRef();\n\n  async function fetchMentions(firstLoad) {\n    if (firstLoad || !mentionsIterator.current) {\n      mentionsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        types: ['mention'],\n      });\n    }\n    const results = await mentionsIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n        console.log('First load', latestItem.current);\n      }\n\n      value.forEach(({ status: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value: value?.map((item) => item.status),\n    };\n  }\n\n  const conversationsIterator = useRef();\n  const latestConversationItem = useRef();\n  async function fetchConversations(firstLoad) {\n    if (firstLoad || !conversationsIterator.current) {\n      conversationsIterator.current = masto.v1.conversations.list({\n        limit: LIMIT,\n      });\n    }\n    const results = await conversationsIterator.current.next();\n    let { value } = results;\n    value = value?.filter((item) => item.lastStatus);\n    if (value?.length) {\n      if (firstLoad) {\n        latestConversationItem.current = value[0].lastStatus.id;\n        console.log('First load', latestConversationItem.current);\n      }\n\n      value.forEach(({ lastStatus: item }) => {\n        saveStatus(item, instance);\n      });\n    }\n    console.log('results', results);\n    return {\n      ...results,\n      value: value?.map((item) => item.lastStatus),\n    };\n  }\n\n  function fetchItems(...args) {\n    if (type === 'private') {\n      return fetchConversations(...args);\n    }\n    return fetchMentions(...args);\n  }\n\n  async function checkForUpdates() {\n    if (type === 'private') {\n      try {\n        const results = await masto.v1.conversations\n          .list({\n            limit: 1,\n            since_id: latestConversationItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log(\n          'checkForUpdates PRIVATE',\n          latestConversationItem.current,\n          value,\n        );\n        if (value?.length) {\n          latestConversationItem.current = value[0].lastStatus.id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    } else {\n      try {\n        const results = await masto.v1.notifications\n          .list({\n            limit: 1,\n            types: ['mention'],\n            since_id: latestItem.current,\n          })\n          .next();\n        let { value } = results;\n        console.log('checkForUpdates ALL', latestItem.current, value);\n        if (value?.length) {\n          latestItem.current = value[0].id;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    return (\n      <div class=\"filter-bar centered\">\n        <Link\n          to=\"/mentions\"\n          class={!type ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType(null);\n            }\n          }}\n        >\n          All\n        </Link>\n        <Link\n          to=\"/mentions?type=private\"\n          class={type === 'private' ? 'is-active' : ''}\n          onClick={(e) => {\n            if (columnMode) {\n              e.preventDefault();\n              setStateType('private');\n            }\n          }}\n        >\n          Private\n        </Link>\n      </div>\n    );\n  }, [type]);\n\n  return (\n    <Timeline\n      title=\"Mentions\"\n      id=\"mentions\"\n      emptyText=\"No one mentioned you :(\"\n      errorText=\"Unable to load mentions.\"\n      instance={instance}\n      fetchItems={fetchItems}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      timelineStart={TimelineStart}\n      refresh={type}\n    />\n  );\n}\n\nexport default Mentions;\n","import { useState } from 'preact/hooks';\n\nimport { api } from '../utils/api';\n\nimport Icon from './icon';\nimport Loader from './loader';\n\nfunction FollowRequestButtons({ accountID, onChange }) {\n  const { masto } = api();\n  const [uiState, setUIState] = useState('default');\n  const [requestState, setRequestState] = useState(null); // accept, reject\n  const [relationship, setRelationship] = useState(null);\n\n  const hasRelationship = relationship !== null;\n\n  return (\n    <p class=\"follow-request-buttons\">\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading'}\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('accept');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests.authorize(accountID);\n              if (!rel?.followedBy) {\n                throw new Error('Follow request not accepted');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n            }\n            setUIState('default');\n          })();\n        }}\n      >\n        Accept\n      </button>{' '}\n      <button\n        type=\"button\"\n        disabled={uiState === 'loading'}\n        class=\"light danger\"\n        onClick={() => {\n          setUIState('loading');\n          setRequestState('reject');\n          (async () => {\n            try {\n              const rel = await masto.v1.followRequests.reject(accountID);\n              if (rel?.followedBy) {\n                throw new Error('Follow request not rejected');\n              }\n              setRelationship(rel);\n              onChange();\n            } catch (e) {\n              console.error(e);\n              setUIState('default');\n            }\n          })();\n        }}\n      >\n        Reject\n      </button>\n      <span class=\"follow-request-states\">\n        {hasRelationship && requestState ? (\n          requestState === 'accept' ? (\n            <Icon icon=\"check-circle\" alt=\"Accepted\" class=\"follow-accepted\" />\n          ) : (\n            <Icon icon=\"x-circle\" alt=\"Rejected\" class=\"follow-rejected\" />\n          )\n        ) : (\n          <Loader hidden={uiState !== 'loading'} />\n        )}\n      </span>\n    </p>\n  );\n}\n\nexport default FollowRequestButtons;\n","import states from '../utils/states';\nimport store from '../utils/store';\n\nimport Avatar from './avatar';\nimport FollowRequestButtons from './follow-request-buttons';\nimport Icon from './icon';\nimport Link from './link';\nimport NameText from './name-text';\nimport RelativeTime from './relative-time';\nimport Status from './status';\n\nconst NOTIFICATION_ICONS = {\n  mention: 'comment',\n  status: 'notification',\n  reblog: 'rocket',\n  follow: 'follow',\n  follow_request: 'follow-add',\n  favourite: 'heart',\n  poll: 'poll',\n  update: 'pencil',\n};\n\n/*\nNotification types\n==================\nmention = Someone mentioned you in their status\nstatus = Someone you enabled notifications for has posted a status\nreblog = Someone boosted one of your statuses\nfollow = Someone followed you\nfollow_request = Someone requested to follow you\nfavourite = Someone favourited one of your statuses\npoll = A poll you have voted in or created has ended\nupdate = A status you interacted with has been edited\nadmin.sign_up = Someone signed up (optionally sent to admins)\nadmin.report = A new report has been filed\n*/\n\nconst contentText = {\n  mention: 'mentioned you in their post.',\n  status: 'published a post.',\n  reblog: 'boosted your post.',\n  'reblog+account': (count) => `boosted ${count} of your posts.`,\n  reblog_reply: 'boosted your reply.',\n  follow: 'followed you.',\n  follow_request: 'requested to follow you.',\n  favourite: 'favourited your post.',\n  'favourite+account': (count) => `favourited ${count} of your posts.`,\n  favourite_reply: 'favourited your reply.',\n  poll: 'A poll you have voted in or created has ended.',\n  'poll-self': 'A poll you have created has ended.',\n  'poll-voted': 'A poll you have voted in has ended.',\n  update: 'A post you interacted with has been edited.',\n  'favourite+reblog': 'boosted & favourited your post.',\n  'favourite+reblog+account': (count) =>\n    `boosted & favourited ${count} of your posts.`,\n  'favourite+reblog_reply': 'boosted & favourited your reply.',\n};\n\nfunction Notification({ notification, instance, reload }) {\n  const { id, status, account, _accounts, _statuses } = notification;\n  let { type } = notification;\n\n  // status = Attached when type of the notification is favourite, reblog, status, mention, poll, or update\n  const actualStatusID = status?.reblog?.id || status?.id;\n\n  const currentAccount = store.session.get('currentAccount');\n  const isSelf = currentAccount === account?.id;\n  const isVoted = status?.poll?.voted;\n  const isReplyToOthers =\n    !!status?.inReplyToAccountId &&\n    status?.inReplyToAccountId !== currentAccount &&\n    status?.account?.id === currentAccount;\n\n  let favsCount = 0;\n  let reblogsCount = 0;\n  if (type === 'favourite+reblog') {\n    for (const account of _accounts) {\n      if (account._types?.includes('favourite')) {\n        favsCount++;\n      }\n      if (account._types?.includes('reblog')) {\n        reblogsCount++;\n      }\n    }\n    if (!reblogsCount && favsCount) type = 'favourite';\n    if (!favsCount && reblogsCount) type = 'reblog';\n  }\n\n  let text;\n  if (type === 'poll') {\n    text = contentText[isSelf ? 'poll-self' : isVoted ? 'poll-voted' : 'poll'];\n  } else if (\n    type === 'reblog' ||\n    type === 'favourite' ||\n    type === 'favourite+reblog'\n  ) {\n    if (_statuses?.length > 1) {\n      text = contentText[`${type}+account`];\n    } else if (isReplyToOthers) {\n      text = contentText[`${type}_reply`];\n    } else {\n      text = contentText[type];\n    }\n  } else {\n    text = contentText[type];\n  }\n  if (typeof text === 'function') {\n    text = text(_statuses?.length || _accounts?.length);\n  }\n\n  if (type === 'mention' && !status) {\n    // Could be deleted\n    return null;\n  }\n\n  return (\n    <div class={`notification notification-${type}`} tabIndex=\"0\">\n      <div\n        class={`notification-type notification-${type}`}\n        title={new Date(notification.createdAt).toLocaleString()}\n      >\n        {type === 'favourite+reblog' ? (\n          <>\n            <Icon icon=\"rocket\" size=\"xl\" alt={type} class=\"reblog-icon\" />\n            <Icon icon=\"heart\" size=\"xl\" alt={type} class=\"favourite-icon\" />\n          </>\n        ) : (\n          <Icon\n            icon={NOTIFICATION_ICONS[type] || 'notification'}\n            size=\"xl\"\n            alt={type}\n          />\n        )}\n      </div>\n      <div class=\"notification-content\">\n        {type !== 'mention' && (\n          <>\n            <p>\n              {!/poll|update/i.test(type) && (\n                <>\n                  {_accounts?.length > 1 ? (\n                    <>\n                      <b>{_accounts.length} people</b>{' '}\n                    </>\n                  ) : (\n                    <>\n                      <NameText account={account} showAvatar />{' '}\n                    </>\n                  )}\n                </>\n              )}\n              {text}\n              {type === 'mention' && (\n                <span class=\"insignificant\">\n                  {' '}\n                  •{' '}\n                  <RelativeTime\n                    datetime={notification.createdAt}\n                    format=\"micro\"\n                  />\n                </span>\n              )}\n            </p>\n            {type === 'follow_request' && (\n              <FollowRequestButtons\n                accountID={account.id}\n                onChange={() => {\n                  // reload();\n                }}\n              />\n            )}\n          </>\n        )}\n        {_accounts?.length > 1 && (\n          <p class=\"avatars-stack\">\n            {_accounts.map((account, i) => (\n              <>\n                <a\n                  href={account.url}\n                  rel=\"noopener noreferrer\"\n                  class=\"account-avatar-stack\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    states.showAccount = account;\n                  }}\n                >\n                  <Avatar\n                    url={account.avatarStatic}\n                    size={\n                      _accounts.length <= 10\n                        ? 'xxl'\n                        : _accounts.length < 100\n                        ? 'xl'\n                        : _accounts.length < 1000\n                        ? 'l'\n                        : _accounts.length < 2000\n                        ? 'm'\n                        : 's' // My god, this person is popular!\n                    }\n                    key={account.id}\n                    alt={`${account.displayName} @${account.acct}`}\n                    squircle={account?.bot}\n                  />\n                  {type === 'favourite+reblog' && (\n                    <div class=\"account-sub-icons\">\n                      {account._types.map((type) => (\n                        <Icon\n                          icon={NOTIFICATION_ICONS[type]}\n                          size=\"s\"\n                          class={`${type}-icon`}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </a>{' '}\n              </>\n            ))}\n          </p>\n        )}\n        {_statuses?.length > 1 && (\n          <ul class=\"notification-group-statuses\">\n            {_statuses.map((status) => (\n              <li key={status.id}>\n                <Link\n                  class={`status-link status-type-${type}`}\n                  to={\n                    instance ? `/${instance}/s/${status.id}` : `/s/${status.id}`\n                  }\n                >\n                  <Status status={status} size=\"s\" />\n                </Link>\n              </li>\n            ))}\n          </ul>\n        )}\n        {status && (!_statuses?.length || _statuses?.length <= 1) && (\n          <Link\n            class={`status-link status-type-${type}`}\n            to={\n              instance\n                ? `/${instance}/s/${actualStatusID}`\n                : `/s/${actualStatusID}`\n            }\n          >\n            <Status statusID={actualStatusID} size=\"s\" />\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Notification;\n","function groupNotifications(notifications) {\n  // Create new flat list of notifications\n  // Combine sibling notifications based on type and status id\n  // Concat all notification.account into an array of _accounts\n  const notificationsMap = {};\n  const cleanNotifications = [];\n  for (let i = 0, j = 0; i < notifications.length; i++) {\n    const notification = notifications[i];\n    const { status, account, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    let virtualType = type;\n    if (type === 'favourite' || type === 'reblog') {\n      virtualType = 'favourite+reblog';\n    }\n    const key = `${status?.id}-${virtualType}-${date}`;\n    const mappedNotification = notificationsMap[key];\n    if (virtualType === 'follow_request') {\n      cleanNotifications[j++] = notification;\n    } else if (mappedNotification?.account) {\n      const mappedAccount = mappedNotification._accounts.find(\n        (a) => a.id === account.id,\n      );\n      if (mappedAccount) {\n        mappedAccount._types.push(type);\n        mappedAccount._types.sort().reverse();\n      } else {\n        account._types = [type];\n        mappedNotification._accounts.push(account);\n      }\n    } else {\n      account._types = [type];\n      let n = (notificationsMap[key] = {\n        ...notification,\n        type: virtualType,\n        _accounts: [account],\n      });\n      cleanNotifications[j++] = n;\n    }\n  }\n\n  // 2nd pass to group \"favourite+reblog\"-type notifications by account if _accounts.length <= 1\n  // This means one acount has favourited and reblogged the multiple statuses\n  // The grouped notification\n  // - type: \"favourite+reblog+account\"\n  // - _statuses: [status, status, ...]\n  const notificationsMap2 = {};\n  const cleanNotifications2 = [];\n  for (let i = 0, j = 0; i < cleanNotifications.length; i++) {\n    const notification = cleanNotifications[i];\n    const { account, _accounts, type, createdAt } = notification;\n    const date = new Date(createdAt).toLocaleDateString();\n    if (type === 'favourite+reblog' && account && _accounts.length === 1) {\n      const key = `${account?.id}-${type}-${date}`;\n      const mappedNotification = notificationsMap2[key];\n      if (mappedNotification) {\n        mappedNotification._statuses.push(notification.status);\n      } else {\n        let n = (notificationsMap2[key] = {\n          ...notification,\n          type,\n          _statuses: [notification.status],\n        });\n        cleanNotifications2[j++] = n;\n      }\n    } else {\n      cleanNotifications2[j++] = notification;\n    }\n  }\n\n  console.log({ notifications, cleanNotifications, cleanNotifications2 });\n\n  // return cleanNotifications;\n  return cleanNotifications2;\n}\n\nexport default groupNotifications;\n","import './notifications.css';\n\nimport { useIdle } from '@uidotdev/usehooks';\nimport { memo } from 'preact/compat';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport AccountBlock from '../components/account-block';\nimport FollowRequestButtons from '../components/follow-request-buttons';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport enhanceContent from '../utils/enhance-content';\nimport groupNotifications from '../utils/group-notifications';\nimport handleContentLinks from '../utils/handle-content-links';\nimport niceDateTime from '../utils/nice-date-time';\nimport shortenNumber from '../utils/shorten-number';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentInstance } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 30; // 30 is the maximum limit :(\n\nfunction Notifications() {\n  useTitle('Notifications', '/notifications');\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n  const [showMore, setShowMore] = useState(false);\n  const scrollableRef = useRef();\n  const { nearReachEnd, scrollDirection, reachStart, nearReachStart } =\n    useScroll({\n      scrollableRef,\n    });\n  const hiddenUI = scrollDirection === 'end' && !nearReachStart;\n  const [followRequests, setFollowRequests] = useState([]);\n  const [announcements, setAnnouncements] = useState([]);\n\n  console.debug('RENDER Notifications');\n\n  const notificationsIterator = useRef();\n  async function fetchNotifications(firstLoad) {\n    if (firstLoad || !notificationsIterator.current) {\n      // Reset iterator\n      notificationsIterator.current = masto.v1.notifications.list({\n        limit: LIMIT,\n        excludeTypes: ['follow_request'],\n      });\n    }\n    const allNotifications = await notificationsIterator.current.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      if (firstLoad) {\n        states.notificationsLast = notifications[0];\n        states.notifications = groupedNotifications;\n      } else {\n        states.notifications.push(...groupedNotifications);\n      }\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  function fetchFollowRequests() {\n    // Note: no pagination here yet because this better be on a separate page. Should be rare use-case???\n    return masto.v1.followRequests.list({\n      limit: 80,\n    });\n  }\n\n  const loadFollowRequests = () => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const requests = await fetchFollowRequests();\n        setFollowRequests(requests);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  function fetchAnnouncements() {\n    return masto.v1.announcements.list();\n  }\n\n  const loadNotifications = (firstLoad) => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const fetchNotificationsPromise = fetchNotifications(firstLoad);\n        const fetchFollowRequestsPromise = fetchFollowRequests();\n        const fetchAnnouncementsPromise = fetchAnnouncements();\n\n        if (firstLoad) {\n          const announcements = await fetchAnnouncementsPromise;\n          announcements.sort((a, b) => {\n            // Sort by updatedAt first, then createdAt\n            const aDate = new Date(a.updatedAt || a.createdAt);\n            const bDate = new Date(b.updatedAt || b.createdAt);\n            return bDate - aDate;\n          });\n          setAnnouncements(announcements);\n          const requests = await fetchFollowRequestsPromise;\n          setFollowRequests(requests);\n        }\n\n        const { done } = await fetchNotificationsPromise;\n        setShowMore(!done);\n\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  };\n\n  useEffect(() => {\n    loadNotifications(true);\n  }, []);\n  useEffect(() => {\n    if (reachStart) {\n      loadNotifications(true);\n    }\n  }, [reachStart]);\n\n  useEffect(() => {\n    if (nearReachEnd && showMore) {\n      loadNotifications();\n    }\n  }, [nearReachEnd, showMore]);\n\n  const isHovering = useRef(false);\n  const idle = useIdle(5000);\n  console.debug('🧘‍♀️ IDLE', idle);\n  const loadUpdates = useCallback(() => {\n    console.log('✨ Load updates', {\n      autoRefresh: snapStates.settings.autoRefresh,\n      scrollTop: scrollableRef.current?.scrollTop === 0,\n      isHovering: isHovering.current,\n      inBackground: inBackground(),\n      notificationsShowNew: snapStates.notificationsShowNew,\n      uiState,\n    });\n    if (\n      snapStates.settings.autoRefresh &&\n      scrollableRef.current?.scrollTop === 0 &&\n      (!isHovering.current || idle) &&\n      !inBackground() &&\n      snapStates.notificationsShowNew &&\n      uiState !== 'loading'\n    ) {\n      loadNotifications(true);\n    }\n  }, [\n    idle,\n    snapStates.notificationsShowNew,\n    snapStates.settings.autoRefresh,\n    uiState,\n  ]);\n  useEffect(loadUpdates, [snapStates.notificationsShowNew]);\n\n  const todayDate = new Date();\n  const yesterdayDate = new Date(todayDate - 24 * 60 * 60 * 1000);\n  let currentDay = new Date();\n  const showTodayEmpty = !snapStates.notifications.some(\n    (notification) =>\n      new Date(notification.createdAt).toDateString() ===\n      todayDate.toDateString(),\n  );\n\n  const announcementsListRef = useRef();\n\n  return (\n    <div\n      id=\"notifications-page\"\n      class=\"deck-container\"\n      ref={scrollableRef}\n      tabIndex=\"-1\"\n      onPointerEnter={() => {\n        console.log('👆 Pointer enter');\n        isHovering.current = true;\n      }}\n      onPointerLeave={() => {\n        console.log('👇 Pointer leave');\n        isHovering.current = false;\n      }}\n    >\n      <div\n        class={`timeline-deck deck ${\n          snapStates.settings.onlyMentions ? 'only-mentions' : ''\n        }`}\n      >\n        <header\n          hidden={hiddenUI}\n          onClick={(e) => {\n            if (!e.target.closest('a, button')) {\n              scrollableRef.current?.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n          }}\n          class={uiState === 'loading' ? 'loading' : ''}\n        >\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" alt=\"Home\" />\n              </Link>\n            </div>\n            <h1>Notifications</h1>\n            <div class=\"header-side\">\n              {/* <Loader hidden={uiState !== 'loading'} /> */}\n            </div>\n          </div>\n          {snapStates.notificationsShowNew && uiState !== 'loading' && (\n            <button\n              class=\"updates-button shiny-pill\"\n              type=\"button\"\n              onClick={() => {\n                loadNotifications(true);\n                scrollableRef.current?.scrollTo({\n                  top: 0,\n                  behavior: 'smooth',\n                });\n              }}\n            >\n              <Icon icon=\"arrow-up\" /> New notifications\n            </button>\n          )}\n        </header>\n        {announcements.length > 0 && (\n          <div class=\"shazam-container\">\n            <div class=\"shazam-container-inner\">\n              <details class=\"announcements\">\n                <summary>\n                  <span>\n                    <Icon icon=\"announce\" class=\"announcement-icon\" size=\"l\" />{' '}\n                    <b>Announcement{announcements.length > 1 ? 's' : ''}</b>{' '}\n                    <small class=\"insignificant\">{instance}</small>\n                  </span>\n                  {announcements.length > 1 && (\n                    <span class=\"announcements-nav-buttons\">\n                      {announcements.map((announcement, index) => (\n                        <button\n                          type=\"button\"\n                          class=\"plain2 small\"\n                          onClick={() => {\n                            announcementsListRef.current?.children[\n                              index\n                            ].scrollIntoView({\n                              behavior: 'smooth',\n                              block: 'nearest',\n                            });\n                          }}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </span>\n                  )}\n                </summary>\n                <ul\n                  class={`announcements-list-${\n                    announcements.length > 1 ? 'multiple' : 'single'\n                  }`}\n                  ref={announcementsListRef}\n                >\n                  {announcements.map((announcement) => (\n                    <li>\n                      <AnnouncementBlock announcement={announcement} />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            </div>\n          </div>\n        )}\n        {followRequests.length > 0 && (\n          <div class=\"follow-requests\">\n            <h2 class=\"timeline-header\">Follow requests</h2>\n            {followRequests.length > 5 ? (\n              <details>\n                <summary>{followRequests.length} follow requests</summary>\n                <ul>\n                  {followRequests.map((account) => (\n                    <li key={account.id}>\n                      <AccountBlock account={account} />\n                      <FollowRequestButtons\n                        accountID={account.id}\n                        onChange={() => {\n                          // loadFollowRequests();\n                          // loadNotifications(true);\n                        }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </details>\n            ) : (\n              <ul>\n                {followRequests.map((account) => (\n                  <li key={account.id}>\n                    <AccountBlock account={account} />\n                    <FollowRequestButtons\n                      accountID={account.id}\n                      onChange={() => {\n                        // loadFollowRequests();\n                        // loadNotifications(true);\n                      }}\n                    />\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n        <div id=\"mentions-option\">\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={snapStates.settings.onlyMentions}\n              onChange={(e) => {\n                states.settings.onlyMentions = e.target.checked;\n              }}\n            />{' '}\n            Only mentions\n          </label>\n        </div>\n        <h2 class=\"timeline-header\">Today</h2>\n        {showTodayEmpty && !!snapStates.notifications.length && (\n          <p class=\"ui-state insignificant\">\n            {uiState === 'default' ? \"You're all caught up.\" : <>&hellip;</>}\n          </p>\n        )}\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications.map((notification) => {\n              if (\n                snapStates.settings.onlyMentions &&\n                notification.type !== 'mention'\n              ) {\n                return null;\n              }\n              const notificationDay = new Date(notification.createdAt);\n              const differentDay =\n                notificationDay.toDateString() !== currentDay.toDateString();\n              if (differentDay) {\n                currentDay = notificationDay;\n              }\n              // if notificationDay is yesterday, show \"Yesterday\"\n              // if notificationDay is before yesterday, show date\n              const heading =\n                notificationDay.toDateString() === yesterdayDate.toDateString()\n                  ? 'Yesterday'\n                  : niceDateTime(currentDay, {\n                      hideTime: true,\n                    });\n              return (\n                <>\n                  {differentDay && <h2 class=\"timeline-header\">{heading}</h2>}\n                  <Notification\n                    instance={instance}\n                    notification={notification}\n                    key={notification.id}\n                    reload={() => {\n                      loadNotifications(true);\n                      loadFollowRequests();\n                    }}\n                  />\n                </>\n              );\n            })}\n          </>\n        ) : (\n          <>\n            {uiState === 'loading' && (\n              <>\n                <ul class=\"timeline flat\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <li class=\"notification skeleton\">\n                      <div class=\"notification-type\">\n                        <Icon icon=\"notification\" size=\"xl\" />\n                      </div>\n                      <div class=\"notification-content\">\n                        <p>███████████ ████</p>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {uiState === 'error' && (\n              <p class=\"ui-state\">\n                Unable to load notifications\n                <br />\n                <br />\n                <button type=\"button\" onClick={() => loadNotifications(true)}>\n                  Try again\n                </button>\n              </p>\n            )}\n          </>\n        )}\n        {showMore && (\n          <button\n            type=\"button\"\n            class=\"plain block\"\n            disabled={uiState === 'loading'}\n            onClick={() => loadNotifications()}\n            style={{ marginBlockEnd: '6em' }}\n          >\n            {uiState === 'loading' ? <Loader abrupt /> : <>Show more&hellip;</>}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction inBackground() {\n  return !!document.querySelector('.deck-backdrop, #modal-container > *');\n}\n\nfunction AnnouncementBlock({ announcement }) {\n  const { instance } = api();\n  const { contact } = getCurrentInstance();\n  const contactAccount = contact?.account;\n  const {\n    id,\n    content,\n    startsAt,\n    endsAt,\n    published,\n    allDay,\n    publishedAt,\n    updatedAt,\n    read,\n    mentions,\n    statuses,\n    tags,\n    emojis,\n    reactions,\n  } = announcement;\n\n  const publishedAtDate = new Date(publishedAt);\n  const publishedDateText = niceDateTime(publishedAtDate);\n  const updatedAtDate = new Date(updatedAt);\n  const updatedAtText = niceDateTime(updatedAtDate);\n\n  return (\n    <div class=\"announcement-block\">\n      <AccountBlock account={contactAccount} />\n      <div\n        class=\"announcement-content\"\n        onClick={handleContentLinks({ mentions, instance })}\n        dangerouslySetInnerHTML={{\n          __html: enhanceContent(content, {\n            emojis,\n          }),\n        }}\n      />\n      <p class=\"insignificant\">\n        <time datetime={publishedAtDate.toISOString()}>\n          {niceDateTime(publishedAtDate)}\n        </time>\n        {updatedAt && updatedAtText !== publishedDateText && (\n          <>\n            {' '}\n            &bull;{' '}\n            <span class=\"ib\">\n              Updated{' '}\n              <time datetime={updatedAtDate.toISOString()}>\n                {niceDateTime(updatedAtDate)}\n              </time>\n            </span>\n          </>\n        )}\n      </p>\n      <div class=\"announcement-reactions\" hidden>\n        {reactions.map((reaction) => {\n          const { name, count, me, staticUrl, url } = reaction;\n          return (\n            <button type=\"button\" class={`plain4 small ${me ? 'reacted' : ''}`}>\n              {url || staticUrl ? (\n                <img src={url || staticUrl} alt={name} width=\"16\" height=\"16\" />\n              ) : (\n                <span>{name}</span>\n              )}{' '}\n              <span class=\"count\">{shortenNumber(count)}</span>\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Notifications);\n","import { Menu, MenuDivider, MenuItem } from '@szhsin/react-menu';\nimport { useRef } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Public({ local, columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const isLocal = !!local;\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `${isLocal ? 'Local' : 'Federated'} timeline (${instance})`;\n  useTitle(title, isLocal ? `/:instance?/p/l` : `/:instance?/p`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const publicIterator = useRef();\n  async function fetchPublic(firstLoad) {\n    if (firstLoad || !publicIterator.current) {\n      publicIterator.current = masto.v1.timelines.listPublic({\n        limit: LIMIT,\n        local: isLocal,\n      });\n    }\n    const results = await publicIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public');\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.timelines\n        .listPublic({\n          limit: 1,\n          local: isLocal,\n          since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length) {\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return (\n    <Timeline\n      key={instance + isLocal}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>{isLocal ? 'Local timeline' : 'Federated timeline'}</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"public\"\n      instance={instance}\n      emptyText=\"No one has posted anything yet.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchPublic}\n      checkForUpdates={checkForUpdates}\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem href={isLocal ? `/#/${instance}/p` : `/#/${instance}/p/l`}>\n            {isLocal ? (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Federated</span>\n              </>\n            ) : (\n              <>\n                <Icon icon=\"transfer\" /> <span>Switch to Local</span>\n              </>\n            )}\n          </MenuItem>\n          <MenuDivider />\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(isLocal ? `/${newInstance}/p/l` : `/${newInstance}/p`);\n                location.hash = isLocal\n                  ? `/${newInstance}/p/l`\n                  : `/${newInstance}/p`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Public;\n","import { Menu, MenuItem } from '@szhsin/react-menu';\nimport { useMemo, useRef, useState } from 'preact/hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSnapshot } from 'valtio';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Menu2 from '../components/menu2';\nimport Timeline from '../components/timeline';\nimport { api } from '../utils/api';\nimport { filteredItems } from '../utils/filters';\nimport states from '../utils/states';\nimport { saveStatus } from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nconst LIMIT = 20;\n\nfunction Trending({ columnMode, ...props }) {\n  const snapStates = useSnapshot(states);\n  const params = columnMode ? {} : useParams();\n  const { masto, instance } = api({\n    instance: props?.instance || params.instance,\n  });\n  const title = `Trending (${instance})`;\n  useTitle(title, `/:instance?/trending`);\n  // const navigate = useNavigate();\n  const latestItem = useRef();\n\n  const [hashtags, setHashtags] = useState([]);\n  const trendIterator = useRef();\n  async function fetchTrend(firstLoad) {\n    if (firstLoad || !trendIterator.current) {\n      trendIterator.current = masto.v1.trends.listStatuses({\n        limit: LIMIT,\n      });\n\n      // Get hashtags\n      try {\n        const iterator = masto.v1.trends.listTags();\n        const { value: tags } = await iterator.next();\n        console.log(tags);\n        setHashtags(tags);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    const results = await trendIterator.current.next();\n    let { value } = results;\n    if (value?.length) {\n      if (firstLoad) {\n        latestItem.current = value[0].id;\n      }\n\n      value = filteredItems(value, 'public'); // Might not work here\n      value.forEach((item) => {\n        saveStatus(item, instance);\n      });\n    }\n    return {\n      ...results,\n      value,\n    };\n  }\n\n  async function checkForUpdates() {\n    try {\n      const results = await masto.v1.trends\n        .listStatuses({\n          limit: 1,\n          // NOT SUPPORTED\n          // since_id: latestItem.current,\n        })\n        .next();\n      let { value } = results;\n      value = filteredItems(value, 'public');\n      if (value?.length && value[0].id !== latestItem.current) {\n        latestItem.current = value[0].id;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const TimelineStart = useMemo(() => {\n    if (!hashtags.length) return null;\n    return (\n      <div class=\"filter-bar\">\n        <Icon icon=\"chart\" class=\"insignificant\" size=\"l\" />\n        {hashtags.map((tag, i) => {\n          const { name, history } = tag;\n          const total = history.reduce((acc, cur) => acc + +cur.uses, 0);\n          return (\n            <Link to={`/${instance}/t/${name}`}>\n              <span>\n                <span class=\"more-insignificant\">#</span>\n                {name}\n              </span>\n              <span class=\"filter-count\">{total.toLocaleString()}</span>\n            </Link>\n          );\n        })}\n      </div>\n    );\n  }, [hashtags]);\n\n  return (\n    <Timeline\n      key={instance}\n      title={title}\n      titleComponent={\n        <h1 class=\"header-account\">\n          <b>Trending</b>\n          <div>{instance}</div>\n        </h1>\n      }\n      id=\"trending\"\n      instance={instance}\n      emptyText=\"No trending posts.\"\n      errorText=\"Unable to load posts\"\n      fetchItems={fetchTrend}\n      checkForUpdates={checkForUpdates}\n      checkForUpdatesInterval={5 * 60 * 1000} // 5 minutes\n      useItemID\n      headerStart={<></>}\n      boostsCarousel={snapStates.settings.boostsCarousel}\n      allowFilters\n      timelineStart={TimelineStart}\n      headerEnd={\n        <Menu2\n          portal\n          // setDownOverflow\n          overflow=\"auto\"\n          viewScroll=\"close\"\n          position=\"anchor\"\n          menuButton={\n            <button type=\"button\" class=\"plain\">\n              <Icon icon=\"more\" size=\"l\" />\n            </button>\n          }\n        >\n          <MenuItem\n            onClick={() => {\n              let newInstance = prompt(\n                'Enter a new instance e.g. \"mastodon.social\"',\n              );\n              if (!/\\./.test(newInstance)) {\n                if (newInstance) alert('Invalid instance');\n                return;\n              }\n              if (newInstance) {\n                newInstance = newInstance.toLowerCase().trim();\n                // navigate(`/${newInstance}/trending`);\n                location.hash = `/${newInstance}/trending`;\n              }\n            }}\n          >\n            <Icon icon=\"bus\" /> <span>Go to another instance…</span>\n          </MenuItem>\n        </Menu2>\n      }\n    />\n  );\n}\n\nexport default Trending;\n","import { useHotkeys } from 'react-hotkeys-hook';\nimport { useSnapshot } from 'valtio';\n\nimport Bookmarks from '../pages/bookmarks';\nimport Favourites from '../pages/favourites';\nimport Following from '../pages/following';\nimport Hashtag from '../pages/hashtag';\nimport List from '../pages/list';\nimport Mentions from '../pages/mentions';\nimport Notifications from '../pages/notifications';\nimport Public from '../pages/public';\nimport Trending from '../pages/trending';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Columns() {\n  useTitle('Home', '/');\n  const snapStates = useSnapshot(states);\n  const { shortcuts } = snapStates;\n\n  console.debug('RENDER Columns', shortcuts);\n\n  const components = shortcuts.map((shortcut) => {\n    if (!shortcut) return null;\n    const { type, ...params } = shortcut;\n    const Component = {\n      following: Following,\n      notifications: Notifications,\n      list: List,\n      public: Public,\n      bookmarks: Bookmarks,\n      favourites: Favourites,\n      hashtag: Hashtag,\n      mentions: Mentions,\n      trending: Trending,\n    }[type];\n    if (!Component) return null;\n    return (\n      <Component key={type + JSON.stringify(params)} {...params} columnMode />\n    );\n  });\n\n  useHotkeys(['1', '2', '3', '4', '5', '6', '7', '8', '9'], (e, handler) => {\n    try {\n      const index = parseInt(handler.keys[0], 10) - 1;\n      document.querySelectorAll('#columns > *')[index].focus();\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  return <div id=\"columns\">{components}</div>;\n}\n\nexport default Columns;\n","import './notifications-menu.css';\n\nimport { ControlledMenu } from '@szhsin/react-menu';\nimport { memo } from 'preact/compat';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport Columns from '../components/columns';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport Notification from '../components/notification';\nimport { api } from '../utils/api';\nimport db from '../utils/db';\nimport groupNotifications from '../utils/group-notifications';\nimport openCompose from '../utils/open-compose';\nimport states, { saveStatus } from '../utils/states';\nimport { getCurrentAccountNS } from '../utils/store-utils';\n\nimport Following from './following';\n\nfunction Home() {\n  const snapStates = useSnapshot(states);\n  useEffect(() => {\n    (async () => {\n      const keys = await db.drafts.keys();\n      if (keys.length) {\n        const ns = getCurrentAccountNS();\n        const ownKeys = keys.filter((key) => key.startsWith(ns));\n        if (ownKeys.length) {\n          states.showDrafts = true;\n        }\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {(snapStates.settings.shortcutsColumnsMode ||\n        snapStates.settings.shortcutsViewMode === 'multi-column') &&\n      !!snapStates.shortcuts?.length ? (\n        <Columns />\n      ) : (\n        <Following\n          title=\"Home\"\n          path=\"/\"\n          id=\"home\"\n          headerStart={false}\n          headerEnd={<NotificationsLink />}\n        />\n      )}\n      {/* <button\n        // hidden={scrollDirection === 'end' && !nearReachStart}\n        type=\"button\"\n        id=\"compose-button\"\n        onClick={(e) => {\n          if (e.shiftKey) {\n            const newWin = openCompose();\n            if (!newWin) {\n              alert('Looks like your browser is blocking popups.');\n              states.showCompose = true;\n            }\n          } else {\n            states.showCompose = true;\n          }\n        }}\n      >\n        <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n      </button> */}\n    </>\n  );\n}\n\nfunction NotificationsLink() {\n  const snapStates = useSnapshot(states);\n  const notificationLinkRef = useRef();\n  const [menuState, setMenuState] = useState(undefined);\n  return (\n    <>\n      <Link\n        ref={notificationLinkRef}\n        to=\"/notifications\"\n        class={`button plain notifications-button ${\n          snapStates.notificationsShowNew ? 'has-badge' : ''\n        } ${menuState}`}\n        onClick={(e) => {\n          e.stopPropagation();\n          if (window.matchMedia('(min-width: calc(40em))').matches) {\n            e.preventDefault();\n            setMenuState((state) => (!state ? 'open' : undefined));\n          }\n        }}\n      >\n        <Icon icon=\"notification\" size=\"l\" alt=\"Notifications\" />\n      </Link>\n      <NotificationsMenu\n        state={menuState}\n        anchorRef={notificationLinkRef}\n        onClose={() => setMenuState(undefined)}\n      />\n    </>\n  );\n}\n\nconst NOTIFICATIONS_LIMIT = 30;\nconst NOTIFICATIONS_DISPLAY_LIMIT = 5;\nfunction NotificationsMenu({ anchorRef, state, onClose }) {\n  const { masto, instance } = api();\n  const snapStates = useSnapshot(states);\n  const [uiState, setUIState] = useState('default');\n\n  const notificationsIterator = masto.v1.notifications.list({\n    limit: NOTIFICATIONS_LIMIT,\n  });\n\n  async function fetchNotifications() {\n    const allNotifications = await notificationsIterator.next();\n    const notifications = allNotifications.value;\n\n    if (notifications?.length) {\n      notifications.forEach((notification) => {\n        saveStatus(notification.status, instance, {\n          skipThreading: true,\n        });\n      });\n\n      const groupedNotifications = groupNotifications(notifications);\n\n      states.notificationsLast = notifications[0];\n      states.notifications = groupedNotifications;\n    }\n\n    states.notificationsShowNew = false;\n    states.notificationsLastFetchTime = Date.now();\n    return allNotifications;\n  }\n\n  const [hasFollowRequests, setHasFollowRequests] = useState(false);\n  function fetchFollowRequests() {\n    return masto.v1.followRequests.list({\n      limit: 1,\n    });\n  }\n\n  function loadNotifications() {\n    setUIState('loading');\n    (async () => {\n      try {\n        await fetchNotifications();\n        const followRequests = await fetchFollowRequests();\n        setHasFollowRequests(!!followRequests?.length);\n        setUIState('default');\n      } catch (e) {\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    if (state === 'open') loadNotifications();\n  }, [state]);\n\n  return (\n    <ControlledMenu\n      menuClassName=\"notifications-menu\"\n      state={state}\n      anchorRef={anchorRef}\n      onClose={onClose}\n      portal={{\n        target: document.body,\n      }}\n      overflow=\"auto\"\n      viewScroll=\"close\"\n      position=\"anchor\"\n      align=\"center\"\n      boundingBoxPadding=\"8 8 8 8\"\n    >\n      <header>\n        <h2>Notifications</h2>\n      </header>\n      <main>\n        {snapStates.notifications.length ? (\n          <>\n            {snapStates.notifications\n              .slice(0, NOTIFICATIONS_DISPLAY_LIMIT)\n              .filter((notification) =>\n                snapStates.settings.onlyMentions\n                  ? notification.type === 'mention'\n                  : true,\n              )\n              .map((notification) => (\n                <Notification\n                  key={notification.id}\n                  instance={instance}\n                  notification={notification}\n                />\n              ))}\n          </>\n        ) : uiState === 'loading' ? (\n          <div class=\"ui-state\">\n            <Loader abrupt />\n          </div>\n        ) : (\n          uiState === 'error' && (\n            <div class=\"ui-state\">\n              <p>Unable to fetch notifications.</p>\n              <p>\n                <button type=\"button\" onClick={loadNotifications}>\n                  Try again\n                </button>\n              </p>\n            </div>\n          )\n        )}\n      </main>\n      <footer>\n        <Link to=\"/mentions\" class=\"button plain\">\n          <Icon icon=\"at\" /> <span>Mentions</span>\n        </Link>\n        <Link to=\"/notifications\" class=\"button plain2\">\n          {hasFollowRequests ? (\n            <>\n              <span class=\"tag collapsed\">New</span>{' '}\n              <span>Follow Requests</span>\n            </>\n          ) : (\n            <b>See all</b>\n          )}{' '}\n          <Icon icon=\"arrow-right\" />\n        </Link>\n      </footer>\n    </ControlledMenu>\n  );\n}\n\nexport default memo(Home);\n","export const statusRegex = /\\/@([^@\\/]+)@?([^\\/]+)?\\/([^\\/]+)\\/?$/i;\nexport const statusNoteRegex = /\\/notes\\/([^\\/]+)\\/?$/i;\nfunction getInstanceStatusURL(url) {\n  // Regex /:username/:id, where username = @username or @username@domain, id = anything\n  const { hostname, pathname } = new URL(url);\n  const [, username, domain, id] = pathname.match(statusRegex) || [];\n\n  if (id) {\n    return `/${hostname}/s/${id}`;\n  }\n\n  const [, noteId] = pathname.match(statusNoteRegex) || [];\n\n  if (noteId) {\n    return `/${hostname}/s/${noteId}`;\n  }\n}\n\nexport default getInstanceStatusURL;\n","import { useLayoutEffect } from 'preact/hooks';\nimport { useLocation } from 'react-router-dom';\n\nimport Link from '../components/link';\nimport getInstanceStatusURL from '../utils/get-instance-status-url';\n\nexport default function HttpRoute() {\n  const location = useLocation();\n  const url = location.pathname.replace(/^\\//, '');\n  const statusURL = getInstanceStatusURL(url);\n\n  useLayoutEffect(() => {\n    if (statusURL) {\n      setTimeout(() => {\n        window.location.hash = statusURL + '?view=full';\n      }, 300);\n    }\n  }, [statusURL]);\n\n  return (\n    <div class=\"ui-state\" tabIndex=\"-1\">\n      {statusURL ? (\n        <>\n          <h2>Redirecting…</h2>\n          <p>\n            <a href={`#${statusURL}?view=full`}>{statusURL}</a>\n          </p>\n        </>\n      ) : (\n        <>\n          <h2>Unable to process URL</h2>\n          <p>\n            <a href={url} target=\"_blank\">\n              {url}\n            </a>\n          </p>\n        </>\n      )}\n      <hr />\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </div>\n  );\n}\n","import './lists.css';\n\nimport { useEffect, useReducer, useRef, useState } from 'preact/hooks';\n\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport ListAddEdit from '../components/list-add-edit';\nimport Loader from '../components/loader';\nimport Modal from '../components/modal';\nimport NavMenu from '../components/nav-menu';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nfunction Lists() {\n  const { masto } = api();\n  useTitle(`Lists`, `/l`);\n  const [uiState, setUIState] = useState('default');\n\n  const [reloadCount, reload] = useReducer((c) => c + 1, 0);\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    setUIState('loading');\n    (async () => {\n      try {\n        const lists = await masto.v1.lists.list();\n        console.log(lists);\n        setLists(lists);\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  }, [reloadCount]);\n\n  const [showListAddEditModal, setShowListAddEditModal] = useState(false);\n\n  return (\n    <div id=\"lists-page\" class=\"deck-container\" tabIndex=\"-1\">\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n              <Link to=\"/\" class=\"button plain\">\n                <Icon icon=\"home\" size=\"l\" />\n              </Link>\n            </div>\n            <h1>Lists</h1>\n            <div class=\"header-side\">\n              <button\n                type=\"button\"\n                class=\"plain\"\n                onClick={() => setShowListAddEditModal(true)}\n              >\n                <Icon icon=\"plus\" size=\"l\" alt=\"New list\" />\n              </button>\n            </div>\n          </div>\n        </header>\n        <main>\n          {lists.length > 0 ? (\n            <ul class=\"link-list\">\n              {lists.map((list) => (\n                <li>\n                  <Link to={`/l/${list.id}`}>\n                    <span>\n                      <Icon icon=\"list\" /> <span>{list.title}</span>\n                    </span>\n                    {/* <button\n                      type=\"button\"\n                      class=\"plain\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        setShowListAddEditModal({\n                          list,\n                        });\n                      }}\n                    >\n                      <Icon icon=\"pencil\" />\n                    </button> */}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader />\n            </p>\n          ) : uiState === 'error' ? (\n            <p class=\"ui-state\">Unable to load lists.</p>\n          ) : (\n            <p class=\"ui-state\">No lists yet.</p>\n          )}\n        </main>\n      </div>\n      {showListAddEditModal && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setShowListAddEditModal(false);\n            }\n          }}\n        >\n          <ListAddEdit\n            list={showListAddEditModal?.list}\n            onClose={(result) => {\n              if (result.state === 'success') {\n                reload();\n              }\n              setShowListAddEditModal(false);\n            }}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Lists;\n","export default \"__VITE_ASSET__cc8865ad__\"","const { VITE_CLIENT_NAME: CLIENT_NAME, VITE_WEBSITE: WEBSITE } = import.meta\n  .env;\n\nexport async function registerApplication({ instanceURL }) {\n  const registrationParams = new URLSearchParams({\n    client_name: CLIENT_NAME,\n    redirect_uris: location.origin + location.pathname,\n    scopes: 'read write follow',\n    website: WEBSITE,\n  });\n  const registrationResponse = await fetch(\n    `https://${instanceURL}/api/v1/apps`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: registrationParams.toString(),\n    },\n  );\n  const registrationJSON = await registrationResponse.json();\n  console.log({ registrationJSON });\n  return registrationJSON;\n}\n\nexport async function getAuthorizationURL({ instanceURL, client_id }) {\n  const authorizationParams = new URLSearchParams({\n    client_id,\n    scope: 'read write follow',\n    redirect_uri: location.origin + location.pathname,\n    // redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',\n    response_type: 'code',\n  });\n  const authorizationURL = `https://${instanceURL}/oauth/authorize?${authorizationParams.toString()}`;\n  return authorizationURL;\n}\n\nexport async function getAccessToken({\n  instanceURL,\n  client_id,\n  client_secret,\n  code,\n}) {\n  const params = new URLSearchParams({\n    client_id,\n    client_secret,\n    redirect_uri: location.origin + location.pathname,\n    grant_type: 'authorization_code',\n    code,\n    scope: 'read write follow',\n  });\n  const tokenResponse = await fetch(`https://${instanceURL}/oauth/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n  const tokenJSON = await tokenResponse.json();\n  console.log({ tokenJSON });\n  return tokenJSON;\n}\n","import './login.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\n\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport instancesListURL from '../data/instances.json?url';\nimport { getAuthorizationURL, registerApplication } from '../utils/auth';\nimport store from '../utils/store';\nimport useTitle from '../utils/useTitle';\n\nfunction Login() {\n  useTitle('Log in');\n  const instanceURLRef = useRef();\n  const cachedInstanceURL = store.local.get('instanceURL');\n  const [uiState, setUIState] = useState('default');\n  const [instanceText, setInstanceText] = useState(\n    cachedInstanceURL?.toLowerCase() || '',\n  );\n\n  const [instancesList, setInstancesList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await fetch(instancesListURL);\n        const data = await res.json();\n        setInstancesList(data);\n      } catch (e) {\n        // Silently fail\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  // useEffect(() => {\n  //   if (cachedInstanceURL) {\n  //     instanceURLRef.current.value = cachedInstanceURL.toLowerCase();\n  //   }\n  // }, []);\n\n  const submitInstance = (instanceURL) => {\n    store.local.set('instanceURL', instanceURL);\n\n    (async () => {\n      setUIState('loading');\n      try {\n        const { client_id, client_secret } = await registerApplication({\n          instanceURL,\n        });\n\n        if (client_id && client_secret) {\n          store.session.set('clientID', client_id);\n          store.session.set('clientSecret', client_secret);\n\n          location.href = await getAuthorizationURL({\n            instanceURL,\n            client_id,\n          });\n        } else {\n          alert('Failed to register application');\n        }\n        setUIState('default');\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { elements } = e.target;\n    let instanceURL = elements.instanceURL.value.toLowerCase();\n    // Remove protocol from instance URL\n    instanceURL = instanceURL.replace(/^https?:\\/\\//, '').replace(/\\/+$/, '');\n    // Remove @acct@ or acct@ from instance URL\n    instanceURL = instanceURL.replace(/^@?[^@]+@/, '');\n    if (!/\\./.test(instanceURL)) {\n      instanceURL = instancesList.find((instance) =>\n        instance.includes(instanceURL),\n      );\n    }\n    submitInstance(instanceURL);\n  };\n\n  const instancesSuggestions = instanceText\n    ? instancesList\n        .filter((instance) => instance.includes(instanceText))\n        .sort((a, b) => {\n          // Move text that starts with instanceText to the start\n          const aStartsWith = a\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          const bStartsWith = b\n            .toLowerCase()\n            .startsWith(instanceText.toLowerCase());\n          if (aStartsWith && !bStartsWith) return -1;\n          if (!aStartsWith && bStartsWith) return 1;\n          return 0;\n        })\n        .slice(0, 10)\n    : [];\n\n  return (\n    <main id=\"login\" style={{ textAlign: 'center' }}>\n      <form onSubmit={onSubmit}>\n        <h1>Log in</h1>\n        <label>\n          <p>Instance</p>\n          <input\n            value={instanceText}\n            required\n            type=\"text\"\n            class=\"large\"\n            id=\"instanceURL\"\n            ref={instanceURLRef}\n            disabled={uiState === 'loading'}\n            // list=\"instances-list\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            autocomplete=\"off\"\n            spellcheck={false}\n            placeholder=\"instance domain\"\n            onInput={(e) => {\n              setInstanceText(e.target.value);\n            }}\n          />\n          {instancesSuggestions?.length > 0 ? (\n            <ul id=\"instances-suggestions\">\n              {instancesSuggestions.map((instance) => (\n                <li>\n                  <button\n                    type=\"button\"\n                    class=\"plain4\"\n                    onClick={() => {\n                      submitInstance(instance);\n                    }}\n                  >\n                    {instance}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div id=\"instances-eg\">e.g. &ldquo;mastodon.social&rsquo;</div>\n          )}\n          {/* <datalist id=\"instances-list\">\n            {instancesList.map((instance) => (\n              <option value={instance} />\n            ))}\n          </datalist> */}\n        </label>\n        {uiState === 'error' && (\n          <p class=\"error\">\n            Failed to log in. Please try again or another instance.\n          </p>\n        )}\n        <div>\n          <button class=\"large\" disabled={uiState === 'loading'}>\n            Log in\n          </button>{' '}\n        </div>\n        <Loader hidden={uiState !== 'loading'} />\n        <hr />\n        <p>\n          <a href=\"https://joinmastodon.org/servers\" target=\"_blank\">\n            Don't have an account? Create one!\n          </a>\n        </p>\n        <p>\n          <Link to=\"/\">Go home</Link>\n        </p>\n      </form>\n    </main>\n  );\n}\n\nexport default Login;\n","import './search.css';\n\nimport { forwardRef } from 'preact/compat';\nimport {\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { InView } from 'react-intersection-observer';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport AccountBlock from '../components/account-block';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport NavMenu from '../components/nav-menu';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport useTitle from '../utils/useTitle';\n\nconst SHORT_LIMIT = 5;\nconst LIMIT = 40;\n\nfunction Search(props) {\n  const params = useParams();\n  const { masto, instance, authenticated } = api({\n    instance: params.instance,\n  });\n  const [uiState, setUIState] = useState('default');\n  const [searchParams] = useSearchParams();\n  const searchFormRef = useRef();\n  const q = props?.query || searchParams.get('q');\n  const type = props?.type || searchParams.get('type');\n  useTitle(\n    q\n      ? `Search: ${q}${\n          type\n            ? ` (${\n                {\n                  statuses: 'Posts',\n                  accounts: 'Accounts',\n                  hashtags: 'Hashtags',\n                }[type]\n              })`\n            : ''\n        }`\n      : 'Search',\n    `/search`,\n  );\n\n  const [showMore, setShowMore] = useState(false);\n  const offsetRef = useRef(0);\n  useEffect(() => {\n    offsetRef.current = 0;\n  }, [q, type]);\n\n  const scrollableRef = useRef();\n  useLayoutEffect(() => {\n    scrollableRef.current?.scrollTo?.(0, 0);\n  }, [q, type]);\n\n  const [statusResults, setStatusResults] = useState([]);\n  const [accountResults, setAccountResults] = useState([]);\n  const [hashtagResults, setHashtagResults] = useState([]);\n  useEffect(() => {\n    setStatusResults([]);\n    setAccountResults([]);\n    setHashtagResults([]);\n  }, [q]);\n  const setTypeResultsFunc = {\n    statuses: setStatusResults,\n    accounts: setAccountResults,\n    hashtags: setHashtagResults,\n  };\n\n  function loadResults(firstLoad) {\n    setUIState('loading');\n    if (firstLoad && !type) {\n      setStatusResults(statusResults.slice(0, SHORT_LIMIT));\n      setAccountResults(accountResults.slice(0, SHORT_LIMIT));\n      setHashtagResults(hashtagResults.slice(0, SHORT_LIMIT));\n    }\n\n    (async () => {\n      const params = {\n        q,\n        resolve: authenticated,\n        limit: SHORT_LIMIT,\n      };\n      if (type) {\n        params.limit = LIMIT;\n        params.type = type;\n        params.offset = offsetRef.current;\n      }\n      try {\n        const results = await masto.v2.search(params);\n        console.log(results);\n        if (type) {\n          if (firstLoad) {\n            setTypeResultsFunc[type](results[type]);\n            const length = results[type]?.length;\n            offsetRef.current = LIMIT;\n            setShowMore(!!length);\n          } else {\n            setTypeResultsFunc[type]((prev) => [...prev, ...results[type]]);\n            const length = results[type]?.length;\n            offsetRef.current = offsetRef.current + LIMIT;\n            setShowMore(!!length);\n          }\n        } else {\n          setStatusResults(results.statuses);\n          setAccountResults(results.accounts);\n          setHashtagResults(results.hashtags);\n          offsetRef.current = 0;\n          setShowMore(false);\n        }\n        setUIState('default');\n      } catch (err) {\n        console.error(err);\n        setUIState('error');\n      }\n    })();\n  }\n\n  useEffect(() => {\n    // searchFieldRef.current?.focus?.();\n    // searchFormRef.current?.focus?.();\n    if (q) {\n      // searchFieldRef.current.value = q;\n      searchFormRef.current?.setValue?.(q);\n      loadResults(true);\n    }\n  }, [q, type, instance]);\n\n  return (\n    <div id=\"search-page\" class=\"deck-container\" ref={scrollableRef}>\n      <div class=\"timeline-deck deck\">\n        <header>\n          <div class=\"header-grid\">\n            <div class=\"header-side\">\n              <NavMenu />\n            </div>\n            <SearchForm ref={searchFormRef} />\n            <div class=\"header-side\">&nbsp;</div>\n          </div>\n        </header>\n        <main>\n          {!!q && (\n            <div class=\"filter-bar\">\n              {!!type && <Link to={`/search${q ? `?q=${q}` : ''}`}>‹ All</Link>}\n              {[\n                {\n                  label: 'Accounts',\n                  type: 'accounts',\n                  to: `/search?q=${q}&type=accounts`,\n                },\n                {\n                  label: 'Hashtags',\n                  type: 'hashtags',\n                  to: `/search?q=${q}&type=hashtags`,\n                },\n                {\n                  label: 'Posts',\n                  type: 'statuses',\n                  to: `/search?q=${q}&type=statuses`,\n                },\n              ]\n                .sort((a, b) => {\n                  if (a.type === type) return -1;\n                  if (b.type === type) return 1;\n                  return 0;\n                })\n                .map((link) => (\n                  <Link to={link.to}>{link.label}</Link>\n                ))}\n            </div>\n          )}\n          {!!q ? (\n            <>\n              {(!type || type === 'accounts') && (\n                <>\n                  {type !== 'accounts' && (\n                    <h2 class=\"timeline-header\">Accounts</h2>\n                  )}\n                  {accountResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline flat accounts-list\">\n                        {accountResults.map((account) => (\n                          <li key={account.id}>\n                            <AccountBlock\n                              account={account}\n                              instance={instance}\n                              showStats\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'accounts' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=accounts`}\n                          >\n                            See more accounts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No accounts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'hashtags') && (\n                <>\n                  {type !== 'hashtags' && (\n                    <h2 class=\"timeline-header\">Hashtags</h2>\n                  )}\n                  {hashtagResults.length > 0 ? (\n                    <>\n                      <ul class=\"link-list hashtag-list\">\n                        {hashtagResults.map((hashtag) => (\n                          <li key={hashtag.name}>\n                            <Link\n                              to={\n                                instance\n                                  ? `/${instance}/t/${hashtag.name}`\n                                  : `/t/${hashtag.name}`\n                              }\n                            >\n                              <Icon icon=\"hashtag\" />\n                              <span>{hashtag.name}</span>\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'hashtags' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=hashtags`}\n                          >\n                            See more hashtags <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No hashtags found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {(!type || type === 'statuses') && (\n                <>\n                  {type !== 'statuses' && (\n                    <h2 class=\"timeline-header\">Posts</h2>\n                  )}\n                  {statusResults.length > 0 ? (\n                    <>\n                      <ul class=\"timeline\">\n                        {statusResults.map((status) => (\n                          <li key={status.id}>\n                            <Link\n                              class=\"status-link\"\n                              to={\n                                instance\n                                  ? `/${instance}/s/${status.id}`\n                                  : `/s/${status.id}`\n                              }\n                            >\n                              <Status status={status} />\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                      {type !== 'statuses' && (\n                        <div class=\"ui-state\">\n                          <Link\n                            class=\"plain button\"\n                            to={`/search?q=${q}&type=statuses`}\n                          >\n                            See more posts <Icon icon=\"arrow-right\" />\n                          </Link>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    !type &&\n                    (uiState === 'loading' ? (\n                      <p class=\"ui-state\">\n                        <Loader abrupt />\n                      </p>\n                    ) : (\n                      <p class=\"ui-state\">No posts found.</p>\n                    ))\n                  )}\n                </>\n              )}\n              {!!type &&\n                (uiState === 'default' ? (\n                  showMore ? (\n                    <InView\n                      onChange={(inView) => {\n                        if (inView) {\n                          loadResults();\n                        }\n                      }}\n                    >\n                      <button\n                        type=\"button\"\n                        class=\"plain block\"\n                        onClick={() => loadResults()}\n                        style={{ marginBlockEnd: '6em' }}\n                      >\n                        Show more&hellip;\n                      </button>\n                    </InView>\n                  ) : (\n                    <p class=\"ui-state insignificant\">The end.</p>\n                  )\n                ) : (\n                  uiState === 'loading' && (\n                    <p class=\"ui-state\">\n                      <Loader abrupt />\n                    </p>\n                  )\n                ))}\n            </>\n          ) : uiState === 'loading' ? (\n            <p class=\"ui-state\">\n              <Loader abrupt />\n            </p>\n          ) : (\n            <p class=\"ui-state\">\n              Enter your search term or paste a URL above to get started.\n            </p>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n\nconst SearchForm = forwardRef((props, ref) => {\n  const { instance } = api();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMenuOpen, setSearchMenuOpen] = useState(false);\n  const [query, setQuery] = useState(searchParams.get('q') || '');\n  const type = searchParams.get('type');\n  const formRef = useRef(null);\n\n  const searchFieldRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    setValue: (value) => {\n      setQuery(value);\n    },\n    focus: () => {\n      searchFieldRef.current.focus();\n    },\n  }));\n\n  return (\n    <form\n      ref={formRef}\n      class=\"search-popover-container\"\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        if (query) {\n          const params = {\n            q: query,\n          };\n          if (type) params.type = type; // Preserve type\n          setSearchParams(params);\n        } else {\n          setSearchParams({});\n        }\n      }}\n    >\n      <input\n        ref={searchFieldRef}\n        value={query}\n        name=\"q\"\n        type=\"search\"\n        // autofocus\n        placeholder=\"Search\"\n        dir=\"auto\"\n        onSearch={(e) => {\n          if (!e.target.value) {\n            setSearchParams({});\n          }\n        }}\n        onInput={(e) => {\n          setQuery(e.target.value);\n          setSearchMenuOpen(true);\n        }}\n        onFocus={() => {\n          setSearchMenuOpen(true);\n        }}\n        onBlur={() => {\n          setTimeout(() => {\n            setSearchMenuOpen(false);\n          }, 100);\n          formRef.current\n            ?.querySelector('.search-popover-item.focus')\n            ?.classList.remove('focus');\n        }}\n        onKeyDown={(e) => {\n          const { key } = e;\n          switch (key) {\n            case 'Escape':\n              setSearchMenuOpen(false);\n              break;\n            case 'Down':\n            case 'ArrowDown':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = formRef.current.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let nextItem = focusItem.nextElementSibling;\n                  while (nextItem && nextItem.hidden) {\n                    nextItem = nextItem.nextElementSibling;\n                  }\n                  if (nextItem) {\n                    nextItem.classList.add('focus');\n                    const siblings = Array.from(\n                      nextItem.parentElement.children,\n                    ).filter((el) => el !== nextItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const firstItem = formRef.current.querySelector(\n                    '.search-popover-item',\n                  );\n                  if (firstItem) {\n                    firstItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Up':\n            case 'ArrowUp':\n              e.preventDefault();\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  let prevItem = focusItem.previousElementSibling;\n                  while (prevItem && prevItem.hidden) {\n                    prevItem = prevItem.previousElementSibling;\n                  }\n                  if (prevItem) {\n                    prevItem.classList.add('focus');\n                    const siblings = Array.from(\n                      prevItem.parentElement.children,\n                    ).filter((el) => el !== prevItem);\n                    siblings.forEach((el) => {\n                      el.classList.remove('focus');\n                    });\n                  }\n                } else {\n                  const lastItem = document.querySelector(\n                    '.search-popover-item:last-child',\n                  );\n                  if (lastItem) {\n                    lastItem.classList.add('focus');\n                  }\n                }\n              }\n              break;\n            case 'Enter':\n              if (searchMenuOpen) {\n                const focusItem = document.querySelector(\n                  '.search-popover-item.focus',\n                );\n                if (focusItem) {\n                  e.preventDefault();\n                  focusItem.click();\n                }\n                setSearchMenuOpen(false);\n              }\n              break;\n          }\n        }}\n      />\n      <div class=\"search-popover\" hidden={!searchMenuOpen || !query}>\n        {!!query &&\n          [\n            {\n              label: (\n                <>\n                  Posts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=statuses`,\n              hidden: /^https?:/.test(query),\n            },\n            {\n              label: (\n                <>\n                  Posts tagged with <mark>#{query.replace(/^#/, '')}</mark>\n                </>\n              ),\n              to: `/${instance}/t/${query.replace(/^#/, '')}`,\n              hidden:\n                /^@/.test(query) || /^https?:/.test(query) || /\\s/.test(query),\n              top: /^#/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Look up <mark>{query}</mark>\n                </>\n              ),\n              to: `/${query}`,\n              hidden: !/^https?:/.test(query),\n              top: /^https?:/.test(query),\n              type: 'link',\n            },\n            {\n              label: (\n                <>\n                  Accounts with <q>{query}</q>\n                </>\n              ),\n              to: `/search?q=${encodeURIComponent(query)}&type=accounts`,\n            },\n          ]\n            .sort((a, b) => {\n              if (a.top && !b.top) return -1;\n              if (!a.top && b.top) return 1;\n              return 0;\n            })\n            .map(({ label, to, hidden, type }) => (\n              <Link to={to} class=\"search-popover-item\" hidden={hidden}>\n                <Icon\n                  icon={type === 'link' ? 'arrow-right' : 'search'}\n                  class=\"more-insignificant\"\n                />\n                <span>{label}</span>{' '}\n              </Link>\n            ))}\n      </div>\n    </form>\n  );\n});\n","export default \"__VITE_ASSET__c2b3a5f0__\"","import './settings.css';\n\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useSnapshot } from 'valtio';\n\nimport logo from '../assets/logo.svg';\nimport Icon from '../components/icon';\nimport RelativeTime from '../components/relative-time';\nimport targetLanguages from '../data/lingva-target-languages';\nimport { api } from '../utils/api';\nimport getTranslateTargetLanguage from '../utils/get-translate-target-language';\nimport localeCode2Text from '../utils/localeCode2Text';\nimport states from '../utils/states';\nimport store from '../utils/store';\n\nconst DEFAULT_TEXT_SIZE = 16;\nconst TEXT_SIZES = [16, 17, 18, 19, 20];\n\nfunction Settings({ onClose }) {\n  const snapStates = useSnapshot(states);\n  const currentTheme = store.local.get('theme') || 'auto';\n  const themeFormRef = useRef();\n  const targetLanguage =\n    snapStates.settings.contentTranslationTargetLanguage || null;\n  const systemTargetLanguage = getTranslateTargetLanguage();\n  const systemTargetLanguageText = localeCode2Text(systemTargetLanguage);\n  const currentTextSize = store.local.get('textSize') || DEFAULT_TEXT_SIZE;\n\n  const [prefs, setPrefs] = useState(store.account.get('preferences') || {});\n  // Get preferences every time Settings is opened\n  // NOTE: Disabled for now because I don't expect this to change often. Also for some reason, the /api/v1/preferences endpoint is cached for a while and return old prefs if refresh immediately after changing them.\n  // useEffect(() => {\n  //   const { masto } = api();\n  //   (async () => {\n  //     try {\n  //       const preferences = await masto.v1.preferences.fetch();\n  //       setPrefs(preferences);\n  //       store.account.set('preferences', preferences);\n  //     } catch (e) {\n  //       // Silently fail\n  //       console.error(e);\n  //     }\n  //   })();\n  // }, []);\n\n  return (\n    <div id=\"settings-container\" class=\"sheet\" tabIndex=\"-1\">\n      {!!onClose && (\n        <button type=\"button\" class=\"sheet-close\" onClick={onClose}>\n          <Icon icon=\"x\" />\n        </button>\n      )}\n      <header>\n        <h2>Settings</h2>\n      </header>\n      <main>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label>Appearance</label>\n              </div>\n              <div>\n                <form\n                  ref={themeFormRef}\n                  onInput={(e) => {\n                    console.log(e);\n                    e.preventDefault();\n                    const formData = new FormData(themeFormRef.current);\n                    const theme = formData.get('theme');\n                    const html = document.documentElement;\n\n                    if (theme === 'auto') {\n                      html.classList.remove('is-light', 'is-dark');\n                    } else {\n                      html.classList.toggle('is-light', theme === 'light');\n                      html.classList.toggle('is-dark', theme === 'dark');\n                    }\n                    document\n                      .querySelector('meta[name=\"color-scheme\"]')\n                      .setAttribute(\n                        'content',\n                        theme === 'auto' ? 'dark light' : theme,\n                      );\n\n                    if (theme === 'auto') {\n                      store.local.del('theme');\n                    } else {\n                      store.local.set('theme', theme);\n                    }\n                  }}\n                >\n                  <div class=\"radio-group\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"light\"\n                        defaultChecked={currentTheme === 'light'}\n                      />\n                      <span>Light</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"dark\"\n                        defaultChecked={currentTheme === 'dark'}\n                      />\n                      <span>Dark</span>\n                    </label>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name=\"theme\"\n                        value=\"auto\"\n                        defaultChecked={\n                          currentTheme !== 'light' && currentTheme !== 'dark'\n                        }\n                      />\n                      <span>Auto</span>\n                    </label>\n                  </div>\n                </form>\n              </div>\n            </li>\n            <li>\n              <div>\n                <label>Text size</label>\n              </div>\n              <div class=\"range-group\">\n                <span style={{ fontSize: TEXT_SIZES[0] }}>A</span>{' '}\n                <input\n                  type=\"range\"\n                  min={TEXT_SIZES[0]}\n                  max={TEXT_SIZES[TEXT_SIZES.length - 1]}\n                  step=\"1\"\n                  value={currentTextSize}\n                  list=\"sizes\"\n                  onChange={(e) => {\n                    const value = parseInt(e.target.value, 10);\n                    const html = document.documentElement;\n                    // set CSS variable\n                    html.style.setProperty('--text-size', `${value}px`);\n                    // save to local storage\n                    if (value === DEFAULT_TEXT_SIZE) {\n                      store.local.del('textSize');\n                    } else {\n                      store.local.set('textSize', e.target.value);\n                    }\n                  }}\n                />{' '}\n                <span style={{ fontSize: TEXT_SIZES[TEXT_SIZES.length - 1] }}>\n                  A\n                </span>\n                <datalist id=\"sizes\">\n                  {TEXT_SIZES.map((size) => (\n                    <option value={size} />\n                  ))}\n                </datalist>\n              </div>\n            </li>\n          </ul>\n        </section>\n        <h3>Posting</h3>\n        <section>\n          <ul>\n            <li>\n              <div>\n                <label for=\"posting-privacy-field\">Default visibility</label>\n              </div>\n              <div>\n                <select\n                  id=\"posting-privacy-field\"\n                  value={prefs['posting:default:visibility'] || 'public'}\n                  onChange={(e) => {\n                    const { value } = e.target;\n                    const { masto } = api();\n                    (async () => {\n                      try {\n                        await masto.v1.accounts.updateCredentials({\n                          source: {\n                            privacy: value,\n                          },\n                        });\n                        setPrefs({\n                          ...prefs,\n                          'posting:default:visibility': value,\n                        });\n                        store.account.set('preferences', {\n                          ...prefs,\n                          'posting:default:visibility': value,\n                        });\n                      } catch (e) {\n                        alert('Failed to update posting privacy');\n                        console.error(e);\n                      }\n                    })();\n                  }}\n                >\n                  <option value=\"public\">Public</option>\n                  <option value=\"unlisted\">Unlisted</option>\n                  <option value=\"private\">Followers only</option>\n                </select>\n              </div>\n            </li>\n          </ul>\n        </section>\n        <h3>Experiments</h3>\n        <section>\n          <ul>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.autoRefresh}\n                  onChange={(e) => {\n                    states.settings.autoRefresh = e.target.checked;\n                  }}\n                />{' '}\n                Auto refresh timeline posts\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.boostsCarousel}\n                  onChange={(e) => {\n                    states.settings.boostsCarousel = e.target.checked;\n                  }}\n                />{' '}\n                Boosts carousel\n              </label>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.contentTranslation}\n                  onChange={(e) => {\n                    const { checked } = e.target;\n                    states.settings.contentTranslation = checked;\n                    if (!checked) {\n                      states.settings.contentTranslationTargetLanguage = null;\n                    }\n                  }}\n                />{' '}\n                Post translation\n              </label>\n              <div\n                class={`sub-section ${\n                  !snapStates.settings.contentTranslation\n                    ? 'more-insignificant'\n                    : ''\n                }`}\n              >\n                <div>\n                  <label>\n                    Translate to{' '}\n                    <select\n                      value={targetLanguage || ''}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationTargetLanguage =\n                          e.target.value || null;\n                      }}\n                    >\n                      <option value=\"\">\n                        System language ({systemTargetLanguageText})\n                      </option>\n                      <option disabled>──────────</option>\n                      {targetLanguages.map((lang) => (\n                        <option value={lang.code}>{lang.name}</option>\n                      ))}\n                    </select>\n                  </label>\n                </div>\n                <hr />\n                <p class=\"checkbox-fieldset\">\n                  Hide \"Translate\" button for\n                  {snapStates.settings.contentTranslationHideLanguages.length >\n                    0 && (\n                    <>\n                      {' '}\n                      (\n                      {\n                        snapStates.settings.contentTranslationHideLanguages\n                          .length\n                      }\n                      )\n                    </>\n                  )}\n                  :\n                  <div class=\"checkbox-fields\">\n                    {targetLanguages.map((lang) => (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={snapStates.settings.contentTranslationHideLanguages.includes(\n                            lang.code,\n                          )}\n                          onChange={(e) => {\n                            const { checked } = e.target;\n                            if (checked) {\n                              states.settings.contentTranslationHideLanguages.push(\n                                lang.code,\n                              );\n                            } else {\n                              states.settings.contentTranslationHideLanguages =\n                                snapStates.settings.contentTranslationHideLanguages.filter(\n                                  (code) => code !== lang.code,\n                                );\n                            }\n                          }}\n                        />{' '}\n                        {lang.name}\n                      </label>\n                    ))}\n                  </div>\n                </p>\n                <p class=\"insignificant\">\n                  <small>\n                    Note: This feature uses an external API to translate,\n                    powered by{' '}\n                    <a\n                      href=\"https://github.com/thedaviddelta/lingva-translate\"\n                      target=\"_blank\"\n                    >\n                      Lingva Translate\n                    </a>\n                    .\n                  </small>\n                </p>\n                <hr />\n                <div>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={snapStates.settings.contentTranslationAutoInline}\n                      disabled={!snapStates.settings.contentTranslation}\n                      onChange={(e) => {\n                        states.settings.contentTranslationAutoInline =\n                          e.target.checked;\n                      }}\n                    />{' '}\n                    Auto inline translation\n                  </label>\n                  <p class=\"insignificant\">\n                    <small>\n                      Automatically show translation for posts in timeline. Only\n                      works for <b>short</b> posts without content warning,\n                      media and poll.\n                    </small>\n                  </p>\n                </div>\n              </div>\n            </li>\n            <li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={snapStates.settings.cloakMode}\n                  onChange={(e) => {\n                    states.settings.cloakMode = e.target.checked;\n                  }}\n                />{' '}\n                Cloak mode{' '}\n                <span class=\"insignificant\">\n                  (<samp>Text</samp> → <samp>████</samp>)\n                </span>\n              </label>\n              <div class=\"sub-section insignificant\">\n                <small>\n                  Replace text as blocks, useful when taking screenshots, for\n                  privacy reasons.\n                </small>\n              </div>\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                class=\"light\"\n                onClick={() => {\n                  states.showDrafts = true;\n                  states.showSettings = false;\n                }}\n              >\n                Unsent drafts\n              </button>\n            </li>\n          </ul>\n        </section>\n        <h3>About</h3>\n        <section>\n          <div\n            style={{\n              display: 'flex',\n              gap: 8,\n              lineHeight: 1.25,\n              alignItems: 'center',\n              marginTop: 8,\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"\"\n              width=\"64\"\n              height=\"64\"\n              style={{\n                aspectRatio: '1/1',\n                verticalAlign: 'middle',\n                background: '#b7cdf9',\n                borderRadius: 12,\n              }}\n            />\n            <div>\n              <b>Phanpy</b>{' '}\n              <a\n                href=\"https://hachyderm.io/@phanpy\"\n                // target=\"_blank\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'phanpy@hachyderm.io';\n                }}\n              >\n                @phanpy\n              </a>\n              <br />\n              <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n                Built\n              </a>{' '}\n              by{' '}\n              <a\n                href=\"https://mastodon.social/@cheeaun\"\n                // target=\"_blank\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  states.showAccount = 'cheeaun@mastodon.social';\n                }}\n              >\n                @cheeaun\n              </a>\n            </div>\n          </div>\n          <p>\n            <a\n              href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n              target=\"_blank\"\n            >\n              Privacy Policy\n            </a>\n          </p>\n          {__BUILD_TIME__ && (\n            <p>\n              <span class=\"insignificant\">Last build:</span>{' '}\n              <RelativeTime datetime={new Date(__BUILD_TIME__)} />{' '}\n              {__COMMIT_HASH__ && (\n                <>\n                  (\n                  <a\n                    href={`https://github.com/cheeaun/phanpy/commit/${__COMMIT_HASH__}`}\n                    target=\"_blank\"\n                  >\n                    <code>{__COMMIT_HASH__}</code>\n                  </a>\n                  )\n                </>\n              )}\n            </p>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default Settings;\n","import './status.css';\n\nimport { Menu, MenuDivider, MenuHeader, MenuItem } from '@szhsin/react-menu';\nimport debounce from 'just-debounce-it';\nimport pRetry from 'p-retry';\nimport { memo } from 'preact/compat';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { InView } from 'react-intersection-observer';\nimport { matchPath, useParams, useSearchParams } from 'react-router-dom';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSnapshot } from 'valtio';\n\nimport Avatar from '../components/avatar';\nimport Icon from '../components/icon';\nimport Link from '../components/link';\nimport Loader from '../components/loader';\nimport MediaModal from '../components/media-modal';\nimport NameText from '../components/name-text';\nimport RelativeTime from '../components/relative-time';\nimport Status from '../components/status';\nimport { api } from '../utils/api';\nimport htmlContentLength from '../utils/html-content-length';\nimport shortenNumber from '../utils/shorten-number';\nimport states, {\n  getStatus,\n  saveStatus,\n  statusKey,\n  threadifyStatus,\n} from '../utils/states';\nimport statusPeek from '../utils/status-peek';\nimport { getCurrentAccount } from '../utils/store-utils';\nimport useScroll from '../utils/useScroll';\nimport useTitle from '../utils/useTitle';\n\nimport getInstanceStatusURL from './../utils/get-instance-status-url';\n\nconst LIMIT = 40;\nconst SUBCOMMENTS_OPEN_ALL_LIMIT = 10;\nconst MAX_WEIGHT = 5;\n\nlet cachedRepliesToggle = {};\nlet cachedStatusesMap = {};\nfunction resetScrollPosition(id) {\n  delete cachedStatusesMap[id];\n  delete states.scrollPositions[id];\n}\n\nfunction StatusPage(params) {\n  const { id } = params;\n  const { masto, instance } = api({ instance: params.instance });\n  const snapStates = useSnapshot(states);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const mediaOnlyParam = searchParams.get('media-only');\n  const mediaIndex = parseInt(mediaParam || mediaOnlyParam, 10);\n  let showMedia = mediaIndex > 0;\n  const mediaStatusID = searchParams.get('mediaStatusID');\n  const mediaStatus = getStatus(mediaStatusID, instance);\n  if (mediaStatusID && !mediaStatus) {\n    showMedia = false;\n  }\n  const showMediaOnly = showMedia && !!mediaOnlyParam;\n\n  const sKey = statusKey(id, instance);\n  const [heroStatus, setHeroStatus] = useState(states.statuses[sKey]);\n  useEffect(() => {\n    if (states.statuses[sKey]) {\n      setHeroStatus(states.statuses[sKey]);\n    }\n  }, [sKey]);\n\n  const closeLink = useMemo(() => {\n    const { prevLocation } = states;\n    const pathname =\n      (prevLocation?.pathname || '') + (prevLocation?.search || '');\n    const matchStatusPath =\n      matchPath('/:instance/s/:id', pathname) || matchPath('/s/:id', pathname);\n    if (!pathname || matchStatusPath) {\n      return '/';\n    }\n    return pathname;\n  }, []);\n\n  useEffect(() => {\n    if (!heroStatus && showMedia) {\n      (async () => {\n        try {\n          const status = await masto.v1.statuses.fetch(id);\n          saveStatus(status, instance);\n          setHeroStatus(status);\n        } catch (err) {\n          console.error(err);\n          alert('Unable to load post.');\n          location.hash = closeLink;\n        }\n      })();\n    }\n  }, [showMedia]);\n\n  const mediaAttachments = mediaStatusID\n    ? mediaStatus?.mediaAttachments\n    : heroStatus?.mediaAttachments;\n\n  return (\n    <div class=\"deck-backdrop\">\n      {showMedia ? (\n        mediaAttachments?.length ? (\n          <MediaModal\n            mediaAttachments={mediaAttachments}\n            statusID={mediaStatusID || id}\n            instance={instance}\n            index={mediaIndex - 1}\n            onClose={() => {\n              if (\n                !window.matchMedia('(min-width: calc(40em + 350px))').matches &&\n                snapStates.prevLocation\n              ) {\n                history.back();\n              } else {\n                if (showMediaOnly) {\n                  location.hash = closeLink;\n                } else {\n                  searchParams.delete('media');\n                  searchParams.delete('mediaStatusID');\n                  setSearchParams(searchParams);\n                }\n              }\n            }}\n          />\n        ) : (\n          <div class=\"media-modal-container loading\">\n            <Loader abrupt />\n          </div>\n        )\n      ) : (\n        <Link to={closeLink} />\n      )}\n      {!showMediaOnly && (\n        <StatusThread\n          id={id}\n          instance={params.instance}\n          closeLink={closeLink}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction StatusThread({ id, closeLink = '/', instance: propInstance }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const mediaParam = searchParams.get('media');\n  const showMedia = parseInt(mediaParam, 10) > 0;\n  const [viewMode, setViewMode] = useState(searchParams.get('view'));\n  const translate = !!parseInt(searchParams.get('translate'));\n  const { masto, instance } = api({ instance: propInstance });\n  const {\n    masto: currentMasto,\n    instance: currentInstance,\n    authenticated,\n  } = api();\n  const sameInstance = instance === currentInstance;\n  const snapStates = useSnapshot(states);\n  const [statuses, setStatuses] = useState([]);\n  const [uiState, setUIState] = useState('default');\n  const heroStatusRef = useRef();\n  const sKey = statusKey(id, instance);\n  const totalDescendants = useRef(0);\n\n  const scrollableRef = useRef();\n  useEffect(() => {\n    scrollableRef.current?.focus();\n  }, []);\n  useEffect(() => {\n    const onScroll = debounce(() => {\n      // console.log('onScroll');\n      if (!scrollableRef.current) return;\n      const { scrollTop } = scrollableRef.current;\n      if (uiState !== 'loading') {\n        states.scrollPositions[id] = scrollTop;\n      }\n    }, 50);\n    scrollableRef.current?.addEventListener('scroll', onScroll, {\n      passive: true,\n    });\n    onScroll();\n    return () => {\n      onScroll.cancel();\n      scrollableRef.current?.removeEventListener('scroll', onScroll);\n    };\n  }, [id, uiState !== 'loading']);\n\n  const scrollOffsets = useRef();\n  const initContext = ({ reloadHero } = {}) => {\n    console.debug('initContext', id);\n    setUIState('loading');\n    let heroTimer;\n\n    const cachedStatuses = cachedStatusesMap[id];\n    if (cachedStatuses) {\n      // Case 1: It's cached, let's restore them to make it snappy\n      const reallyCachedStatuses = cachedStatuses.filter(\n        (s) => states.statuses[sKey],\n        // Some are not cached in the global state, so we need to filter them out\n      );\n      setStatuses(reallyCachedStatuses);\n    } else {\n      // const heroIndex = statuses.findIndex((s) => s.id === id);\n      // if (heroIndex !== -1) {\n      //   // Case 2: It's in current statuses. Slice off all descendant statuses after the hero status to be safe\n      //   const slicedStatuses = statuses.slice(0, heroIndex + 1);\n      //   setStatuses(slicedStatuses);\n      // } else {\n      // Case 3: Not cached and not in statuses, let's start from scratch\n      setStatuses([{ id }]);\n      // }\n    }\n\n    (async () => {\n      const heroFetch = () =>\n        pRetry(() => masto.v1.statuses.fetch(id), {\n          retries: 4,\n        });\n      const contextFetch = pRetry(() => masto.v1.statuses.fetchContext(id), {\n        retries: 8,\n      });\n\n      const hasStatus = !!snapStates.statuses[sKey];\n      let heroStatus = snapStates.statuses[sKey];\n      if (hasStatus && !reloadHero) {\n        console.debug('Hero status is cached');\n      } else {\n        try {\n          heroStatus = await heroFetch();\n          saveStatus(heroStatus, instance);\n          // Give time for context to appear\n          await new Promise((resolve) => {\n            setTimeout(resolve, 100);\n          });\n        } catch (e) {\n          console.error(e);\n          setUIState('error');\n          return;\n        }\n      }\n\n      try {\n        const context = await contextFetch;\n        const { ancestors, descendants } = context;\n\n        totalDescendants.current = descendants?.length || 0;\n\n        const missingStatuses = new Set();\n        ancestors.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n          if (\n            status.inReplyToId &&\n            !ancestors.find((s) => s.id === status.inReplyToId)\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n        });\n        const ancestorsIsThread = ancestors.every(\n          (s) => s.account.id === heroStatus.account.id,\n        );\n        const nestedDescendants = [];\n        descendants.forEach((status) => {\n          saveStatus(status, instance, {\n            skipThreading: true,\n          });\n\n          if (\n            status.inReplyToId &&\n            !descendants.find((s) => s.id === status.inReplyToId) &&\n            status.inReplyToId !== heroStatus.id\n          ) {\n            missingStatuses.add(status.inReplyToId);\n          }\n\n          if (status.inReplyToAccountId === status.account.id) {\n            // If replying to self, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else if (status.inReplyToId === heroStatus.id) {\n            // If replying to the hero status, it's a reply, level 1\n            nestedDescendants.push(status);\n          } else if (\n            !status.inReplyToAccountId &&\n            nestedDescendants.find((s) => s.id === status.inReplyToId) &&\n            status.account.id === heroStatus.account.id\n          ) {\n            // If replying to hero's own statuses, it's part of the thread, level 1\n            nestedDescendants.push(status);\n          } else {\n            // If replying to someone else, it's a reply to a reply, level 2\n            const parent = descendants.find((s) => s.id === status.inReplyToId);\n            if (parent) {\n              if (!parent.__replies) {\n                parent.__replies = [];\n              }\n              parent.__replies.push(status);\n            } else {\n              // If no parent, something is wrong\n              console.warn('No parent found for', status);\n            }\n          }\n        });\n\n        console.log({ ancestors, descendants, nestedDescendants });\n        if (missingStatuses.size) {\n          console.error('Missing statuses', [...missingStatuses]);\n        }\n\n        function expandReplies(_replies) {\n          return _replies?.map((_r) => ({\n            id: _r.id,\n            account: _r.account,\n            repliesCount: _r.repliesCount,\n            content: _r.content,\n            weight: calcStatusWeight(_r),\n            replies: expandReplies(_r.__replies),\n          }));\n        }\n\n        const allStatuses = [\n          ...ancestors.map((s) => ({\n            id: s.id,\n            ancestor: true,\n            isThread: ancestorsIsThread,\n            accountID: s.account.id,\n            account: s.account,\n            repliesCount: s.repliesCount,\n            weight: calcStatusWeight(s),\n          })),\n          {\n            id,\n            accountID: heroStatus.account.id,\n            weight: calcStatusWeight(heroStatus),\n          },\n          ...nestedDescendants.map((s) => ({\n            id: s.id,\n            account: s.account,\n            accountID: s.account.id,\n            descendant: true,\n            thread: s.account.id === heroStatus.account.id,\n            weight: calcStatusWeight(s),\n            replies: expandReplies(s.__replies),\n          })),\n        ];\n\n        setUIState('default');\n        scrollOffsets.current = {\n          offsetTop: heroStatusRef.current?.offsetTop,\n          scrollTop: scrollableRef.current?.scrollTop,\n        };\n\n        // Set limit to hero's index\n        const heroLimit = allStatuses.findIndex((s) => s.id === id);\n        if (heroLimit >= limit) {\n          setLimit(heroLimit + 1);\n        }\n\n        console.log({ allStatuses });\n        setStatuses(allStatuses);\n        cachedStatusesMap[id] = allStatuses;\n\n        // Let's threadify this one\n        // Note that all non-hero statuses will trigger saveStatus which will threadify them too\n        // By right, at this point, all descendant statuses should be cached\n        threadifyStatus(heroStatus, instance);\n      } catch (e) {\n        console.error(e);\n        setUIState('error');\n      }\n    })();\n\n    return () => {\n      clearTimeout(heroTimer);\n    };\n  };\n\n  useEffect(initContext, [id, masto]);\n  useEffect(() => {\n    if (!statuses.length) return;\n    console.debug('STATUSES', statuses);\n    const scrollPosition = snapStates.scrollPositions[id];\n    console.debug('scrollPosition', scrollPosition);\n    if (!!scrollPosition) {\n      console.debug('Case 1', {\n        id,\n        scrollPosition,\n      });\n      scrollableRef.current.scrollTop = scrollPosition;\n    } else if (scrollOffsets.current) {\n      const newScrollOffsets = {\n        offsetTop: heroStatusRef.current?.offsetTop,\n        scrollTop: scrollableRef.current?.scrollTop,\n      };\n      const newScrollTop =\n        newScrollOffsets.offsetTop -\n        scrollOffsets.current.offsetTop +\n        newScrollOffsets.scrollTop;\n      console.debug('Case 2', {\n        scrollOffsets: scrollOffsets.current,\n        newScrollOffsets,\n        newScrollTop,\n        statuses: [...statuses],\n      });\n      scrollableRef.current.scrollTop = newScrollTop;\n    } else if (statuses.length === 1) {\n      console.debug('Case 3', {\n        id,\n      });\n      scrollableRef.current.scrollTop = 0;\n    }\n\n    // RESET\n    scrollOffsets.current = null;\n  }, [statuses]);\n\n  useEffect(() => {\n    if (snapStates.reloadStatusPage <= 0) return;\n    // Delete the cache for the context\n    (async () => {\n      try {\n        const { instanceURL } = getCurrentAccount();\n        const contextURL = `https://${instanceURL}/api/v1/statuses/${id}/context`;\n        console.log('Clear cache', contextURL);\n        const apiCache = await caches.open('api');\n        await apiCache.delete(contextURL, { ignoreVary: true });\n\n        return initContext({\n          reloadHero: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [snapStates.reloadStatusPage]);\n\n  useEffect(() => {\n    return () => {\n      // RESET\n      states.scrollPositions = {};\n      states.reloadStatusPage = 0;\n      cachedStatusesMap = {};\n      cachedRepliesToggle = {};\n      statusWeightCache.clear();\n    };\n  }, []);\n\n  const heroStatus = snapStates.statuses[sKey] || snapStates.statuses[id];\n  const heroDisplayName = useMemo(() => {\n    // Remove shortcodes from display name\n    if (!heroStatus) return '';\n    const { account } = heroStatus;\n    const div = document.createElement('div');\n    div.innerHTML = account.displayName;\n    return div.innerText.trim();\n  }, [heroStatus]);\n  const heroContentText = useMemo(() => {\n    if (!heroStatus) return '';\n    let text = statusPeek(heroStatus);\n    if (text.length > 64) {\n      // \"The title should ideally be less than 64 characters in length\"\n      // https://www.w3.org/Provider/Style/TITLE.html\n      text = text.slice(0, 64) + '…';\n    }\n    return text;\n  }, [heroStatus]);\n  useTitle(\n    heroDisplayName && heroContentText\n      ? `${heroDisplayName}: \"${heroContentText}\"`\n      : 'Status',\n    '/:instance?/s/:id',\n  );\n\n  const postInstance = useMemo(() => {\n    if (!heroStatus) return;\n    const { url } = heroStatus;\n    if (!url) return;\n    return new URL(url).hostname;\n  }, [heroStatus]);\n  const postSameInstance = useMemo(() => {\n    if (!postInstance) return;\n    return postInstance === instance;\n  }, [postInstance, instance]);\n\n  const [limit, setLimit] = useState(LIMIT);\n  const showMore = useMemo(() => {\n    // return number of statuses to show\n    return statuses.length - limit;\n  }, [statuses.length, limit]);\n\n  const hasDescendants = statuses.some((s) => s.descendant);\n  const ancestors = statuses.filter((s) => s.ancestor);\n\n  const [heroInView, setHeroInView] = useState(true);\n  const onView = useDebouncedCallback(setHeroInView, 100);\n  const heroPointer = useMemo(() => {\n    // get top offset of heroStatus\n    if (!heroStatusRef.current || heroInView) return null;\n    const { top } = heroStatusRef.current.getBoundingClientRect();\n    return top > 0 ? 'down' : 'up';\n  }, [heroInView]);\n\n  useHotkeys(\n    'esc',\n    () => {\n      location.hash = closeLink;\n    },\n    {\n      // If media is open, esc to close media first\n      // Else close the status page\n      enabled: !showMedia,\n    },\n  );\n  // For backspace, will always close both media and status page\n  useHotkeys('backspace', () => {\n    location.hash = closeLink;\n  });\n\n  useHotkeys('j', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      // Select all statuses except those inside collapsed details/summary\n      // Hat-tip to @AmeliaBR@front-end.social\n      // https://front-end.social/@AmeliaBR/109784776146144471\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    console.log({ allStatusLinks });\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let nextStatus = allStatusLinks[activeStatusIndex + 1];\n      if (nextStatus) {\n        nextStatus.focus();\n        nextStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  useHotkeys('k', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    const activeStatusRect = activeStatus?.getBoundingClientRect();\n    const allStatusLinks = Array.from(\n      scrollableRef.current.querySelectorAll(\n        '.status-link:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *), .status-focus:not(details:not([open]) > summary ~ *, details:not([open]) > summary ~ * *)',\n      ),\n    );\n    if (\n      activeStatus &&\n      activeStatusRect.top < scrollableRef.current.clientHeight &&\n      activeStatusRect.bottom > 0\n    ) {\n      const activeStatusIndex = allStatusLinks.indexOf(activeStatus);\n      let prevStatus = allStatusLinks[activeStatusIndex - 1];\n      if (prevStatus) {\n        prevStatus.focus();\n        prevStatus.scrollIntoViewIfNeeded?.();\n      }\n    } else {\n      // If active status is not in viewport, get the topmost status-link in viewport\n      const topmostStatusLink = allStatusLinks.find((statusLink) => {\n        const statusLinkRect = statusLink.getBoundingClientRect();\n        return statusLinkRect.top >= 44 && statusLinkRect.left >= 0; // 44 is the magic number for header height, not real\n      });\n      if (topmostStatusLink) {\n        topmostStatusLink.focus();\n        topmostStatusLink.scrollIntoViewIfNeeded?.();\n      }\n    }\n  });\n\n  // NOTE: I'm not sure if 'x' is the best shortcut for this, might change it later\n  // IDEA: x is for expand\n  useHotkeys('x', () => {\n    const activeStatus = document.activeElement.closest(\n      '.status-link, .status-focus',\n    );\n    if (activeStatus) {\n      const details = activeStatus.nextElementSibling;\n      if (details && details.tagName.toLowerCase() === 'details') {\n        details.open = !details.open;\n      }\n    }\n  });\n\n  const { nearReachStart } = useScroll({\n    scrollableRef,\n    distanceFromStartPx: 16,\n  });\n\n  const initialPageState = useRef(showMedia ? 'media+status' : 'status');\n\n  const handleMediaClick = useCallback(\n    (e, i, media, status) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setSearchParams({\n        media: i + 1,\n        mediaStatusID: status.id,\n      });\n    },\n    [id],\n  );\n\n  return (\n    <div\n      tabIndex=\"-1\"\n      ref={scrollableRef}\n      class={`status-deck deck contained ${\n        statuses.length > 1 ? 'padded-bottom' : ''\n      } ${initialPageState.current === 'status' ? 'slide-in' : ''} ${\n        viewMode ? `deck-view-${viewMode}` : ''\n      }`}\n      onAnimationEnd={(e) => {\n        // Fix the bounce effect when switching viewMode\n        // `slide-in` animation kicks in when switching viewMode\n        if (initialPageState.current === 'status') {\n          // e.target.classList.remove('slide-in');\n          initialPageState.current = null;\n        }\n      }}\n    >\n      <header\n        class={`${heroInView ? 'inview' : ''} ${\n          uiState === 'loading' ? 'loading' : ''\n        }`}\n        onDblClick={(e) => {\n          // reload statuses\n          states.reloadStatusPage++;\n        }}\n      >\n        {/* <div>\n            <Link class=\"button plain deck-close\" href={closeLink}>\n              <Icon icon=\"chevron-left\" size=\"xl\" />\n            </Link>\n          </div> */}\n        <div class=\"header-grid header-grid-2\">\n          <h1>\n            {!!/\\/s\\//i.test(snapStates.prevLocation?.pathname) && (\n              <button\n                type=\"button\"\n                class=\"plain deck-back\"\n                onClick={() => {\n                  history.back();\n                }}\n              >\n                <Icon icon=\"chevron-left\" size=\"xl\" />\n              </button>\n            )}\n            {!heroInView && heroStatus && uiState !== 'loading' ? (\n              <>\n                <span class=\"hero-heading\">\n                  <NameText\n                    account={heroStatus.account}\n                    instance={instance}\n                    showAvatar\n                    short\n                  />{' '}\n                  <span class=\"insignificant\">\n                    &bull;{' '}\n                    <RelativeTime\n                      datetime={heroStatus.createdAt}\n                      format=\"micro\"\n                    />\n                  </span>\n                </span>{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    heroStatusRef.current.scrollIntoView({\n                      behavior: 'smooth',\n                      block: 'start',\n                    });\n                  }}\n                  title=\"Go to main post\"\n                >\n                  <Icon\n                    icon={heroPointer === 'down' ? 'arrow-down' : 'arrow-up'}\n                  />\n                </button>\n              </>\n            ) : (\n              <>\n                Post{' '}\n                <button\n                  type=\"button\"\n                  class=\"ancestors-indicator light small\"\n                  onClick={(e) => {\n                    // Scroll to top\n                    e.preventDefault();\n                    e.stopPropagation();\n                    scrollableRef.current.scrollTo({\n                      top: 0,\n                      behavior: 'smooth',\n                    });\n                  }}\n                  hidden={!ancestors.length || nearReachStart}\n                  title={`${ancestors.length} posts above ‒ Go to top`}\n                >\n                  <Icon icon=\"arrow-up\" />\n                  {ancestors\n                    .filter(\n                      (a, i, arr) =>\n                        arr.findIndex((b) => b.accountID === a.accountID) === i,\n                    )\n                    .slice(0, 3)\n                    .map((ancestor) => (\n                      <Avatar\n                        key={ancestor.account.id}\n                        url={ancestor.account.avatar}\n                        alt={ancestor.account.displayName}\n                      />\n                    ))}\n                  {/* <Icon icon=\"comment\" />{' '} */}\n                  {ancestors.length > 3 && (\n                    <>\n                      {' '}\n                      <span class=\"insignificant\">\n                        {shortenNumber(ancestors.length)}\n                      </span>\n                    </>\n                  )}\n                </button>\n              </>\n            )}\n          </h1>\n          <div class=\"header-side\">\n            <Menu\n              align=\"end\"\n              portal={{\n                // Need this, else the menu click will cause scroll jump\n                target: scrollableRef.current,\n              }}\n              menuButton={\n                <button type=\"button\" class=\"button plain4\">\n                  <Icon icon=\"more\" alt=\"Actions\" size=\"xl\" />\n                </button>\n              }\n            >\n              <MenuItem\n                disabled={uiState === 'loading'}\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                <Icon icon=\"refresh\" />\n                <span>Refresh</span>\n              </MenuItem>\n              <MenuItem\n                className=\"menu-switch-view\"\n                onClick={() => {\n                  setViewMode(viewMode === 'full' ? null : 'full');\n                  searchParams.delete('media');\n                  searchParams.delete('media-only');\n                  if (viewMode === 'full') {\n                    searchParams.delete('view');\n                  } else {\n                    searchParams.set('view', 'full');\n                  }\n                  setSearchParams(searchParams);\n                }}\n              >\n                <Icon\n                  icon={\n                    {\n                      '': 'layout5',\n                      full: 'layout4',\n                    }[viewMode || '']\n                  }\n                />\n                <span>\n                  Switch to {viewMode === 'full' ? 'Side Peek' : 'Full'} view\n                </span>\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  // Click all buttons with class .spoiler but not .spoiling\n                  const buttons = Array.from(\n                    scrollableRef.current.querySelectorAll(\n                      'button.spoiler:not(.spoiling)',\n                    ),\n                  );\n                  buttons.forEach((button) => {\n                    button.click();\n                  });\n                }}\n              >\n                <Icon icon=\"eye-open\" /> <span>Show all sensitive content</span>\n              </MenuItem>\n              <MenuDivider />\n              <MenuHeader className=\"plain\">Experimental</MenuHeader>\n              <MenuItem\n                disabled={postSameInstance}\n                onClick={() => {\n                  const statusURL = getInstanceStatusURL(heroStatus.url);\n                  if (statusURL) {\n                    location.hash = statusURL;\n                  } else {\n                    alert('Unable to switch');\n                  }\n                }}\n              >\n                <Icon icon=\"transfer\" />\n                <small class=\"menu-double-lines\">\n                  Switch to post's instance (<b>{postInstance}</b>)\n                </small>\n              </MenuItem>\n            </Menu>\n            <Link class=\"button plain deck-close\" to={closeLink}>\n              <Icon icon=\"x\" size=\"xl\" />\n            </Link>\n          </div>\n        </div>\n      </header>\n      {!!statuses.length && heroStatus ? (\n        <ul\n          class={`timeline flat contextual grow ${\n            uiState === 'loading' ? 'loading' : ''\n          }`}\n        >\n          {statuses.slice(0, limit).map((status) => {\n            const {\n              id: statusID,\n              ancestor,\n              isThread,\n              descendant,\n              thread,\n              replies,\n              repliesCount,\n              weight,\n            } = status;\n            const isHero = statusID === id;\n            // const StatusParent = useCallback(\n            //   (props) =>\n            //     isThread || thread || ancestor ? (\n            //       <Link\n            //         class=\"status-link\"\n            //         to={\n            //           instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n            //         }\n            //         onClick={() => {\n            //           resetScrollPosition(statusID);\n            //         }}\n            //         {...props}\n            //       />\n            //     ) : (\n            //       <div class=\"status-focus\" tabIndex={0} {...props} />\n            //     ),\n            //   [isThread, thread],\n            // );\n            return (\n              <li\n                key={statusID}\n                ref={isHero ? heroStatusRef : null}\n                class={`${ancestor ? 'ancestor' : ''} ${\n                  descendant ? 'descendant' : ''\n                } ${thread ? 'thread' : ''} ${isHero ? 'hero' : ''}`}\n              >\n                {isHero ? (\n                  <>\n                    <InView\n                      threshold={0.1}\n                      onChange={onView}\n                      class=\"status-focus\"\n                      tabIndex={0}\n                    >\n                      <Status\n                        statusID={statusID}\n                        instance={instance}\n                        withinContext\n                        size=\"l\"\n                        enableTranslate\n                        forceTranslate={translate}\n                      />\n                    </InView>\n                    {uiState !== 'loading' && !authenticated ? (\n                      <div class=\"post-status-banner\">\n                        <p>\n                          You're not logged in. Interactions (reply, boost, etc)\n                          are not possible.\n                        </p>\n                        <Link to=\"/login\" class=\"button\">\n                          Log in\n                        </Link>\n                      </div>\n                    ) : (\n                      !sameInstance && (\n                        <div class=\"post-status-banner\">\n                          <p>\n                            This post is from another instance (\n                            <b>{instance}</b>). Interactions (reply, boost, etc)\n                            are not possible.\n                          </p>\n                          <button\n                            type=\"button\"\n                            disabled={uiState === 'loading'}\n                            onClick={() => {\n                              setUIState('loading');\n                              (async () => {\n                                try {\n                                  const results = await currentMasto.v2.search({\n                                    q: heroStatus.url,\n                                    type: 'statuses',\n                                    resolve: true,\n                                    limit: 1,\n                                  });\n                                  if (results.statuses.length) {\n                                    const status = results.statuses[0];\n                                    location.hash = currentInstance\n                                      ? `/${currentInstance}/s/${status.id}`\n                                      : `/s/${status.id}`;\n                                  } else {\n                                    throw new Error('No results');\n                                  }\n                                } catch (e) {\n                                  setUIState('default');\n                                  alert('Error: ' + e);\n                                  console.error(e);\n                                }\n                              })();\n                            }}\n                          >\n                            <Icon icon=\"transfer\" /> Switch to my instance to\n                            enable interactions\n                          </button>\n                        </div>\n                      )\n                    )}\n                  </>\n                ) : (\n                  // <StatusParent>\n                  <Link\n                    class=\"status-link\"\n                    to={\n                      instance ? `/${instance}/s/${statusID}` : `/s/${statusID}`\n                    }\n                    onClick={() => {\n                      resetScrollPosition(statusID);\n                    }}\n                  >\n                    <Status\n                      statusID={statusID}\n                      instance={instance}\n                      withinContext\n                      size={thread || ancestor ? 'm' : 's'}\n                      enableTranslate\n                      onMediaClick={handleMediaClick}\n                      onStatusLinkClick={() => {\n                        resetScrollPosition(statusID);\n                      }}\n                    />\n                    {ancestor && isThread && repliesCount > 1 && (\n                      <div class=\"replies-link\">\n                        <Icon icon=\"comment\" />{' '}\n                        <span title={repliesCount}>\n                          {shortenNumber(repliesCount)}\n                        </span>\n                      </div>\n                    )}{' '}\n                    {/* {replies?.length > LIMIT && (\n                        <div class=\"replies-link\">\n                          <Icon icon=\"comment\" />{' '}\n                          <span title={replies.length}>\n                            {shortenNumber(replies.length)}\n                          </span>\n                        </div>\n                      )} */}\n                    {/* </StatusParent> */}\n                  </Link>\n                )}\n                {descendant && replies?.length > 0 && (\n                  <SubComments\n                    instance={instance}\n                    replies={replies}\n                    hasParentThread={thread}\n                    level={1}\n                    accWeight={weight}\n                    openAll={\n                      totalDescendants.current < SUBCOMMENTS_OPEN_ALL_LIMIT\n                    }\n                  />\n                )}\n                {uiState === 'loading' &&\n                  isHero &&\n                  !!heroStatus?.repliesCount &&\n                  !hasDescendants && (\n                    <div class=\"status-loading\">\n                      <Loader />\n                    </div>\n                  )}\n                {uiState === 'error' &&\n                  isHero &&\n                  !!heroStatus?.repliesCount &&\n                  !hasDescendants && (\n                    <div class=\"status-error\">\n                      Unable to load replies.\n                      <br />\n                      <button\n                        type=\"button\"\n                        class=\"plain\"\n                        onClick={() => {\n                          states.reloadStatusPage++;\n                        }}\n                      >\n                        Try again\n                      </button>\n                    </div>\n                  )}\n              </li>\n            );\n          })}\n          {showMore > 0 && (\n            <li>\n              <button\n                type=\"button\"\n                class=\"plain block show-more\"\n                disabled={uiState === 'loading'}\n                onClick={() => setLimit((l) => l + LIMIT)}\n                style={{ marginBlockEnd: '6em' }}\n              >\n                <div class=\"ib\">\n                  {/* show avatars for first 5 statuses */}\n                  {statuses.slice(limit, limit + 5).map((status) => (\n                    <Avatar\n                      key={status.id}\n                      url={status.account.avatarStatic}\n                      // title={`${status.avatar.displayName} (@${status.avatar.acct})`}\n                    />\n                  ))}\n                </div>{' '}\n                <div class=\"ib\">\n                  Show more&hellip;{' '}\n                  <span class=\"tag\">\n                    {showMore > LIMIT ? `${LIMIT}+` : showMore}\n                  </span>\n                </div>\n              </button>\n            </li>\n          )}\n        </ul>\n      ) : (\n        <>\n          {uiState === 'loading' && (\n            <ul class=\"timeline flat contextual grow loading\">\n              <li>\n                <Status skeleton size=\"l\" />\n              </li>\n            </ul>\n          )}\n          {uiState === 'error' && (\n            <p class=\"ui-state\">\n              Unable to load post\n              <br />\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  states.reloadStatusPage++;\n                }}\n              >\n                Try again\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction SubComments({\n  replies,\n  instance,\n  hasParentThread,\n  level,\n  accWeight,\n  openAll,\n}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Total comments count, including sub-replies\n  const diveDeep = (replies) => {\n    return replies.reduce((acc, reply) => {\n      const { repliesCount, replies } = reply;\n      const count = replies?.length || repliesCount;\n      return acc + count + diveDeep(replies || []);\n    }, 0);\n  };\n  const totalComments = replies.length + diveDeep(replies);\n  const sameCount = replies.length === totalComments;\n\n  // Get the first 3 accounts, unique by id\n  const accounts = replies\n    .map((r) => r.account)\n    .filter((a, i, arr) => arr.findIndex((b) => b.id === a.id) === i)\n    .slice(0, 3);\n\n  const totalWeight = useMemo(() => {\n    return replies?.reduce((acc, reply) => {\n      return acc + reply?.weight;\n    }, accWeight);\n  }, [accWeight, replies?.length]);\n\n  let open = false;\n  if (openAll) {\n    open = true;\n  } else if (totalWeight <= MAX_WEIGHT) {\n    open = true;\n  } else if (!hasParentThread && totalComments === 1) {\n    const shortReply = calcStatusWeight(replies[0]) < 2;\n    if (shortReply) open = true;\n  }\n  const openBefore = cachedRepliesToggle[replies[0].id];\n\n  const handleMediaClick = useCallback((e, i, media, status) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setSearchParams({\n      media: i + 1,\n      mediaStatusID: status.id,\n    });\n  }, []);\n\n  const detailsRef = useRef();\n  useLayoutEffect(() => {\n    function handleScroll(e) {\n      e.target.dataset.scrollLeft = e.target.scrollLeft;\n    }\n    detailsRef.current?.addEventListener('scroll', handleScroll, {\n      passive: true,\n    });\n    return () => {\n      detailsRef.current?.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  return (\n    <details\n      ref={detailsRef}\n      class=\"replies\"\n      open={openBefore || open}\n      onToggle={(e) => {\n        const { open } = e.target;\n        // use first reply as ID\n        cachedRepliesToggle[replies[0].id] = open;\n      }}\n      style={{\n        '--comments-level': level,\n      }}\n      data-comments-level={level}\n      data-comments-level-overflow={level > 4}\n    >\n      <summary class=\"replies-summary\" hidden={open}>\n        <span class=\"avatars\">\n          {accounts.map((a) => (\n            <Avatar\n              key={a.id}\n              url={a.avatarStatic}\n              title={`${a.displayName} @${a.username}`}\n              squircle={a?.bot}\n            />\n          ))}\n        </span>\n        <span>\n          <span title={replies.length}>{shortenNumber(replies.length)}</span>{' '}\n          repl\n          {replies.length === 1 ? 'y' : 'ies'}\n        </span>\n        {!sameCount && totalComments > 1 && (\n          <>\n            {' '}\n            &middot;{' '}\n            <span>\n              <span title={totalComments}>{shortenNumber(totalComments)}</span>{' '}\n              comment\n              {totalComments === 1 ? '' : 's'}\n            </span>\n          </>\n        )}\n      </summary>\n      <ul>\n        {replies.map((r) => (\n          <li key={r.id}>\n            <Link\n              class=\"status-link\"\n              to={instance ? `/${instance}/s/${r.id}` : `/s/${r.id}`}\n              onClick={() => {\n                resetScrollPosition(r.id);\n              }}\n            >\n              {/* <div class=\"status-focus\" tabIndex={0}> */}\n              <Status\n                statusID={r.id}\n                instance={instance}\n                withinContext\n                size=\"s\"\n                enableTranslate\n                onMediaClick={handleMediaClick}\n              />\n              {!r.replies?.length && r.repliesCount > 0 && (\n                <div class=\"replies-link\">\n                  <Icon icon=\"comment\" />{' '}\n                  <span title={r.repliesCount}>\n                    {shortenNumber(r.repliesCount)}\n                  </span>\n                </div>\n              )}\n              {/* </div> */}\n            </Link>\n            {r.replies?.length && (\n              <SubComments\n                instance={instance}\n                replies={r.replies}\n                level={level + 1}\n                accWeight={!open ? r.weight : totalWeight}\n                openAll={openAll}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </details>\n  );\n}\n\nconst MEDIA_VIRTUAL_LENGTH = 140;\nconst POLL_VIRTUAL_LENGTH = 35;\nconst CARD_VIRTUAL_LENGTH = 70;\nconst WEIGHT_SEGMENT = 140;\nconst statusWeightCache = new Map();\nfunction calcStatusWeight(status) {\n  const cachedWeight = statusWeightCache.get(status.id);\n  if (cachedWeight) return cachedWeight;\n  const { spoilerText, content, mediaAttachments, poll, card } = status;\n  const length = htmlContentLength(spoilerText + content);\n  const mediaLength = mediaAttachments?.length ? MEDIA_VIRTUAL_LENGTH : 0;\n  const pollLength = (poll?.options?.length || 0) * POLL_VIRTUAL_LENGTH;\n  const cardLength =\n    card && (mediaAttachments?.length || poll?.options?.length)\n      ? 0\n      : CARD_VIRTUAL_LENGTH;\n  const totalLength = length + mediaLength + pollLength + cardLength;\n  const weight = totalLength / WEIGHT_SEGMENT;\n  statusWeightCache.set(status.id, weight);\n  return weight;\n}\n\nexport default memo(StatusPage);\n","export default \"__VITE_ASSET__9f719d7a__\"","export default \"__VITE_ASSET__dbb57588__\"","export default \"__VITE_ASSET__61903085__\"","export default \"__VITE_ASSET__f411f03b__\"","export default \"__VITE_ASSET__57516dc0__\"","export default \"__VITE_ASSET__0bd95074__\"","import './welcome.css';\n\nimport boostsCarouselUrl from '../assets/features/boosts-carousel.jpg';\nimport groupedNotificationsUrl from '../assets/features/grouped-notifications.jpg';\nimport multiColumnUrl from '../assets/features/multi-column.jpg';\nimport multiHashtagTimelineUrl from '../assets/features/multi-hashtag-timeline.jpg';\nimport nestedCommentsThreadUrl from '../assets/features/nested-comments-thread.jpg';\nimport logoText from '../assets/logo-text.svg';\nimport logo from '../assets/logo.svg';\nimport Link from '../components/link';\nimport states from '../utils/states';\nimport useTitle from '../utils/useTitle';\n\nfunction Welcome() {\n  useTitle(null, ['/', '/welcome']);\n  return (\n    <main id=\"welcome\">\n      <div class=\"hero-container\">\n        <h1>\n          <img\n            src={logo}\n            alt=\"\"\n            width=\"200\"\n            height=\"200\"\n            style={{\n              aspectRatio: '1/1',\n              marginBlockEnd: -16,\n            }}\n          />\n          <img src={logoText} alt=\"Phanpy\" width=\"250\" />\n        </h1>\n        <p>\n          <big>\n            <b>\n              <Link to=\"/login\" class=\"button\">\n                Log in\n              </Link>\n            </b>\n          </big>\n        </p>\n        <p class=\"desc\">A minimalistic opinionated Mastodon web client.</p>\n      </div>\n      <div id=\"why-container\">\n        <div class=\"sections\">\n          <section>\n            <img\n              src={boostsCarouselUrl}\n              alt=\"Screenshot of Boosts Carousel\"\n              loading=\"lazy\"\n            />\n            <h4>Boosts Carousel</h4>\n            <p>\n              Visually separate original posts and re-shared posts (boosted\n              posts).\n            </p>\n          </section>\n          <section>\n            <img\n              src={nestedCommentsThreadUrl}\n              alt=\"Screenshot of nested comments thread\"\n              loading=\"lazy\"\n            />\n            <h4>Nested comments thread</h4>\n            <p>Effortlessly follow conversations. Semi-collapsible replies.</p>\n          </section>\n          <section>\n            <img\n              src={groupedNotificationsUrl}\n              alt=\"Screenshot of grouped notifications\"\n              loading=\"lazy\"\n            />\n            <h4>Grouped notifications</h4>\n            <p>\n              Similar notifications are grouped and collapsed to reduce clutter.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiColumnUrl}\n              alt=\"Screenshot of multi-column UI\"\n              loading=\"lazy\"\n            />\n            <h4>Single or multi-column</h4>\n            <p>\n              By default, single column for zen-mode seekers. Configurable\n              multi-column for power users.\n            </p>\n          </section>\n          <section>\n            <img\n              src={multiHashtagTimelineUrl}\n              alt=\"Screenshot of multi-hashtag timeline with a form to add more hashtags\"\n              loading=\"lazy\"\n            />\n            <h4>Multi-hashtag timeline</h4>\n            <p>Up to 5 hashtags combined into a single timeline.</p>\n          </section>\n        </div>\n      </div>\n      <hr />\n      <p>\n        <a href=\"https://github.com/cheeaun/phanpy\" target=\"_blank\">\n          Built\n        </a>{' '}\n        by{' '}\n        <a\n          href=\"https://mastodon.social/@cheeaun\"\n          target=\"_blank\"\n          onClick={(e) => {\n            e.preventDefault();\n            states.showAccount = 'cheeaun@mastodon.social';\n          }}\n        >\n          @cheeaun\n        </a>\n        .{' '}\n        <a\n          href=\"https://github.com/cheeaun/phanpy/blob/main/PRIVACY.MD\"\n          target=\"_blank\"\n        >\n          Privacy Policy\n        </a>\n        .\n      </p>\n    </main>\n  );\n}\n\nexport default Welcome;\n","import './app.css';\n\nimport {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'preact/hooks';\nimport {\n  matchPath,\n  Route,\n  Routes,\n  useLocation,\n  useNavigate,\n  useParams,\n} from 'react-router-dom';\nimport 'swiped-events';\nimport { useSnapshot } from 'valtio';\n\nimport AccountSheet from './components/account-sheet';\nimport Compose from './components/compose';\nimport Drafts from './components/drafts';\nimport Icon, { ICONS } from './components/icon';\nimport Loader from './components/loader';\nimport MediaModal from './components/media-modal';\nimport Modal from './components/modal';\nimport Shortcuts from './components/shortcuts';\nimport ShortcutsSettings from './components/shortcuts-settings';\nimport NotFound from './pages/404';\nimport AccountStatuses from './pages/account-statuses';\nimport Accounts from './pages/accounts';\nimport Bookmarks from './pages/bookmarks';\nimport Favourites from './pages/favourites';\nimport FollowedHashtags from './pages/followed-hashtags';\nimport Following from './pages/following';\nimport Hashtag from './pages/hashtag';\nimport Home from './pages/home';\nimport HttpRoute from './pages/HttpRoute';\nimport List from './pages/list';\nimport Lists from './pages/lists';\nimport Login from './pages/login';\nimport Mentions from './pages/mentions';\nimport Notifications from './pages/notifications';\nimport Public from './pages/public';\nimport Search from './pages/search';\nimport Settings from './pages/settings';\nimport Status from './pages/status';\nimport Trending from './pages/trending';\nimport Welcome from './pages/welcome';\nimport {\n  api,\n  initAccount,\n  initClient,\n  initInstance,\n  initPreferences,\n} from './utils/api';\nimport { getAccessToken } from './utils/auth';\nimport openCompose from './utils/open-compose';\nimport showToast from './utils/show-toast';\nimport states, { getStatus, saveStatus } from './utils/states';\nimport store from './utils/store';\nimport { getCurrentAccount } from './utils/store-utils';\nimport useInterval from './utils/useInterval';\nimport usePageVisibility from './utils/usePageVisibility';\n\nwindow.__STATES__ = states;\n\n// Preload icons\n// There's probably a better way to do this\n// Related: https://github.com/vitejs/vite/issues/10600\nsetTimeout(() => {\n  for (const icon in ICONS) {\n    if (Array.isArray(ICONS[icon])) {\n      ICONS[icon][0]?.();\n    } else {\n      ICONS[icon]?.();\n    }\n  }\n}, 5000);\n\nfunction App() {\n  const snapStates = useSnapshot(states);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [uiState, setUIState] = useState('loading');\n  const navigate = useNavigate();\n\n  useLayoutEffect(() => {\n    const theme = store.local.get('theme');\n    if (theme) {\n      document.documentElement.classList.add(`is-${theme}`);\n      document\n        .querySelector('meta[name=\"color-scheme\"]')\n        .setAttribute('content', theme === 'auto' ? 'dark light' : theme);\n    }\n    const textSize = store.local.get('textSize');\n    if (textSize) {\n      document.documentElement.style.setProperty(\n        '--text-size',\n        `${textSize}px`,\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    const instanceURL = store.local.get('instanceURL');\n    const code = decodeURIComponent(\n      (window.location.search.match(/code=([^&]+)/) || [, ''])[1],\n    );\n\n    if (code) {\n      console.log({ code });\n      // Clear the code from the URL\n      // window.history.replaceState({}, document.title, '/');\n\n      const clientID = store.session.get('clientID');\n      const clientSecret = store.session.get('clientSecret');\n\n      (async () => {\n        setUIState('loading');\n        const { access_token: accessToken } = await getAccessToken({\n          instanceURL,\n          client_id: clientID,\n          client_secret: clientSecret,\n          code,\n        });\n\n        const masto = initClient({ instance: instanceURL, accessToken });\n        await Promise.allSettled([\n          initInstance(masto, instanceURL),\n          initAccount(masto, instanceURL, accessToken),\n        ]);\n        initPreferences(masto);\n\n        setIsLoggedIn(true);\n        setUIState('default');\n      })();\n    } else {\n      const account = getCurrentAccount();\n      if (account) {\n        store.session.set('currentAccount', account.info.id);\n        const { masto, instance } = api({ account });\n        console.log('masto', masto);\n        initPreferences(masto);\n        setUIState('loading');\n        (async () => {\n          try {\n            await initInstance(masto, instance);\n          } catch (e) {\n          } finally {\n            setIsLoggedIn(true);\n            setUIState('default');\n          }\n        })();\n      } else {\n        setUIState('default');\n      }\n    }\n  }, []);\n\n  let location = useLocation();\n  states.currentLocation = location.pathname;\n\n  const focusDeck = () => {\n    let timer = setTimeout(() => {\n      const columns = document.getElementById('columns');\n      if (columns) {\n        // Focus first column\n        // columns.querySelector('.deck-container')?.focus?.();\n      } else {\n        const backDrop = document.querySelector('.deck-backdrop');\n        if (backDrop) return;\n        // Focus last deck\n        const pages = document.querySelectorAll('.deck-container');\n        const page = pages[pages.length - 1]; // last one\n        if (page && page.tabIndex === -1) {\n          console.log('FOCUS', page);\n          page.focus();\n        }\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  };\n  useEffect(focusDeck, [location]);\n  const showModal =\n    snapStates.showCompose ||\n    snapStates.showSettings ||\n    snapStates.showAccounts ||\n    snapStates.showAccount ||\n    snapStates.showDrafts ||\n    snapStates.showMediaModal ||\n    snapStates.showShortcutsSettings;\n  useEffect(() => {\n    if (!showModal) focusDeck();\n  }, [showModal]);\n\n  const { prevLocation } = snapStates;\n  const backgroundLocation = useRef(prevLocation || null);\n  const isModalPage =\n    matchPath('/:instance/s/:id', location.pathname) ||\n    matchPath('/s/:id', location.pathname);\n  if (isModalPage) {\n    if (!backgroundLocation.current) backgroundLocation.current = prevLocation;\n  } else {\n    backgroundLocation.current = null;\n  }\n  console.debug({\n    backgroundLocation: backgroundLocation.current,\n    location,\n  });\n\n  if (/\\/https?:/.test(location.pathname)) {\n    return <HttpRoute />;\n  }\n\n  const nonRootLocation = useMemo(() => {\n    const { pathname } = location;\n    return !/^\\/(login|welcome)/.test(pathname);\n  }, [location]);\n\n  // Change #app dataset based on snapStates.settings.shortcutsViewMode\n  useEffect(() => {\n    const $app = document.getElementById('app');\n    if ($app) {\n      $app.dataset.shortcutsViewMode = snapStates.settings.shortcutsViewMode;\n    }\n  }, [snapStates.settings.shortcutsViewMode]);\n\n  // Add/Remove cloak class to body\n  useEffect(() => {\n    const $body = document.body;\n    $body.classList.toggle('cloak', snapStates.settings.cloakMode);\n  }, [snapStates.settings.cloakMode]);\n\n  return (\n    <>\n      <Routes location={nonRootLocation || location}>\n        <Route\n          path=\"/\"\n          element={\n            isLoggedIn ? (\n              <Home />\n            ) : uiState === 'loading' ? (\n              <Loader id=\"loader-root\" />\n            ) : (\n              <Welcome />\n            )\n          }\n        />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/welcome\" element={<Welcome />} />\n      </Routes>\n      <Routes location={backgroundLocation.current || location}>\n        {isLoggedIn && (\n          <Route path=\"/notifications\" element={<Notifications />} />\n        )}\n        {isLoggedIn && <Route path=\"/mentions\" element={<Mentions />} />}\n        {isLoggedIn && <Route path=\"/following\" element={<Following />} />}\n        {isLoggedIn && <Route path=\"/b\" element={<Bookmarks />} />}\n        {isLoggedIn && <Route path=\"/f\" element={<Favourites />} />}\n        {isLoggedIn && (\n          <Route path=\"/l\">\n            <Route index element={<Lists />} />\n            <Route path=\":id\" element={<List />} />\n          </Route>\n        )}\n        {isLoggedIn && <Route path=\"/ft\" element={<FollowedHashtags />} />}\n        <Route path=\"/:instance?/t/:hashtag\" element={<Hashtag />} />\n        <Route path=\"/:instance?/a/:id\" element={<AccountStatuses />} />\n        <Route path=\"/:instance?/p\">\n          <Route index element={<Public />} />\n          <Route path=\"l\" element={<Public local />} />\n        </Route>\n        <Route path=\"/:instance?/trending\" element={<Trending />} />\n        <Route path=\"/:instance?/search\" element={<Search />} />\n        {/* <Route path=\"/:anything\" element={<NotFound />} /> */}\n      </Routes>\n      {uiState === 'default' && (\n        <Routes>\n          <Route path=\"/:instance?/s/:id\" element={<StatusRoute />} />\n        </Routes>\n      )}\n      {isLoggedIn && (\n        <button\n          type=\"button\"\n          id=\"compose-button\"\n          onClick={(e) => {\n            if (e.shiftKey) {\n              const newWin = openCompose();\n              if (!newWin) {\n                alert('Looks like your browser is blocking popups.');\n                states.showCompose = true;\n              }\n            } else {\n              states.showCompose = true;\n            }\n          }}\n        >\n          <Icon icon=\"quill\" size=\"xl\" alt=\"Compose\" />\n        </button>\n      )}\n      {isLoggedIn &&\n        !snapStates.settings.shortcutsColumnsMode &&\n        snapStates.settings.shortcutsViewMode !== 'multi-column' && (\n          <Shortcuts />\n        )}\n      {!!snapStates.showCompose && (\n        <Modal>\n          <Compose\n            replyToStatus={\n              typeof snapStates.showCompose !== 'boolean'\n                ? snapStates.showCompose.replyToStatus\n                : window.__COMPOSE__?.replyToStatus || null\n            }\n            editStatus={\n              states.showCompose?.editStatus ||\n              window.__COMPOSE__?.editStatus ||\n              null\n            }\n            draftStatus={\n              states.showCompose?.draftStatus ||\n              window.__COMPOSE__?.draftStatus ||\n              null\n            }\n            onClose={(results) => {\n              const { newStatus, instance } = results || {};\n              states.showCompose = false;\n              window.__COMPOSE__ = null;\n              if (newStatus) {\n                states.reloadStatusPage++;\n                showToast({\n                  text: 'Post published. Check it out.',\n                  delay: 1000,\n                  duration: 10_000, // 10 seconds\n                  onClick: (toast) => {\n                    toast.hideToast();\n                    states.prevLocation = location;\n                    navigate(\n                      instance\n                        ? `/${instance}/s/${newStatus.id}`\n                        : `/s/${newStatus.id}`,\n                    );\n                  },\n                });\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showSettings && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showSettings = false;\n            }\n          }}\n        >\n          <Settings\n            onClose={() => {\n              states.showSettings = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccounts && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showAccounts = false;\n            }\n          }}\n        >\n          <Accounts\n            onClose={() => {\n              states.showAccounts = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showAccount && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showAccount = false;\n            }\n          }}\n        >\n          <AccountSheet\n            account={snapStates.showAccount?.account || snapStates.showAccount}\n            instance={snapStates.showAccount?.instance}\n            onClose={({ destination }) => {\n              states.showAccount = false;\n              if (destination) {\n                states.showAccounts = false;\n              }\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showDrafts && (\n        <Modal\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showDrafts = false;\n            }\n          }}\n        >\n          <Drafts onClose={() => (states.showDrafts = false)} />\n        </Modal>\n      )}\n      {!!snapStates.showMediaModal && (\n        <Modal\n          onClick={(e) => {\n            if (\n              e.target === e.currentTarget ||\n              e.target.classList.contains('media')\n            ) {\n              states.showMediaModal = false;\n            }\n          }}\n        >\n          <MediaModal\n            mediaAttachments={snapStates.showMediaModal.mediaAttachments}\n            instance={snapStates.showMediaModal.instance}\n            index={snapStates.showMediaModal.index}\n            statusID={snapStates.showMediaModal.statusID}\n            onClose={() => {\n              states.showMediaModal = false;\n            }}\n          />\n        </Modal>\n      )}\n      {!!snapStates.showShortcutsSettings && (\n        <Modal\n          class=\"light\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              states.showShortcutsSettings = false;\n            }\n          }}\n        >\n          <ShortcutsSettings\n            onClose={() => (states.showShortcutsSettings = false)}\n          />\n        </Modal>\n      )}\n      <BackgroundService isLoggedIn={isLoggedIn} />\n    </>\n  );\n}\n\nfunction BackgroundService({ isLoggedIn }) {\n  // Notifications service\n  // - WebSocket to receive notifications when page is visible\n  const [visible, setVisible] = useState(true);\n  usePageVisibility(setVisible);\n  const snapStates = useSnapshot(states);\n  const notificationStream = useRef();\n  useEffect(() => {\n    if (isLoggedIn && visible) {\n      const { masto, instance } = api();\n      (async () => {\n        // 1. Get the latest notification\n        if (states.notificationsLast) {\n          const notificationsIterator = masto.v1.notifications.list({\n            limit: 1,\n            since_id: states.notificationsLast.id,\n            types: snapStates.settings.onlyMentions ? ['mention'] : undefined,\n          });\n          const { value: notifications } = await notificationsIterator.next();\n          if (notifications?.length) {\n            states.notificationsShowNew = true;\n          }\n        }\n\n        // 2. Start streaming\n        notificationStream.current = await masto.ws.stream(\n          '/api/v1/streaming',\n          {\n            stream: 'user:notification',\n          },\n        );\n        console.log('🎏 Streaming notification', notificationStream.current);\n\n        notificationStream.current.on('notification', (notification) => {\n          console.log('🔔🔔 Notification', notification);\n          if (notification.status) {\n            saveStatus(notification.status, instance, {\n              skipThreading: true,\n            });\n          }\n          if (\n            !snapStates.settings.onlyMentions ||\n            notification.type === 'mention'\n          ) {\n            states.notificationsShowNew = true;\n          }\n        });\n\n        notificationStream.current.ws.onclose = () => {\n          console.log('🔔🔔 Notification stream closed');\n        };\n      })();\n    }\n    return () => {\n      if (notificationStream.current) {\n        notificationStream.current.ws.close();\n        notificationStream.current = null;\n      }\n    };\n  }, [visible, isLoggedIn, snapStates.settings.onlyMentions]);\n\n  // Check for updates service\n  const lastCheckDate = useRef();\n  const checkForUpdates = () => {\n    lastCheckDate.current = Date.now();\n    console.log('✨ Check app update');\n    fetch('./version.json')\n      .then((r) => r.json())\n      .then((info) => {\n        if (info) states.appVersion = info;\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  useInterval(checkForUpdates, visible && 1000 * 60 * 30); // 30 minutes\n  usePageVisibility((visible) => {\n    if (visible) {\n      if (!lastCheckDate.current) {\n        checkForUpdates();\n      } else {\n        const diff = Date.now() - lastCheckDate.current;\n        if (diff > 1000 * 60 * 60) {\n          // 1 hour\n          checkForUpdates();\n        }\n      }\n    }\n  });\n\n  return null;\n}\n\nfunction StatusRoute() {\n  const params = useParams();\n  const { id, instance } = params;\n  return <Status id={id} instance={instance} />;\n}\n\nexport { App };\n","import './index.css';\n\nimport './cloak-mode.css';\n\nimport { render } from 'preact';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './app';\n\nif (import.meta.env.DEV) {\n  import('preact/debug');\n}\n\nrender(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('app'),\n);\n\n// Storage cleanup\nsetTimeout(() => {\n  try {\n    // Clean up iconify localStorage\n    Object.keys(localStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        localStorage.removeItem(key);\n      }\n    });\n    Object.keys(sessionStorage).forEach((key) => {\n      if (key.startsWith('iconify')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n\n    // Clean up old settings key\n    localStorage.removeItem('settings:boostsCarousel');\n  } catch (e) {}\n}, 5000);\n\nwindow.__CLOAK__ = () => {\n  document.body.classList.toggle('cloak');\n};\n"],"names":["ListAddEdit","list","onClose","masto","api","uiState","setUIState","useState","editMode","nameFieldRef","useRef","repliesPolicyFieldRef","exclusiveFieldRef","useEffect","current","value","title","repliesPolicy","checked","exclusive","supportsExclusive","supports","_jsxs","class","children","_jsx","type","onClick","Icon","icon","onSubmit","e","preventDefault","formData","FormData","target","get","console","listResult","replies_policy","ref","MenuConfirm","disabled","alert","MUTE_DURATIONS","MUTE_DURATIONS_LABELS","AccountInfo","account","fetchAccount","standalone","instance","authenticated","isString","info","setInfo","states","accounts","id","error","acct","avatar","avatarStatic","bot","createdAt","displayName","emojis","fields","followersCount","followingCount","group","lastStatusAt","locked","note","statusesCount","url","username","headerIsAvatar","header","headerStatic","test","headerCornerColors","setHeaderCornerColors","href","_Fragment","AccountBlock","avatarSize","src","alt","removeAttribute","crossOrigin","canvas","createElement","ctx","getContext","width","height","rgbColors","pixelDimension","data","colors","r","g","b","i","dataLength","length","a","color","map","lightenRGB","internal","handleContentLinks","enhanceContent","__html","name","verifiedAt","text","dangerouslySetInnerHTML","shortenNumber","Link","hideAllModals","to","niceDateTime","RelatedActions","currentInstance","sameInstance","currentMasto","currentAuthenticated","accountID","blocking","following","showingReblogs","notifying","followedBy","blockedBy","muting","mutingNotifications","requested","domainBlocking","endorsed","relationship","store","currentInfo","currentID","q","results","limit","log","setIsSelf","setRelationshipUIState","setFamiliarFollowers","fetchRelationships","relationships","followers","setRelationship","updateAccount","isSelf","menuInstanceRef","setShowTranslatedBio","familiarFollowers","follower","showTranslatedBio","showAddRemoveLists","Avatar","Menu","_b","_a","containerProps","overflow","MenuItem","menuButton","loading","size","MenuDivider","setShowAddRemoveLists","niceAccountURL","showToast","navigator","clipboard","share","newRelationship","SubMenu","label","duration","confirmLabel","relationshipUIState","Loader","menuItemClassName","v1","Modal","AddRemoveListsSheet","luminence","alpha","host","pathname","urlObj","path","Math","fieldsText","getHTMLText","TranslationBlock","lists","setLists","listsContainingAccount","setListsContainingAccount","reload","useReducer","c","forceTranslate","lists2","l","inList","showListAddEditModal","some","removeAccount","accountIds","setShowListAddEditModal","result","AccountSheet","propInstance","escRef","useHotkeys","closest","destination","lookup","skip_webfinger","v2","search","resolve","Drafts","drafts","setDrafts","reloadCount","keys","db","ns","getCurrentAccountNS","ownKeys","filter","key","startsWith","getMany","sort","Date","updatedAt","getTime","hasDrafts","abrupt","hidden","draft","draftStatus","replyTo","updatedAtDate","align","replyToStatus","window","MiniDraft","poll","status","spoilerText","mediaAttachments","hasPoll","options","hasMedia","firstImageMedia","media","image","file","objectURL","createObjectURL","hasPollOrMedia","style","MediaModal","statusID","index","carouselRef","currentIndex","setCurrentIndex","carouselFocusItem","useLayoutEffect","scrollIntoView","prevStatusID","scrollLeft","clientWidth","differentStatusID","scrollTo","left","behavior","focus","showControls","setShowControls","handleSwipe","addEventListener","removeEventListener","showMediaAlt","setShowMediaAlt","handleScroll","round","passive","timer","setTimeout","clearTimeout","tabIndex","classList","contains","blurhash","rgbAverageColor","getBlurHashAverageColor","join","tabindex","currentTarget","description","Media","showOriginal","stopPropagation","position","boundingBoxPadding","gap","menuClassName","MenuLink","remoteUrl","matchMedia","matches","MediaAltModal","setForceTranslate","whiteSpace","floatingButtonUrl","multiColumnUrl$1","tabMenuBarUrl","AsyncText","setText","Promise","then","SHORTCUTS_LIMIT","TYPES","TYPE_TEXT","notifications","public","bookmarks","favourites","hashtag","trending","mentions","TYPE_PARAMS","placeholder","notRequired","pattern","SHORTCUTS_META","_","mem","fetch","cacheKey","local","subtitle","query","split","ShortcutsSettings","snapStates","useSnapshot","shortcuts","followedHashtags","setFollowedHashtags","showForm","setShowForm","showImportExport","setShowImportExport","iterator","tags","done","push","imgURL","multiColumnUrl","onChange","settings","shortcut","values","shortcutsArr","Array","temp","justifyContent","alignItems","shortcutIndex","ImportExport","currentType","formRef","form","input","forEach","setCurrentType","mode","required","defaultValue","undefined","tag","spellcheck","shortcutsStr","useMemo","parsedImportShortcutStr","setImportUIState","importUIState","decompressFromEncodedURIComponent","importShortcutStr","parsed","JSON","isArray","err","hasCurrentSettings","setImportShortcutStr","s","opacity","Object","nonUniqueShortcuts","menuFooter","every","exceededLimit","newShortcuts","Shortcuts","menuRef","formattedShortcuts","pin","Boolean","navigate","useNavigate","handler","parseInt","closeMenu","shortcutsViewMode","page","document","getElementById","updatesButton","instanceRef","viewScroll","Menu2","props","useWindowSize","safeBoundingBoxPadding","repositionFlag","groupBoosts","newValues","boostStash","serialBoosts","item","reblog","boostStashID","items","half","floor","slice","dedupeBoosts","boostedStatusIDs","filteredItems","statusKey","boosterID","warn","groupContext","contexts","contextIndex","t","repliedItem","j","self","splice","context","inReplyToId","firstItemAccountID","newItems","appliedContextIndices","contextItems","aDate","bDate","i2","usePageVisibility","fn","deps","savedCallback","handleVisibilityChange","visibilityState","useScroll","scrollableRef","distanceFromStart","distanceFromEnd","scrollThresholdStart","scrollThresholdEnd","direction","distanceFromStartPx","_distanceFromStartPx","distanceFromEndPx","_distanceFromEndPx","scrollDirection","setScrollDirection","reachStart","setReachStart","reachEnd","setReachEnd","nearReachStart","setNearReachStart","nearReachEnd","setNearReachEnd","isVertical","scrollableElement","previousScrollStart","scrollTop","onScroll","scrollHeight","scrollWidth","clientHeight","scrollStart","scrollDimension","clientDimension","scrollDistance","abs","min","init","dispatchEvent","Event","NavMenu","currentAccount","setCurrentAccount","moreThanOneAccount","setMoreThanOneAccount","getJSON","acc","find","session","showFollowing","shortcutsColumnsMode","bindLongPress","useLongPress","showAccounts","threshold","detect","cancelOnMovement","buttonRef","menuState","setMenuState","open","state","onContextMenu","squircle","ControlledMenu","anchorRef","zIndex","portal","body","unmountOnClose","appVersion","commitHash","__COMMIT_HASH__","confirm","location","notificationsShowNew","showShortcutsSettings","showSettings","Timeline","titleComponent","emptyText","errorText","useItemID","boostsCarousel","fetchItems","checkForUpdates","checkForUpdatesInterval","headerStart","headerEnd","timelineStart","allowFilters","refresh","setItems","showMore","setShowMore","showNew","setShowNew","visible","setVisible","debug","firstLoad","loadItems","useDebouncedCallback","items2","itemsSelector","jRef","activeItem","activeItemRect","getBoundingClientRect","allItems","from","querySelectorAll","activeItemIndex","indexOf","nextItem","itemRect","topmostItem","top","kRef","prevItem","findLast","oRef","isHovering","idle","useIdle","useCallback","disableHoverCheck","inBackground","loadOrCheckUpdates","autoRefresh","visible2","timeDiff","hasUpdate","useInterval","lastHiddenTime","node","hiddenUI","_pinned","actualStatusID","isCarousel","StatusCarousel","title2","_filtered","statusID2","reblog2","actualStatusID2","url2","Status","contentTextWeight","isMiddle","showCompact","manyItems","_differentAuthor","TimelineStatusCompact","InView","inView","className","statusPeek","sKey","statusPeekText","statusThreadNumber","LIMIT","AccountStatuses","params","useParams","searchParams","setSearchParams","useSearchParams","excludeReplies","excludeBoosts","tagged","accountStatusesIterator","fetchAccountStatuses","pinnedStatuses","listStatuses","pinned","next","saveStatus","pinnedStatusesIds","exclude_replies","exclude_reblogs","only_media","setAccount","featuredTags","setFeaturedTags","useTitle","featuredTags2","filterBarRef","TimelineStart","cachedAccount","filtered","active","accountInstance","querySelector","allowSwitch","domain","masto2","id2","Accounts","currentDefault","setCurrentDefault","x","isCurrent","isDefault","onDblClick","NameText","showAcct","set","subMenu","Bookmarks","bookmarksIterator","fetchBookmarks","Favourites","favouritesIterator","fetchFavourites","FollowedHashtags","followedTags","localeCompare","filteredItem","filterContext","currentAccountID","appliedFilters","f","hasContext","includes","expiresAt","filterAction","isHidden","filterTitles","isWarn","titlesStr","Following","homeIterator","latestItem","ws","streamUser","stream","on","fetchHome","TAGS_LIMIT_PER_MODE","TOTAL_TAGS_LIMIT","Hashtags","columnMode","hashtags","trim","hashtagTitle","maxID","fetchHashtags","timelines","listHashtag","any","maxId","since_id","followUIState","setFollowUIState","reachLimit","setDownOverflow","unfollow","catch","finally","FocusableItem","newHashtag","autocorrect","MenuGroup","newInstance","List","listIterator","fetchList","listList","setList","showManageMembersModal","setShowManageMembersModal","ListManageMembers","MEMBERS_LIMIT","listID","members","setMembers","membersIterator","fetchMembers","member","as","RemoveAddButton","removed","setRemoved","emptySearchParams","URLSearchParams","Mentions","stateType","setStateType","mentionsIterator","fetchMentions","types","conversationsIterator","latestConversationItem","lastStatus","fetchConversations","args","FollowRequestButtons","requestState","setRequestState","hasRelationship","rel","followRequests","authorize","Error","NOTIFICATION_ICONS","mention","follow","follow_request","favourite","update","contentText","count","reblog_reply","favourite_reply","Notification","notification","_accounts","_statuses","isVoted","voted","isReplyToOthers","inReplyToAccountId","favsCount","reblogsCount","_types","toLocaleString","showAvatar","RelativeTime","datetime","format","showAccount","groupNotifications","notificationsMap","cleanNotifications","date","toLocaleDateString","virtualType","mappedNotification","mappedAccount","reverse","n","notificationsMap2","cleanNotifications2","Notifications","setFollowRequests","announcements","setAnnouncements","notificationsIterator","excludeTypes","allNotifications","groupedNotifications","notificationsLast","notificationsLastFetchTime","fetchFollowRequests","loadFollowRequests","requests","fetchAnnouncements","loadNotifications","fetchNotificationsPromise","fetchNotifications","fetchFollowRequestsPromise","announcements2","fetchAnnouncementsPromise","loadUpdates","todayDate","announcementsListRef","currentDay","announcement","onlyMentions","notificationDay","differentDay","heading","yesterdayDate","marginBlockEnd","contact","getCurrentInstance","contactAccount","content","endsAt","published","statuses","startsAt","allDay","publishedAt","read","reactions","publishedAtDate","publishedDateText","updatedAtText","reaction","me","staticUrl","memo","Public","isLocal","publicIterator","fetchPublic","listPublic","prompt","toLowerCase","hash","Trending","setHashtags","trendIterator","fetchTrend","trends","listTags","history","total","reduce","Columns","components","Hashtag","Component","Home","showDrafts","NotificationsLink","notificationLinkRef","NotificationsMenu","NOTIFICATIONS_LIMIT","NOTIFICATIONS_DISPLAY_LIMIT","skipThreading","now","hasFollowRequests","setHasFollowRequests","statusRegex","statusNoteRegex","getInstanceStatusURL","hostname","URL","match","noteId","HttpRoute","useLocation","replace","statusURL","Lists","instancesListURL","VITE_CLIENT_NAME","CLIENT_NAME","VITE_WEBSITE","WEBSITE","import","registerApplication","instanceURL","registrationParams","client_name","redirect_uris","origin","scopes","website","method","headers","toString","json","registrationJSON","getAuthorizationURL","client_id","scope","redirect_uri","response_type","authorizationParams","authorizationURL","client_secret","code","grant_type","tokenResponse","Login","instanceURLRef","cachedInstanceURL","instanceText","setInstanceText","instancesList","setInstancesList","submitInstance","elements","instancesSuggestions","bStartsWith","aStartsWith","textAlign","autocapitalize","autocomplete","SHORT_LIMIT","Search","searchFormRef","offsetRef","statusResults","setStatusResults","accountResults","setAccountResults","hashtagResults","setHashtagResults","setTypeResultsFunc","loadResults","offset","prev","SearchForm","link","forwardRef","searchMenuOpen","setSearchMenuOpen","searchFieldRef","useImperativeHandle","setQuery","focusItem","nextElementSibling","el","siblings","parentElement","firstItem","previousElementSibling","lastItem","logo","DEFAULT_TEXT_SIZE","TEXT_SIZES","Settings","currentTheme","themeFormRef","targetLanguage","contentTranslationTargetLanguage","systemTargetLanguage","getTranslateTargetLanguage","systemTargetLanguageText","localeCode2Text","currentTextSize","prefs","setPrefs","onInput","theme","html","toggle","defaultChecked","fontSize","max","step","documentElement","setProperty","for","source","contentTranslation","targetLanguages","lang","contentTranslationHideLanguages","contentTranslationAutoInline","cloakMode","display","lineHeight","aspectRatio","verticalAlign","borderRadius","__BUILD_TIME__","SUBCOMMENTS_OPEN_ALL_LIMIT","MAX_WEIGHT","cachedRepliesToggle","cachedStatusesMap","resetScrollPosition","scrollPositions","StatusPage","mediaParam","mediaOnlyParam","mediaIndex","showMedia","mediaStatusID","mediaStatus","getStatus","showMediaOnly","heroStatus","setHeroStatus","closeLink","prevLocation","matchStatusPath","matchPath","delete","StatusThread","translate","setStatuses","heroStatusRef","totalDescendants","debounce","scrollOffsets","reloadHero","heroTimer","cachedStatuses","reallyCachedStatuses","heroFetch","pRetry","contextFetch","hasStatus","heroStatus2","_replies","_r","expandReplies","repliesCount","weight","replies","descendants","missingStatuses","ancestors2","ancestors","ancestorsIsThread","add","nestedDescendants","parent","__replies","ancestor","isThread","allStatuses","offsetTop","heroLimit","setLimit","scrollPosition","threadifyStatus","newScrollTop","newScrollOffsets","contextURL","initContext","statusWeightCache","div","apiCache","heroDisplayName","heroContentText","postInstance","reloadStatusPage","hasDescendants","innerHTML","heroInView","activeStatusRect","activeStatus","allStatusLinks","activeStatusIndex","nextStatus","onView","setHeroInView","statusLink","heroPointer","topmostStatusLink","enabled","prevStatus","details","statusLinkRect","initialPageState","handleMediaClick","viewMode","short","arr","button","MenuHeader","postSameInstance","buttons","descendant","thread","isHero","status2","SubComments","onStatusLinkClick","hasParentThread","openAll","level","diveDeep","replies2","reply","replies3","totalComments","accWeight","totalWeight","calcStatusWeight","openBefore","detailsRef","sameCount","open2","shortReply","dataset","MEDIA_VIRTUAL_LENGTH","CARD_VIRTUAL_LENGTH","WEIGHT_SEGMENT","cachedWeight","card","htmlContentLength","mediaLength","pollLength","POLL_VIRTUAL_LENGTH","cardLength","boostsCarouselUrl","groupedNotificationsUrl","multiHashtagTimelineUrl","nestedCommentsThreadUrl","logoText","Welcome","__STATES__","ICONS","App","isLoggedIn","setIsLoggedIn","setAttribute","textSize","decodeURIComponent","accessToken","access_token","clientSecret","allSettled","initPreferences","getCurrentAccount","initInstance","focusDeck","columns","pages","backDrop","showModal","backgroundLocation","isModalPage","$app","nonRootLocation","Routes","Route","$body","element","StatusRoute","openCompose","newWin","Compose","_c","_e","newStatus","toast","hideToast","_f","showMediaModal","BackgroundService","notificationStream","lastCheckDate","diff","render","HashRouter","localStorage","removeItem","sessionStorage","__CLOAK__"],"mappings":"uwBAQA,SAASA,GAAY,CAAEC,KAAAA,EAAMC,QAAAA,CAAQ,EAAG,CAChC,KAAA,CAAEC,MAAAA,GAAUC,EAAI,EAChB,CAACC,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1CC,EAAW,CAAC,CAACP,EACbQ,EAAeC,IACfC,EAAwBD,IACxBE,EAAoBF,IAC1BG,EAAU,IAAM,CACVL,IACWM,EAAAA,QAAQC,MAAQd,EAAKe,MACZF,EAAAA,QAAQC,MAAQd,EAAKgB,cACvCL,EAAkBE,UACFA,EAAAA,QAAQI,QAAUjB,EAAKkB,WAE7C,EACC,CAACX,CAAQ,CAAC,EACPY,MAAAA,EAAoBC,GAAS,0BAA0B,EAE7D,OACEC,EAAA,MAAA,CAAKC,MAAM,QAAOC,SACf,CAAA,CAAC,CAACtB,GACDuB,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,cAAcI,QAASzB,EAAQsB,SACzDC,EAACG,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EACP,IACHJ,EAAA,SAAA,CAAAD,SACEC,EAAA,KAAA,CAAAD,SAAKhB,EAAW,YAAc,UAAA,CAAe,CAAA,CACvC,EACRiB,EAAA,OAAA,CAAAD,SACEF,EAAA,OAAA,CACEC,MAAM,YACNO,SAAiBC,GAAA,CACfA,EAAEC,eAAe,EAEjB,MAAMC,EAAW,IAAIC,SAASH,EAAEI,MAAM,EAChCnB,EAAQiB,EAASG,IAAI,OAAO,EAC5BnB,EAAgBgB,EAASG,IAAI,gBAAgB,EAC7CjB,EAAYc,EAASG,IAAI,WAAW,IAAM,KAChDC,EAAY,SAAA,GACVrB,SAAAA,CACAC,GAAAA,CACAE,IAAAA,EACDX,EACDF,EAAoB,MAAAH,EAAA,GAAA,MAAA,OAAAF,EAAA,GAAA,CAEP,MAAAe,EACP,eAAAC,EACEqB,UAAAA,CAEJ,CAAA,EAEItB,EAAAA,MAAAA,EAAAA,GAAAA,MAAAA,OAAAA,CACAuB,MAAAA,EACApB,eAAAA,EACD,UAAAA,CAAA,CACI,EAEHH,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,EACgBC,CAChBE,MAAAA,UACF,KAACmB,CAAA,EAGHD,OACA/B,EAAW,OAAS,EACV,MAAAE,EAAA,uBAAA,wBAAA,CAAA,CACD,IACD8B,EACP,YACS,MAAA,CACVD,MAAAA,gBACA/B,SAAAA,EAAkB,QAAA,CAEhBE,IAAAA,aAEJ,SAAA,CAAA,OAAA,IAAAiB,EAAA,QAAA,CACC,IAAAhB,EACL,KAAA,OAAEe,gBAES,KAAA,QAAeA,YACb,SAAAnB,IAAA,UAAa,IAAA,MAEtB,CAAA,CACEmC,CAAK/B,CAAAA,CACA,CAAA,EAAAgB,EACF,MAAA,CAAA,MACE,gBAAA,SACGH,EAAA,SAAA,CAAA,MACc,KAClB,iBAAM,SACV,GACG,SAAAjB,IAAA,UAEToB,SAAA,CAAAA,EAAA,SAAA,CAAW,MAAA,OAAeD,uCACxB,CACOb,EAAAA,EAAAA,SAAAA,CACA,MAAA,WACG,SAAA,iCAAA,cACc,CAAUa,MAAAA,OAExBT,SAAM,oBAAA,CAAA,CAAMS,CAAC,CAA4B,CACjD,CAAA,EAAAJ,GAAcK,EAAA,MAAA,CAAA,MAAW,gBAA+B,SACxDA,EAAA,QAAA,CAAA,MAAc,cAAA,SAAO,CAAAA,EAAA,QAAA,CAA2B,IAAAb,EAC1C,KAAA,WAGRa,KAAAA,YAAW,SAAApB,IAAA,SAAA,CAAemB,EAAAA,iDACxB,CAAA,CAAA,CAAa,CAAaA,EAAAA,EAAAA,MACxBC,CAAA,MACOb,mBAAAA,SACA,CAAAa,EAAA,SAAA,CAAA,KACA,SAAA,aACiB,UAAU,SAGpCjB,EAAA,OAAA,QAAA,CAAO,EAAAA,GAAAiB,EAAAgB,GAAA,CAGXnB,SAAAjB,IAAA,UAAW,MAAA,MAAkBmB,kBAC3B,SAAQE,aAAK,oBAASgB,YAAsB,CAAUlB,WAC/B,GAGrBC,SAAAA,KAEQ,MAAAtB,EAAA,GAAA,MAAA,OAAAF,EAAA,EAAA,EACYK,EAAA,SAAA,EACLJ,GAAA,MAAAA,EAAA,OACE,SAGbI,EAEa,MAAA,CACPA,EAAA,OAAA,EACF,MAAMH,yBACNG,CACAJ,IAAU,EACD,SACRuB,EAAA,SAAA,CAAA,cAEDY,MAAAA,eACA/B,SAAAA,IAAkB,UAClBqC,SAAM,SAAwB,CAChC,CAAA,CAAA,CAAA,CACC,CACL,CAAA,CAAA,CAAEnB,CAEF,CAAA,CAAA,CACO,CAAA,CACC,CCnIxB,MAAMoB,GAAiB,CACrB,IAAO,GAAK,EACZ,IAAO,GAAK,GACZ,IAAO,GAAK,GACZ,IAAO,GAAK,GAAK,EACjB,IAAO,GAAK,GAAK,GACjB,IAAO,GAAK,GAAK,GAAK,EACtB,IAAO,GAAK,GAAK,GAAK,EACtB,CAAG,EAECC,GAAwB,CAC5B,EAAG,UACH,IAAS,YACT,KAAW,aACX,KAAW,SACX,MAAY,UACZ,MAAY,QACZ,OAAa,SACb,OAAa,QACf,EAEA,SAASC,GAAY,CACnBC,QAAAA,EACAC,aAAAA,EAAeA,IAAM,CAAC,EACtBC,WAAAA,EACAC,SAAAA,EACAC,cAAAA,CACF,EAAG,CACD,KAAM,CAAC9C,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C6C,EAAW,OAAOL,GAAY,SAC9B,CAACM,EAAMC,CAAO,EAAI/C,EAAS6C,EAAW,KAAOL,CAAO,EAE1DlC,EAAU,IAAM,CACd,GAAI,CAACuC,EAAU,CACbE,EAAQP,CAAO,EACf,MACF,CACAzC,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACI+C,MAAAA,EAAO,MAAML,IACnBO,EAAOC,SAAU,GAAEH,EAAKI,EAAG,IAAGP,CAAS,EAAC,EAAIG,EAC5CC,EAAQD,CAAI,EACZ/C,EAAW,SAAS,OACV,CACV+B,EAAQqB,MACRJ,EAAY,OAAA,CACZhD,CAAkB,IACpB,EACC,CAAA8C,EAAAL,EAAAC,CAAA,CAAA,EACL,KAAcD,CAER,KAAAY,EACJA,OAAAA,EACAC,aAAAA,EACAC,IAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAC,OAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,MAAAA,EACAC,GAAAA,EAGAZ,aAAAA,EACAa,OAAAA,EACAC,KAAAA,EACAC,cAAAA,EACAC,IAAAA,EACAC,SAAAA,CAAAA,EACAC,GAAAA,CAAAA,EACF,IAAItB,EAAS,GACTuB,CACA,OAAAC,EAAEA,aAAAA,CAAAA,EAAQC,GAAAA,CAAAA,GAAiBzB,IAAS,gBAAA,KAAAwB,CAAA,IACnCA,GAA0BE,CAAAA,gBAAAA,MAAc,IAC3CF,EAAcjB,EACHA,EAAAA,GACQC,GAAA,CAAA,gBAAA,KAAAA,CAAA,IACjBiB,EAAoBjB,IAIxB,KAAA,CAAAmB,EAAAC,CAAA,EAAA1E,EAAA,CAAA,CAAA,EAEA,OAAOyE,EAAoBC,MAAAA,CAE3B,4BACE5E,IAAA,UAAA,WAAA,EAAA,GACEkB,MAAQ,CACD,mBAAAyD,EAAA,CAAA,EACL,mBAAoBA,EAAmB,CAAC,EACxC,mBAAoBA,EAAmB,CAAC,EACxC,mBAAoBA,EAAmB,CAAC,CACxC,EACF,SAAA,CAAA3E,IAAA,SAAAiB,EAAA,MAAA,CAECjB,MAAAA,WACMkB,SAAM,CAAAE,EAAA,IAAA,CAAUD,SACnBC,yBAAA,CAAA,EAAGA,EAAA,IAAA,CACHA,SAAAH,EAAA,IAAA,CAAAE,KAAAA,EACK0D,OAAMnC,SAASZ,SAAO,CAAA,sBAAAV,EAAAG,EAAA,CAAS,KAAA,UACR,CAAA,CAACC,CAAK,CAAA,CAAa,CAAA,CAAA,CAC1C,CAAA,EACDxB,IAAA,UAAAiB,EAAA6D,EAAA,CACD,SAEM,CAAA1D,EAAA,SACXH,CAAAE,SACEC,EAAA2D,GAAA,CAAA5D,kBACgB6D,SAAW,EAAA,CAAA,CAAe,CAAA,EAAE/D,EAAA,OAAA,CAE5CA,SAAA,CAAAA,EAAA,MAAA,CAAAE,MAAAA,OACOD,SAAM,CAAAE,EAAA,IAAA,CAAMD,SACfC,kBAAA,CAAA,EAAGA,EAAA,IAAA,CACHA,SAAA,iCAAA,CAAA,CAAAD,CAAG,CAAA,EAAmCF,EAAA,IAAA,CAExCA,MAAAA,QAAGC,SAAM,CAAAD,EAAA,MAAA,CAAOE,SACdF,CAAAA,EAAA,OAAA,CAAAE,SACEC,IAAA,CAAA,EAAM,YAAA,CAAA,CAAE,IACV,MAAA,CACAH,SAAA,CAAAG,EAAA,OAAA,CAAAD,SACEC,IAAA,CAAA,EAAM,YAAA,CAAA,CAAE,IACV,MAAA,CACAH,SAAA,CAAAG,EAAA,OAAA,CAAAD,SACEC,IAAA,CAAA,EAAM,QAAA,CAAA,CAAE,IACV,MAAA,CACAA,SAAA,WAAA,CAAA,CAAAD,CAAK,CAAA,CAAS,CAAM,CAAA,CAAA,CAClB,CAAA,EACC6B,GAAA/B,EAAA6D,EAAA,CACP,SAGA7D,CAAAA,GAAA,CAAA,gBAAA,KAAAuD,CAAA,GAAApD,EAAA,MAAA,CAAAD,IAAAA,EAGM8D,IAAKT,GACLU,MAAI,iBAAAX,EAAA,mBAAA,EAAA,GACJrD,QAAQQ,GAAA,UAGQ,YACRI,SAAoB,MAAA2C,EACpB/C,EAAAA,OAASuD,IAAAA,GAENvD,EAAA,OAAA,gBAAA,aAAA,EACHI,EAAAA,OAAOqD,OAEXzD,EAAA,OAAA,MAAA+C,EACS/C,EAAAA,OAAAA,IAASuD,EAEbvD,EAAA,OAAA,QAEP,EACF,YAAA,YACA0D,OAAY1D,GAAA,UACG,UAAA,IAAA,QAAA,EACXI,GAAAA,CACE,MAAAuD,GAAA,SAAA,cAAA,QAAA,EAEIA,GAAAA,GAAkBC,WAAAA,IAAAA,EAClBC,GAAAA,MAAaC,EAAAA,OAAAA,MACZC,GAAAA,SAAiBA,OAAAA,OACjBC,GAAAA,UAAAA,EAAShE,OAASgE,EAAAA,CAAAA,EACzBH,MAAc7D,GAAU,GAqDvBiE,GAxCsB,CAAAJ,GAAA,aAAA,EAAA,EAAAK,GAAAA,EAAA,EAAA,KAAAL,GAAA,aAAA7D,EAAA,OAAA,MAAAkE,GAAA,EAAAA,GAAAA,EAAA,EAAA,KAAAL,GAAA,aAAA,EAAA7D,EAAA,OAAA,OAAAkE,GAAAA,GAAAA,EAAA,EAAA,KAAAL,GAAA,aAAA7D,EAAA,OAAA,MAAAkE,GAAAlE,EAAA,OAAA,OAAAkE,GAAAA,GAAAA,EAAA,EAAA,IAAA,EAAA,IAAAC,IAAA,CACjBC,IAAAA,GAAAA,EAsBAC,GAAI,EACJC,GAAI,EACJC,EAAI,EACR,QAAQC,EAAA,EAAAA,EAAAL,GAAA,OAAAK,GAAA,EACRH,IAAAF,IAAa,EACXE,IAAKF,GAAKK,EAAC,CAAA,EACNL,IAAAA,GAAKK,EAAI,CAAC,EACVL,GAAAA,GAAKK,EAAI,CAAC,EAEjB,MAAAC,EAAAN,GAAA,OAAA,EACMM,MAAAA,CAAAA,GAAAA,EAAkBC,GAASD,EAAAF,GAAAE,EAAAE,EAAAF,CAAA,CACjC,CAAO,EAMR,IAAAG,IAAA,CACKX,KAAAA,CAAAA,GAAAA,GAAAA,GAAYG,CAAOS,EAAAA,GAAeD,EAAA,EACtC,MAAOP,UAASM,KAAKG,cAAgBH,CAAA,GACrC,CAAA,EACFzB,EAACe,EAAA,CACDf,MAAAA,CACA5C,CAAc8D,CAAAA,CAAQH,EAAAA,EAAAA,SAAAA,CAAAA,SAAWvE,EAAA2D,GAAA,CACnC,QAASrD,EACP,SAAAmB,EAEJ,WAAA,OAGJzB,SAAAwB,EAAAzB,WACe,CAAA,CACF6B,CACTH,EAAAA,EAAAA,OAAAA,CAAAA,SACW,KAAA,SACDD,CAAAA,GAAAA,EAAAA,EAAAA,CACV6D,SAAUxF,EAAC2B,OAAAA,CACZ,MAAA,MAEH3B,SAAA,CAAAG,EAAAG,EAAA,CAAe,KAAA,KACZkC,CAAAA,EAAAA,YACCrC,CAAA,CAAAD,CACE,CAAA,EAAMD,GAAME,EAAA0D,EAAA,CAAK3D,SAAAA,EACfC,OAAK,CAAA,MAAM,MAAK,SAClB,CAAAA,EAAAG,EAAA,CAAM,KAAA,OAIRH,CAAAA,EAAAA,QAAAA,CAAA,CAAAD,CACE,CAAA,EAAMD,EAAM,MAAA,CAAKC,MAAAA,OACV,QAAMuF,GAAA,CAAO,SAAA7D,CACpB,CAAM,EAGVzB,wBAAA,CACQ,OAAAuF,GAAAxC,EAAA,SACsB,CAC1BtB,CACD,CAAA,CAAA,GACwBgB,GAAA,YAAAA,EAAA,QAAA,GAAAzC,EAAA,MAAA,CACvBwF,MAAAA,mBAA+BhD,SAAAA,EAAAA,IAAAA,CAAAA,CAAO,KAAAiD,EACxC,MAAAnG,GAEDmD,WAAAA,EACC,EAAWqC,KAAAjF,EAAA,MAAA,CAAkBE,MAAAA,iBACd2F,GAAA,mBAAA,EAAA,GAAED,SAAAA,CAAAA,EAAAA,IAAAA,CAAMnG,SAAAA,CAAAA,EAAAA,GAAAA,CAAOoG,KAAAA,EAC1B7F,OAAAA,CACU,CAAA,EAAA,IAAA,CAAA,CAAA6F,IACO1F,EAAAG,EAAA,CACZJ,oBAGHA,KAAAA,GACY,CAAA,CAAC4F,CAAMF,CAAMjD,EAAAA,EAAAA,IAAAA,CAAe,wBACrBxC,CAAMI,OAAKmF,GAAAjG,GAAA,CAAoB,OAAAkD,CAAA,CAAM,CAExDxC,CAAA,CAAA,CACE4F,CAAyB,EACvBJ,EAAAA,EAAAA,CAAAA,CAA8B,CAAEhD,EAAAA,EAAAA,IAAAA,CAAAA,MAAQ,QAC1C,SAAA,CAAA3C,EAAA,MAAA,CAAE,SACF,CAAAG,EAAA,OAAA,CAVU8E,MAWTpC,EAIX7C,SAAAgG,GAAAnD,CAAA,CAAA,CAAS,EAAA,IAAA,WAAA,CAAA,CAAO3C,EAAAA,QACd,CAAAA,MAAAA,gBACE,SAAa2C,CAAAA,EAAAA,OAAAA,CAAe3C,MAAAA,EAEpB,SAEV8F,GAAAlD,CAAA,CAAA,CACA9C,EAAAA,IAAA,YAAAG,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAWwB,EAAA3B,EAAA,MAAA,CAAeE,MAAAA,gBACxB,SAAa4C,CAAAA,EAAAA,OAAAA,CAAe5C,MAAAA,WAEhB8F,IAEN,CAAA,CACH,EAEHhG,IAAAA,OAAAA,CAAA,CAAA,EAAWA,EAAAiG,EAAA,CAAe/F,MAAAA,gBACxB,GAAaiD,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAAA,MAAAA,CAAAA,GAAcjD,QAAAA,KAEnBgG,IAIVlG,EACEC,SAAM,CAAAE,EAAA,OAAA,CACNgG,iBACeH,GAAA7C,CAAA,CACb+C,CAAc,EAAA,IAAA,OAAA,CAChB,CAAA,EAAA,CAAA,CAAAzD,GAAAzC,EAAA,MAAA,CAAEE,MAAAA,gBAEF,SAAaiD,CAAAA,SAAAA,IAAAA,EAAAA,OAAAA,CAAcjD,SACxB8F,EACK,SAEVI,GAAA3D,EAAA,CAECA,SAAAA,EACD,CAAW,CAAA,CAAgB,CAAA,CAEzB,CAAA,CAAA,CAAgBA,CAAUvC,EAAAA,EAAAA,IACC,KAAA6B,EACb,SAAAH,EACX,cAAAC,CACI,CAAA,CAAA,CAEV,CAAA,CAAA,CAEY,CACbE,CAAAA,CAAAA,CACAH,CAAAA,CACAC,SACDwE,GAAC,CAAA,KAAAtE,EACG,SAAAH,EAGZ,cAAAC,CAGP,EAAA,OAEA,GAAA,CAAAE,EAA0BA,OAAAA,KAAMH,KAAAA,CAAUC,MAAAA,EAAiB,SAAAyE,EACzD,cAAKvE,CAAa,EAAAjD,EAAA,EACZyH,EAAA3E,IAAA0E,EACGE,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EACGF,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EACKG,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EACT,CACR,GAAAtE,EAEA,KAAAE,EACA,IAAAe,EACA,SAAAC,EAEM,OAAAJ,EAAEd,aAAAA,EAAIE,KAAAA,EAAMe,OAAAA,CAAKC,EAAAA,EAAUJ,EAAAA,EAAAA,CAAAA,EAAQD,CAAcE,UAAAA,EAAMN,eAAAA,EAAWb,UAAAA,EAClE2E,WAAAA,EAEA,SAAAC,EACJC,UAAAA,EACAC,OAAAA,EACAC,oBAAAA,EACAC,UAAAA,EACAJ,eAAAA,EACAK,SAAAA,CAAAA,EACAC,GAAAA,CAAAA,EACAC,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EACAC,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACAC,EAAAA,IAAAA,CACAC,GAAAA,EAAAA,CACEC,QAAiBC,EAAA,QAAA,IAAA,gBAAA,EAErB,IAAOC,GACP,SAAwB,CAExBjI,GAAUgH,GAAM1E,EACJ4F,EAAAtF,UACeoF,CAAAA,GAAczG,EAAoB,CACrD2G,MAAAA,EAAAA,EAAAA,KAAAA,SAAAA,GAAAA,EACS,GAAA,CACPlB,QAAgB1E,MAAe2E,EAAA,GAAA,OAAA,CACrBrE,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,QAAAA,IAAAA,CAAAA,GACd,KAAYoE,WAEV,MAAwBxE,EACpB,QAAA,EACF,CAAA,EACE2F,oBACAtH,EAAMuH,EAAA,SAAA,CAAA,EAAA,GACNC,GAAOD,EAAA,SAAA,CAAA,CAAA,EACE,MACV,CAAA,CACOE,CACJF,GAAAA,CAAAA,EACUA,OACGA,GAAAA,IAAAA,EAAiB,CAClCG,GAAA,EAAA,EACF,MACE/G,CACF2F,EAAA,QAAAe,EACFM,EAAA,SAAA,EAEAC,EAAKP,CAAAA,CAAAA,EAAW,MAAAQ,EAAAzB,EAAA,GAAA,SAAA,mBAAA,CAAAiB,CAAA,CAAA,IAEkBjB,EAAA,GAAA,SAAA,uBAAAiB,CAAA,EAEhCK,GAAAA,CACA,MAAAI,EAAA,MAAAD,EACF,GAAAC,EAAA,OAAA,CAEAxB,MAAUlH,EAAUiI,EAAAA,CAAAA,EAGpBO,GADAD,EAAAA,CAAgC,EAChCC,CAAAA,EAAuB,UAEjBC,IAIJzB,MAAAA,EAAAA,MAAAA,EAEEwB,EAAAG,EAAA,CAAA,EAAA,SAAA,MAAA,EAAA,EAAA,CAAA,CACF,QAEA,CACQb,EAAAA,UACNc,MAAAA,CAEIL,EAAyB,OAAA,CACvB,CACF,IACQF,CACRG,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAuDzI,EAAA,KAEvDwB,GAAAA,IACFsH,GAAAtG,CAAA,CACF,EACF,CAAAA,EAAAuG,EAAA,CAAA,EACAP,MAAAA,GAAAA,IAAgC,UAClCQ,GAAYnJ,EAAA,IAAA,EACV2B,CAAAA,GAAeyH,EAAA,EAAAvJ,EAAA,EAAA,EACf8I,CAAAA,GAAAA,EAA8B,EAAA9I,EAAA,EAAA,EAChC,OAAAe,EAAA6D,EAAA,CAAA,SACC,CAAA1D,EAAA,MAAA,CACL,MAAA,iDACE4B,OAAMF,EAAAA,GAAAA,MAAAA,EAAc,QAExBtC,SAAgBY,EAAA,MAAA,CACV4B,+BACFsG,SAAAA,EAAkB,IAAA,CACpB,SAAA,CAAA,cAAA,IAAAlI,EAAA,OAAA,CACQmI,MAAO,cAEuBG,EAAA,IAAAC,GAAAvI,EAAA,IAAA,CAClCoI,KAAAA,MAECI,IAAAA,sBACAC,QAAAA,GAAyC,CAG9CnI,EAAA,eAAA,EACEN,EAAA,YAAA,CACQ,QAAAuI,EACsBvD,SAAAA,CAAAA,CAEjB,EAAwBjF,SACjCC,EAAA0I,GAAA,CAAG,IAAAH,EACW,aACA,KAAA,IACTD,IAAAA,GAAAA,EAAAA,WAAuBC,KAAAA,EACtBvI,gBACiBiD,GAAAA,YAAAA,EAAAA,GAAAA,CACX,CAAA,CAAA,CACJ/C,CACEI,CAAAA,CAAAA,CACAwB,CAAAA,CAAqB,CAAA,CACVyG,CACT9G,EAAAA,EAAAA,IAAAA,CACF,MAAA,UACF,SAAA,CAAA5B,EAAA,OAAA,CAAEE,SAAAA,CAAAA,EAEKC,EAAA,OAAA,CAAA,YACSoC,SACT,eAAA,CAAA,EAAAS,EACG0F,EAAqB,QAAA,CAAkB,sBAC3BlG,SACrB,CAAA,aAAA,IAAA4D,GAAApD,EAAA,CAAC,SAEL,EAAA,CACG,CAAC,CAAA,CACN,EAAA7C,EAAA,OAAA,CAAA,CAAA,EAAA8G,GAAA9G,EAAA,OAAA,CACA,MAAA,aAEPH,SAAA,OAAA,CAAS,EAAA2G,GAAAxG,EAAA,OAAA,CAASD,MAChBF,aAAA,SAEIG,SAAA,CAAA,CAAMF,CAAM,CAAA,EAAKC,IAACF,EAAA,OAAA,CAAa,MAC3BgD,UACJ,SAAa,CAAAhD,EAAA8I,GAAA,CAAe5I,YACfqI,GACiB,OAChB,CACV,OAAA,SAAA,MAKWtI,eAAM,CAAa,MAAA,CACX,OAAA,IAAa,EAAc,QAAAQ,GAAA,SAEtDT,EAAAA,SAAAS,EAAA,iBAAYsI,GAAAC,EAAAT,GAAA,UAAA,YAAAS,EAAA,YAAA,MAAAD,EAAA,KAAAC,GAEKT,CACL,EAAA,eAER,SAAA,SACAU,SAAgB,OAAA,mBACP,UAAA,WAAA9I,EAAA,SAAA,CAAA,KAEG,SACV,MAAA,OACAE,cACMI,SAAaA,GACf8H,SAAAA,EAAAA,GACF,KAAA,OACF,KAAA,IACF,IAAA,MAAA,CACM,CAAA,CACG,EACTW,SAAS,CAAAzC,GAAA,CAAA6B,IAAAtI,EAAA6D,EAAA,CACU,SAAA,CAAA7D,EAAAmJ,GAAA,CACnBC,YACE,CACOnH,EAAA,YAAA,CACC,YAAA,CACA,OAAA,KAAAuF,GAAA,YAAAA,EAAA,OAAAnF,CAAA,GACIgH,CAAAA,CAEC,EAAOC,SAAK,CAAAnJ,EAAAG,EAAA,CAAQ,KAAA,IAAA,CAAQ,EAAAN,EAAA,OAAA,CACjC,SAAA,CAAA,YAAAqD,CAAA,CAAA,GAIR,CAAAnD,EAAAA,EAAAiJ,GACW,CACP9I,QAASA,IAAM,CACb4B,GAAqB,EAAA,CAAA,EACN,SACF,CAAA9B,EAAAG,EAAgB+B,CAC3B,KAAA,WAAA,CACF,EAAAlC,EAAA,OAAA,CACF,SAAA,eAAA,CAAED,CAAAA,CAEG,CAAA,EAACK,GAAKP,EAAAmJ,GAAA,CAAI,QACfnJ,IAAA,CAAAE,GAAM,EAAkB,CAAO,EAEjCF,SAAS,CAAAG,EAAAG,EAAA,YAELkI,CAAAA,EAAAA,EAAAA,OAAAA,CACF,SAAA,uBAAA,CAAEtI,CAAAA,CAEG,CAAA,EAACK,EAAKgJ,GAAA,CAAA,CAAA,CAAA,CAAA,CAAW,EAAAvJ,EACtBG,GAAA,CAAA,KAAMiD,EAAA,OAAoB,SAAA,SAI1BpD,CAAAA,EAAAA,EAAAA,CACEK,eACEmJ,CAAAA,EAAAA,EAAAA,QAAAA,CACF,MAAA,oBAAEtJ,SAAAuJ,GAEGrG,CAAA,CAAA,CAAA,CAAA,CAAM,CAAM,EAAApD,EACjBG,MAAA,CAAA,MAAM,kBAAA,SAA4B,CAAAH,EAAAmJ,GAAA,CAGtChJ,aAGJH,GAACmJ,CAAe/F,UAAAA,UAAAA,UAAAA,CAAAA,EAAYsG,GAAA,aAAA,CAAQxJ,MACjCI,CAAUoJ,GAAA,qBAAA,CACXvJ,CAAa,EAAmBD,SAAEuJ,MAA4B,KAAA,MAAA,CAEhEzJ,EAAAA,EAAA,OAAA,CAAW,SAAA,MAAA,CAAiBE,CAAAA,CACjB,CAAA,oCACQ,UAAA8I,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CAET,IAAA5F,CACFuG,KAAUC,EAAAA,GAAAA,CACVF,QAAAA,IAAuB,CACzB,IACE3I,gBAAe,CACf2I,IAAAA,CAA+B,CACjC,CACF,MAAA,CAAExJ,MAAA,+BAEG,CAAM,CAAQ,EACnB,SAAM,CAAAC,EAAAG,EAAA,CAAW,KAAA,OAAA,CACT,EACEuJ,EAAAA,OAAAA,CAERzG,SAAAA,QAAAA,CAEApD,CAAAA,CAAS,CAAA,CACPK,CACM,CAAA,EAAA,CAAA,CAAAiH,GAAAtH,EAAA6D,EAAA,CACF8F,SAAAA,CAAAA,EAAUE,GAAM,CAAA,CAAA,EAAA5C,EAAAjH,EAAAmJ,GAAA,CACd/F,QAAAA,IAAAA,CAAAA,EACD,SAAA,YACS,CACVrC,GAAAA,CACAM,MAAqCyI,EAAA,MAAAtD,EAAA,GAAA,SAAA,QAAAgB,GAAA,YAAAA,EAAA,KAAArF,CAAA,EACvCiG,EAAA0B,CAAA,EACF/B,EAAA,SAAA,EAAE7H,GAEDI,YAAI+C,CAAA,EAAA,CAAM,MAAA,CACXlD,EAAA,OAAA,CAAM,CAAA,IAET,EAEJ,SAAEmH,CAAAA,EAAAA,GACDpH,KAAA,QAGa,KACQ,OAAA,CACb6H,SAAAA,CAAAA,WAAuB1E,CAAS,CAChC,CAAA,CAAA,CACE,CAAI,EAAAlD,EAAA4J,GAAA,CACID,YAAAA,YAIEjC,UAAAA,SACRO,SAAAA,OACAL,MAAAA,GACW,MAAA/H,EAAA6D,EAAA,CAAqB,UACzBpD,EAAGH,EAAA,CACVS,KAAAA,MACAgH,CAAAA,EAAAA,EAAAA,OAAAA,CACF,MAAA,YACC,SAAA,CAAA,SAAA1E,EAAA,GAAA,CAAA,CACL,EAAArD,EAAA,OAAA,CAAEE,MAEFC,CAAW,aAAA,MACXH,EAAAE,SAAM,CAAAC,EAAAG,EAAiB,CAAQ,KAAA,MAAA,CAGjCH,EAAC4J,EAAOzJ,EAAA,CACM,KAAA,eAAA,CACF,CAAA,CAAA,CACD,CAAA,CAAA,CACF,EACP0J,WACE,MAAA,CAAA9J,MAAAA,YACO,SAAMoB,GAAA,IAAA2I,GAAA9J,EAAAgJ,GAAA,CACXnJ,QAAA,IAAA,CAAY+H,EAAA,SAAA,GAAY,SAAO1E,CAC/BrD,GAAA,CACS,MAAA8J,EAAA,MAAAtD,EAAA,GAAA,SAAA,MAAAgB,GAAA,YAAAA,EAAA,KAAArF,EAAA,CACS,SAAA8H,CAAA,CAChB,EAAE/J,EAEG4J,CAAA,EAAM/B,EAAA,SAAA,EACX5H,GAAK,UAAAkD,CAAA,QAAA9B,GAAA0I,CAAA,CAAA,EAAA,CAAM,MAAA,CAAkBlC,EAAA,OAAA,EACxB2B,GAAA,mBAAArG,CAAA,EAAA,CACP,CAAA,IAGO,EACR/B,SAAAA,GAAoB2I,CAAAA,CACV,CAAA,CACP5J,CACE0H,CAAAA,CACA,CAAA,EAAA5H,EAACgB,GAAY,CACP,QAAA,GACI2I,QAAAA,CAAAA,EAIAG,aAAAA,EAAAA,EAAAA,CAAAA,SAEJ,CAAA9J,EAAAG,EAAA,CACMuH,KAAAA,OACRO,CAAAA,EAAAA,EAAAA,OAAAA,CACAL,SAAAA,CAAAA,UAAAA,EAAgC,GAAA,CAChC2B,CAAAA,CAAAA,CAEA,CAAA,EAEA3I,2BACAgH,QAAAA,IAAAA,CACWA,EAAA,SAAA,GACb,SAAA,CAAA,GACC,CACL,GAAApB,EAAA,CAAEzG,MAEDqB,QAA8BiF,EAAA,GAAA,SAAA,SAAAgB,GAAA,YAAAA,EAAA,KAAArF,CAAA,EAElCiG,EAAA0B,CAAA,EACE/B,EAAA,SAAA,EAGG2B,GAAA,cAAArG,CAAA,EAAA,CAAA,KACH,OACGsD,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,OAAAA,GAAAA,YAAAA,EAAAA,KAAAA,CAAAA,EACVuD,EACEJ,CAAA,EAAA5J,EACO,SAAA,EAAMwJ,GAAA,YAAArG,CAAA,EAAA,CACXrD,CAAM,MAAQqD,CAAiB0E,EAAA,OAAA,EAC/BpB,EAEc+C,GAAA,sBAAArG,CAAA,EAAA,EAKhB0E,GAAAA,oBAAgC1E,CAAA,EAAA,CAE1B,CACF,IACQyG,EAIEjC,SAAAA,MAAiC,CACzCO,SAAAA,CAAAA,EAAAA,EAAgB0B,CAChB/B,KAAAA,SACA2B,CAAW,EAAA1J,EAAA,OAAA,CAAuB,SAC7B,CAAA,YAAAqD,CAAA,CACL,CAAMyG,CAAAA,CAIN/I,CAAQ8G,EAAAA,EAAAA,GACRO,SAAAA,CAAAA,EAAAA,EAAgB0B,CAChB/B,KAAAA,OACA2B,CAAW,EAAA1J,EAAA,OAAA,CACb,SAAA,CAAA,UAAAqD,EAAA,GAAA,CAAA,CAAA,CACF,CACEtC,CAAAA,CACAgH,CAAAA,CAAAA,CACA,CAAA,CAAA,CACE2B,CAAW,EAAA,CAAApC,GAAA6C,IAAA,WAA+BhK,EAAAiK,GAAA,CAAA,OAAA,EAE/B,CAAA,EAAA,CAAA,CAAA9C,GAAAnH,EAAAgB,GAAA,CACb,QAAAyF,GAAAO,EACF,aAAAhH,EAAA,OAAA,CAAA,SACCgH,EAAA,2BAAA,aAAApF,EAAA,MAAAA,EAAA,QAAA,GAAA,CACL,EAAE7B,kBAGAF,SAAAE,MAAAA,MACO,SAAMmJ,GAAS,QACpBrJ,IAAAA,CAAAE,EAAM,SAAkB,GAAA,SAAQ,CAAA,GAGlCF,CAAAE,IAAAA,EACa0G,GAAAO,EACXnH,EAAA,MAAAwG,EAAA,GAAA,SAAA,SAAAE,EAAA,OAAA,EAA+BoD,EAAA,MAAAtD,EAAA,GAAA,SAAA,OAAAE,EAAA,OAAA,EAGvBoD,GAMjB1B,EAAA0B,CAAA,IAEuC,SAAA,CAC1B,OAAArJ,EAAA,CAEb6G,MAAAA,CAAAA,IAEuBH,OAAAA,CACtB+C,CACE,IAIM,EAERG,SAAkBlK,EAAA,SAAA,CACZ,KAAA,SACIkJ,MAAAA,GAAAA,GAAAA,EAAAA,aAAAA,EAAAA,qBACKzC,GAAAO,EAAA,SAAA,GACbY,SAAAA,GACA,SAAanB,EAAA5G,EAAA6D,EAAA,CACP,SAAA,CAAA1D,EAAA,OAAA,CACE2J,SAAAA,WAEJ,CAAA,EAAA3J,UAQE2J,SAAAA,WAEA,CAAA,CAEF,CACEA,CAAAA,EAAAA,EAAAA,EAAAA,EAAqCQ,CAGvC,SAAA,CAAAnK,EAAA,OAAA,CAEI2J,SAAAA,WAAiB1B,CAAAA,EAAAA,EAAAA,OAAAA,CACrBL,SAAAA,WAAgC,GAEhC1G,CAAAA,EAAAA,EAAOrB,EAAA6D,EAAA,CACPkE,SAAAA,CAAAA,EAAAA,EAAAA,CACF,KAAA,MAAA,CACC,EAAA,IAAA5H,EAAA,OAAA,CACL,SAAA,QAAA,CAAED,CAAAA,CAGK,CAAA,EAAA,QAAA,CAAA,CACgD,CACrD,CAAA,CAAqD,CAAA,CAAA,CACnCA,CAAAA,EAAAA,CAAAA,CAAAA,IAGhBF,EAAAA,GAAA,CAAAE,MAAAA,QACE,QAAAA,GAAM,CAASO,EAAA,SACfA,EAAA,eAAA+H,GAAM,EAAA,CAAgB,EAGxBtI,SAAAA,EAAAA,GACE,CAAA,KAAAgD,EAAe,OAAAN,EACf,QAAM,IAAA4F,GAAA,EAAA,CAAA,CAAA,CAAgB,CAAA,EAAA,CAAA,CAAAI,IAGxB/E,EAAA0G,GAAA,CAAArK,MAAAA,QACO,QAACK,GAAK,CAAAE,EAAM,SAAIN,EAAAA,eAAAqJ,GAAM,EAAA,CAAa,EAG1C,SAEIrJ,EAAAqK,GAAA,CAAC,UAEZ9D,EAAA,QACI,QAAA,IAAA8C,GAAA,EAAA,CAAA,CAER,CACO,CAAA,CACJvJ,CAAM,CAAA,CAEJ,CACEuI,SAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAqB,CACvB,MAAAiC,EAAA,MAAA3F,EAAA,MAAAC,EAAA,MAAAC,EACF,IAAA0F,EAAExK,OAAAA,OAGAgD,EAAAA,EACAN,GAAAA,GACAhE,EAAAA,GACA8L,EAGH9B,EAAAA,IAEO8B,OACIjK,IAAM,EAAAiK,CAAA,EACVjK,CAAAA,EAAAA,EAAaA,EAAAA,CAAAA,CACf+I,CAA2B,SAC7BC,GAAArG,EAAA,CACF,GAAA,CAAAA,EAAElD,OAEkB,MAClBwG,MAAqBlH,IAAAA,CAAAA,EACrBZ,CAA0C,KAAA+L,EAC1C,SAAAC,CAGN,EAAAC,EAENC,EAAAF,EAAA,QAAA,MAAA,EAAA,EAAA,QAAA,MAAA,EAAA,EAGA,OAASrF,EAAW1B,EAAIkB,CACtB,SAAkB,CAAA/E,EAAA,OAAS8E,CACnB+C,MAAAA,qBACJ6C,SAAAA,CAAAA,EAAAA,GAAAA,CACJ,CAAA,UAAsB,CAAA,CAAA,EAAAvK,EAAA,OAAA,CACZ,SAAA2K,CAAA,CACV,CAAA,CACEJ,CAAQ,CAAA,CAERA,SAAAA,GAAoB,CACtB,KAAAxH,EACQ6H,OAAAA,EACR,QAAAnM,CACF,EAAA,CAEA,MAAAoM,oBAA6B,IAAA,CAAA,CAC3B,KAAApF,EAAU,MAAAnG,CACV,IAAMoL,GAAAA,CAAAA;AAAAA,EACAI,GAAAxL,CAAA,CAAA,IAAA,KAAA;AAAA;AAAA,KAAA,GAAEkL,EAAAA,GAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA,EAAeK,CAAIH,GAAAA,IACrBC,OAAAA,EAAOF,OACb,cACE1K,UACEF,CAAAA,CAAAA,GAAAG,EAAA,SAAA,CAAMF,KAAM,SAAoBC,MAAAA,sBAC1BtB,EACNsB,SAAO4K,EAAAA,EAAAA,CAAY,KAAA,GAAA,CACnB,CAEN,CAAA,EAAA3K,EAAA,SAAA,CAEA,SAA4BA,EAAA,KAAA,CAAE+C,SAAAA,gBAAAA,CAAMN,CAAAA,CAAQhE,EAAAA,EAAAA,OAAAA,CAAW,SAAA,CAAAuB,EAAA,IAAA,CAC/C6K,MAAAA,CAEOpF,WAAAA,UAAMnG,EAAa,SAAOqG,CAAA,KAAqBoF,IAGtDpF,eAAOmF,GAAmC,KAAAnF,CAAA,GAEhD,CAAA,CAAA,CACE,CAAA,CAAW,CAEP,SAAa0E,GAAA,CAAA,UAAA9D,EAAe,QAAA9H,CAAuBA,EAAQsB,CACpD,KAACK,CAAK,MAAA1B,CAAM,EAGrBsB,EAAAA,EAAAD,CAAAA,GACE,EAAAjB,EAAA,SAAA,EAAAiB,CAAIiL,EAAAC,CAAA,EAAAnM,EAAA,CAAA,CAAA,EAAkB,CAAAoM,EAAAC,CAAA,EAAArM,EAAA,CAAA,CAAA,EAExBe,CAAAA,EAAAuL,CAAA,EAAAC,GAAAC,GAAAA,EAAA,EAAA,CAAA,EAAAvL,EAAAA,IACEC,CAAAnB,EACS,SAAA,GAAA,SACO,CACd,GAAA,CAAEkB,MAED4F,EAAAA,MAAAA,EAAAA,GAAAA,MAAAA,KAAAA,EAEH3F,EAAiB,MAAAtB,EAAA,GAAA,SAAA,UAAA6H,CAAA,EAACgF,EAAcC,CAAA,EAAC7F,EAAAA,CAAAA,EAAc9G,EAAA,SAAA,CAC1C,MAAA,CACJA,EAAA,OAAA,CAET,CAEA,IAA6B,EAAE0H,CAAAA,CAAAA,CAAAA,EAAW9H,KAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAW,OAAAoB,EAAA,MAAA,CAC7C,MAAA,QAAEnB,GAAAA,qCAAc,CAAA,CAAA,CAAAD,GAAAuB,EAAA,SAAA,CACtB,KAAOpB,SACP,MAAcqM,cACd,QAA+BE,EACzB,aAAoB,CAE1B/L,KAAgB,GACdP,CAAAA,CACA,CAAC,EAAYmB,EAAA,SAAA,CACP,SAAAA,EAAA,KAAA,CACF,SAAc,uBACd,CAAA,CAGAY,CAAAA,EAAAA,EAAAA,OAAY,CAAA,SAAEoK,CAAAA,EAAAA,OAAAA,EAAAA,EAAAA,KAAAA,CAAAA,MAAOE,kBAAuB,SAACF,EAAA,IAAAxM,GAAA,CAC7CyM,MAAAA,EAAcC,EAAA,KAAAO,GAAAA,EAAA,KAAAjN,EAAA,EAAA,EACd2M,OAAAA,EAAAA,KAAAA,CACAtM,SAAoBgB,EAAA,SAAA,MACV,SACVe,eAAe8K,EAAA,UAAA,EAAA,GACf7M,SAAkBD,IAAA,UACpB,QAAA,IAAA,CACCC,EAAA,SAAA,GACU,SAAC,CAET8M,GAAAA,CAGLD,EAAW,MAAAhN,EAAA,GAAA,MAAA,cAAAF,EAAA,GAAA,CAAW,WAAA,CAAA+H,CAAA,CAAA,CACjB9H,EAC2B,MAAAC,EAAA,GAAA,MAAA,WAAAF,EAAA,GAAA,CAAuBC,WAAAA,CAAAA,CAAAA,CAAAA,CAC5C,EAAW2M,GAGpB,MAAA,GACE,OAAA,EAAI,MAAAM,EAAA,8BAAA,wBAAA,CAAyB,CAAA,MAIjB,SAAA,CAAA1L,EAAAG,EAAA,CAAiBJ,KAClBoF,cACL,CAAA,WAAsCyG,CAGtC,SACEpN,EAAA,KAAA,CAAAuB,CAAAA,CACE,CAAA,CACO,CAAA,CACmC,CAAA,CAClB,CAAA,EAAAnB,IACbsB,UAAMF,EAAA,IAAA,CACbnB,MAAAA,WACA,SAAamB,EAAAiK,GAAA,CACP,OAAA,EACF,CAAA,CACE,CAAA,EAAArL,IAAA,QAAYuL,EAAS0B,IAAAA,CACnBC,MAAAA,WAAsB,SAAA,uBACvB,CAAA,EAAA9L,EAAA,IACI,CACL,MAAA,WACE8L,SAAAA,WAAsB,CAAA,EAAAjM,EAAA,SACvB,CACH,KAAA,SAEO,MAAA,SAAA,QAAA,MACG,EAAA,EACVe,SAAAA,cACA/B,SAAAA,CAAAA,EAAAA,EAAAA,CAEE6M,KAAAA,OAIJ,KAAA,GAAA,CAAA,EAAA,IACC1L,EAAA,OAAA,CACL,SAAA,UAAA,CAAED,CAAAA,CAEG,CAAA,CAAA,CAAM,CAAc,EAAA4L,GACzB3L,EAAAoK,GAAA,CAAA,MAAA,QAAY7K,QAAae,GAAA,CAAAA,EACnB,SAAAA,EAAA,eAACyL,EACP,EAAA,CAGN,EAEJ,SAAS/L,EAAAzB,GAAA,CAAUwB,KAAAA,GAAAA,YAAAA,EACV,KAAA,QAAOiM,GAAA,CAAEA,EAAA,QAAA,WAEJZ,IACMW,EAAA,EAAA,CAEpB/L,CAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAS,CAE/B,CCjiCR,SAASiM,GAAa,CAAE3K,QAAAA,EAASG,SAAUyK,EAAczN,QAAAA,CAAQ,EAAG,CAC5D,KAAA,CAAEC,MAAAA,EAAO+C,SAAAA,EAAUC,cAAAA,GAAkB/C,EAAI,CAAE8C,SAAUyK,CAAAA,CAAc,EACnEvK,EAAW,OAAOL,GAAY,SAE9B6K,EAASC,GAAW,MAAO3N,EAAS,CAACA,CAAO,CAAC,EAEnDW,OAAAA,EAAU,IAAM,CACTuC,IACHG,EAAOC,SAAU,GAAET,EAAQU,EAAG,IAAGP,CAAS,EAAC,EAAIH,EACjD,EACC,CAACA,CAAO,CAAC,EAGVzB,EAAA,MAAA,CACEkB,IAAKoL,EACLrM,MAAM,QACNI,QAAgBI,GAAA,CACOA,EAAEI,OAAO2L,QAAQ,gBAAgB,GAE5C5N,EAAA,CACN6N,YAAa,kBAAA,CACd,CAEL,EAAEvM,SAED,CAAA,CAAC,CAACtB,GACDuB,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,oBAAoBI,QAASzB,EAAQsB,SAC/DC,EAACG,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVJ,EAACqB,GAAW,CACVI,SAAAA,EACAC,cAAAA,EACAJ,QAAAA,EACAC,aAAc,SAAY,CACxB,GAAII,EACE,GAAA,CAKKC,OAJM,MAAMlD,EAAMyL,GAAGpI,SAASwK,OAAO,CAC1CrK,KAAMZ,EACNkL,eAAgB,EAAA,CACjB,OAES,CACV,MAAMR,EAAS,MAAMtN,EAAM+N,GAAGC,OAAO,CACnCnF,EAAGjG,EACHrB,KAAM,WACNwH,MAAO,EACPkF,QAASjL,CAAAA,CACV,EACGsK,GAAAA,EAAOjK,SAASiD,OACXgH,OAAAA,EAAOjK,SAAS,CAAC,CAE5B,KAEOT,QAAAA,CAEX,CAAA,CACD,CAAC,CAAA,CACC,CAET,CCvDA,SAASsL,GAAO,CAAEnO,QAAAA,CAAQ,EAAG,CACrB,KAAA,CAAEC,MAAAA,GAAUC,EAAI,EAChB,CAACC,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C,CAAC+N,EAAQC,CAAS,EAAIhO,EAAS,CAAE,CAAA,EACjC,CAACiO,EAAa3B,CAAM,EAAIC,GAAkBC,GAAAA,EAAI,EAAG,CAAC,EAExDlM,EAAU,IAAM,CACdP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMmO,EAAO,MAAMC,GAAGJ,OAAOG,KAAK,EAClC,GAAIA,EAAKhI,OAAQ,CACf,MAAMkI,EAAKC,KACLC,EAAUJ,EAAKK,UAAgBC,EAAIC,WAAWL,CAAE,CAAC,EACvD,GAAIE,EAAQpI,OAAQ,CAClB,MAAM6H,EAAS,MAAMI,GAAGJ,OAAOW,QAAQJ,CAAO,EAC9CP,EAAOY,KACL,CAACxI,EAAGJ,IACF,IAAI6I,KAAK7I,EAAE8I,SAAS,EAAEC,QAAAA,EACtB,IAAIF,KAAKzI,EAAE0I,SAAS,EAAEC,SAC1B,EACAd,EAAUD,CAAM,CAAA,MAEhBC,EAAU,CAAE,CAAA,CACd,MAEAA,EAAU,CAAE,CAAA,EAEdjO,EAAW,SAAS,OACV,CACV+B,SAAe,CACf/B,CAAkB,IACpB,EACC,CAAAkO,CAAA,CAAA,EACL,MAAIA,GAAYF,GAAA,YAAAA,EAAA,QAAA,EAEVgB,OAAAA,EAAAA,OAEN,cACO/N,SAAM,CAAA,CAAA,CAAArB,GAAAuB,EAAA,SAAA,eAECC,MAAK,cAASH,QAAMrB,EAAcyB,SAASzB,EAAAA,EAAAA,CAAQsB,KAAAA,GACpD,CAAA,CAAM,CAAA,EAAKF,EAAA,SAAA,CAGpBA,SAAA,CAAAA,EAAA,KAAA,CAAAE,SACEF,CAAAA,iBAAAG,EAAAiK,GAAA,CAAI,OAAA,GACoB6D,OAAMlP,IAAA,SAAA,CAAA,CAACmP,CAAoB,CAAA,EAAaF,GAAA7N,EAAA,MAAA,CAC5D,MAEFA,gBAAKF,SAAM,uEAAA,CAAA,CAAeC,CAAC,CAAA,EAI5BC,EAAA,OAAA,CAEHA,SAAA6N,EAAAhO,EAAA6D,EAAA,CAAA3D,SAEIF,CAAAA,EAAAA,KAAAA,CAAAE,MAAAA,cACMD,SAAM+M,EAAA,IAAAmB,GAAA,CAAajO,KAAAA,CAEb,UAAA4N,EAAEA,IAAAA,EAAWL,YAAAA,EAAKW,QAAAA,CAAaC,EAAAA,EAAYF,EAAAA,IAAAA,KAAAA,CAAAA,EAC3CG,OAAAA,EAAAA,KAAAA,CACN,UACEtO,EAAA,MAAA,CAAAE,MAAAA,kBACOD,SAAM,CAAAD,EAAA,IAAA,CAAiBE,SAC1BF,CAAAA,EAAAM,EAAA,CAAAJ,KAAAA,EACO,QAAA,QAACK,KAAM8N,GAAoB,CAAA,EAAc,IAAArO,EAAA,OAAA,CAAK,SACnDA,CAAAA,CAAAA,CAAAqO,GAAArO,EAAA6D,EAAA,UACI,CAACwK,IAAAA,UACD,KAAAlO,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAAA,GAAEoO,CACU7M,CAAAA,CACJ,CAAA,CAAA,CAGkB,CAAA,EACvBtB,EAAAgB,GAAA,CAEThB,aAAYA,EAAA,OAAA,CACV+J,SAAAA,oBAAc,CAAA,EAAwB,kBAAM,SAC5CG,MAAkB,MAClBkE,SAAMxP,IAAA,UACNqC,YAAsB,WACP,CACA,GAAA,CACP,MAAAgM,GAAA,OAAA,IAAAK,CAAA,EAGIL,GACC,MAAA,gDAEG,CACV/L,CAA+C,IACjD,EAEJ,SAAAlB,EAAA,SAAA,CAAED,KAAAA,SAGAE,MAAK,cACLH,SAAMlB,IAAA,UACNqC,SAAUrC,SAAY,CAAA,CACvB,CAAA,CAED,CAAQ,CAAA,EACIoB,EAAA,SAAA,CAEhBA,KAAAA,SACEC,SAAKrB,IAAA,UACLqC,mBACAnB,QAAM,SAAA,OAGAuO,GAAAA,EAAAA,CACJxP,EAAa,SAAA,EACXA,GAAAA,CACIwP,EAAA,MAAA3P,EAAA,GAAA,SAAA,MAAAwP,EAAA,EAAA,CACFG,MAAAA,wCAGU,EACVzN,WAAe,EACfM,MACArC,CACAA,EAAA,SAAA,CACF,CACAA,OAAAA,YAAoB,CACtB,YAAAoP,EACAK,cAAAA,CAAqB,EAEnBD,EAAAA,YAAAA,GACFvM,EAAA,WAAA,EACAA,EACAA,SAAoB9B,EAAAuO,GAAA,CACtB,MAAAP,CAAA,CAAEjO,CAEQ,CAACiO,CAAAA,CAAAA,EAAAA,CAAe,CAAA,CAAA,CACnB,CAAA,EAAAnB,EACP,OAAA,GAAA7M,EAAA,IAAA,CAER,SAACA,EAAAgB,GAAA,CAEF6L,aAAgB7M,EAAA,OACf,CAAAD,6BACc,CACVgK,EAAc,kBAAM,SAAkB,SAAMnL,IAAA,UAC5CsL,QAAkB,IAAA,WACI,GACP,SAAA,EACA,GAAA,CAGXrL,MAAAA,GAAW,OAAS,QAAAgO,EAAA,IAAAmB,GAAAA,EAAA,GAAA,CAAA,EAChBnP,EAAA,SAAA,EACIoO,GAGNpO,MAAAA,CACO,MAAA,0CAAA,IACG,OAAA,CACV+B,CACAM,IACArC,EACF,SAAAmB,EAAA,SAAA,CAEF,KAAG,SACL,MAAA,eAAED,aAEF,UACEE,SAAK,aAAA,CAAA,CACC,CAAA,CACgB,CAAA,CAAA,CACvB,CAAA,EAAAD,EAEO,IAAA,CAAA,SACG,kBAAA,CAAA,CAEhB,CAAA,CAAA,CAGH,CAAA,CAAG,CAAmB,SAEnBuO,GAAA,CAAA,MAAAP,CAGb,EAAA,OAEA,KAAA,CAAqBA,YAAAA,EAAS,QAAAE,CACtB,EAAAF,EAAEC,CAAaC,OAAAA,EAAYF,YAAAA,EAC3B,KAAAQ,EAAEC,iBAAAA,CAAQC,EAAAA,EAAaF,IAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,YAAAA,EAAAA,QAAAA,EAAMG,GAAAA,GAAAA,YAAAA,EAAAA,QAAAA,EAAqBV,EAAAA,GAAAA,EAClDW,EAAgBC,GAAkB,IAAA,CAClCC,GAAAA,CAAAA,EACN,OACMC,MAAAA,EAAAA,EAAgC,KAAAC,GAAA,QAAA,KAAAA,EAAA,IAAA,CAAA,EACpC,GAAI,CAACF,EAAU,OACTG,KAAAA,CACN,KAAAC,CAAY,EAAAD,EACJC,OAAF,IAAA,gBAAAA,CAAA,CAAEA,EAASD,CAAAA,EAAAA,CAAAA,CAAAA,EACXE,OAAAA,EAAAA,EAAgBC,CACfD,SAAAA,EAAAA,MAAAA,CACLL,MAAUH,aACd,SACE,CAAAU,GAAAxP,EAAA,MAAA,CAAAE,0BACEgP,EAAA,YAAA,EAAA,GAAW,MAAAA,EAAA,CAAY,aAEnBlP,OAAAA,CAAA,GAAA,EACU,CAAA,EACRyP,SAEM,CAAAV,GAAA5O,EAAAG,EAAA,CACE,KAAA,MAAqC,GAEvC2O,GAACjP,EAAA,OAAA,CAGN+O,SAAW5O,CAAAA,EAAAA,EAAAA,CAAW,KAAA,YAAA,CAAQ,EAE7BH,IAAAA,EAAAA,QAAA,CAAAE,SACEC,GAAAA,YAAAA,EAAK,MAAA,CAAA,CAACI,CAAK,CAAA,CAAY,CACvB,CAAA,EAAAP,QAA0BmF,CAAAA,MAAe,kBAAA,SAE5C,CAAA,CAAA,CAAA0J,GAAA1O,EAAA,MAAA,CAGLH,MAAA,qBAAW,SAAA6O,SACNA,EAAAA,MAAe1O,CAAKF,MAAM,oBAAoBC,SAAE2O,CAAAA,CAAiB,CACnE,CAAY,CAAA,CAAA,CAAW,CAAA,CAAqBD,CAAAA,CAAa,CCnOpE,SAASc,GAAW,CAClBZ,iBAAAA,EACAa,SAAAA,EACA/N,SAAAA,EACAgO,MAAAA,EAAQ,EACRhR,QAAAA,EAAUA,IAAM,CAAC,CACnB,EAAG,SACKiR,MAAAA,EAAczQ,EAAO,IAAI,EAEzB,CAAC0Q,EAAcC,CAAe,EAAI9Q,EAAS2Q,CAAK,EAChDI,EAAoB5Q,EAAO,IAAI,EACrC6Q,GAAgB,IAAM,QACpBD,EAAAA,EAAkBxQ,UAAlBwQ,MAAAA,EAA2BE,gBAY7B,EAAG,CAAE,CAAA,EACCC,MAAAA,EAAe/Q,EAAOuQ,CAAQ,EACpCpQ,EAAU,IAAM,CACR6Q,MAAAA,EAAaR,EAAQC,EAAYrQ,QAAQ6Q,YACzCC,EAAoBH,EAAa3Q,UAAYmQ,EAC/CW,IAAmBH,EAAa3Q,QAAUmQ,GAC9CE,EAAYrQ,QAAQ+Q,SAAS,CAC3BC,KAAMJ,EACNK,SAAUH,EAAoB,OAAS,QAAA,CACxC,EACDT,EAAYrQ,QAAQkR,OAAM,EACzB,CAACd,EAAOD,CAAQ,CAAC,EAEpB,KAAM,CAACgB,EAAcC,CAAe,EAAI3R,EAAS,EAAI,EAErDM,EAAU,IAAM,CACd,IAAIsR,EAAcA,IAAM,CACdjS,GAAA,EAEV,OAAIiR,EAAYrQ,SACFA,EAAAA,QAAQsR,iBAAiB,cAAeD,CAAW,EAE1D,IAAM,CACPhB,EAAYrQ,SACFA,EAAAA,QAAQuR,oBAAoB,cAAeF,CAAW,CACpE,CAEJ,EAAG,CAAE,CAAA,EAELtE,GAAW,MAAO3N,EAAS,CAACA,CAAO,CAAC,EAEpC,KAAM,CAACoS,EAAcC,CAAe,EAAIhS,EAAS,EAAK,EAEtDM,OAAAA,EAAU,IAAM,CACd,IAAI2R,EAAeA,IAAM,CACjB,KAAA,CAAEb,YAAAA,EAAaD,WAAAA,CAAAA,EAAeP,EAAYrQ,QAC1CoQ,EAAQ7E,KAAKoG,MAAMf,EAAaC,CAAW,EACjDN,EAAgBH,CAAK,CAAA,EAEvB,OAAIC,EAAYrQ,SACFA,EAAAA,QAAQsR,iBAAiB,SAAUI,EAAc,CAC3DE,QAAS,EAAA,CACV,EAEI,IAAM,CACPvB,EAAYrQ,SACFA,EAAAA,QAAQuR,oBAAoB,SAAUG,CAAY,CAChE,CAEJ,EAAG,CAAE,CAAA,EAEL3R,EAAU,IAAM,CACV8R,IAAAA,EAAQC,WAAW,IAAM,UAC3BzB,GAAAA,EAAAA,EAAYrQ,UAAZqQ,YAAAA,EAAqBa,QAArBb,MAAAA,EAAAA,KAAAA,IACC,GAAG,EACC,MAAA,IAAM0B,aAAaF,CAAK,CACjC,EAAG,CAAE,CAAA,EAGHrR,EAAA,MAAA,CAAKC,MAAM,wBAAuBC,UAChCC,EAAA,MAAA,CACEe,IAAK2O,EACL2B,SAAS,IACT,uBAAqB,KACrBvR,MAAM,WACNI,QAAgBI,GAAA,EAEZA,EAAEI,OAAO4Q,UAAUC,SAAS,eAAe,GAC3CjR,EAAEI,OAAO4Q,UAAUC,SAAS,OAAO,GACnCjR,EAAEI,OAAO4Q,UAAUC,SAAS,YAAY,IAEhC9S,GAEZ,EAAEsB,SAED4O,GAAAA,YAAAA,EAAkBxJ,IAAI,CAAC6J,EAAOlK,IAAM,CAC7B,KAAA,CAAE0M,SAAAA,CAAaxC,EAAAA,EACfyC,EAAkBD,EACpBE,GAAwBF,CAAQ,EAChC,KACJ,OACE3R,EAAA,MAAA,CACEC,MAAM,gBACNwP,MAAO,CACL,kBAAoB,OAAMmC,GAAAA,YAAAA,EAAiBE,KAAK,IAAK,IACrD,wBAA0B,QAAOF,GAAAA,YAAAA,EAAiBE,KAChD,IACA,OACJ,EACAC,SAAS,IAET7Q,IAAK+D,IAAM6K,EAAeE,EAAoB,KAC9C3P,QAAgBI,GAAA,CACVA,EAAEI,SAAWJ,EAAEuR,eACjBpB,EAAgB,CAACD,CAAY,CAEjC,EAAEzQ,UAED,CAAC,CAACiP,EAAM8C,aACPjS,EAAA,SAAA,CACEI,KAAK,SACLH,MAAM,YACNiO,OAAQ,CAACyC,EACTtQ,QAASA,IAAM,CACb4Q,EAAgB9B,EAAM8C,WAAW,CACnC,EAAE/R,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,MAAA,CAAQ,EACnBJ,EAAA,OAAA,CAAMF,MAAM,iBAAgBC,SAAEiP,EAAM8C,WAAAA,CAAkB,CAAC,CAAA,CACjD,EAEV9R,EAAC+R,GAAK,CAAC/C,MAAAA,EAAcgD,aAAY,EAAA,CAAE,CAAC,CAAA,EArB/BhD,EAAMhN,EAsBR,CAAA,EAER,CACE,EACLnC,EAAA,MAAA,CAAKC,MAAM,wBAAwBiO,OAAQ,CAACyC,EAAazQ,UACvDC,EAAA,OAAA,CAAAD,SACEC,EAAA,SAAA,CACEC,KAAK,SACLH,MAAM,kBACNI,QAASA,IAAMzB,EAAQ,EAAEsB,SAEzBC,EAACG,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,CACJ,CAAA,GACLuO,GAAAA,YAAAA,EAAkB3J,QAAS,EAC1BhF,EAAA,OAAA,CAAMF,MAAM,gBAAeC,SACxB4O,GAAAA,YAAAA,EAAkBxJ,IAAI,CAAC6J,EAAOlK,IAC7B9E,EAAA,SAAA,CAEEC,KAAK,SACLgB,SAAU6D,IAAM6K,EAChB7P,MAAQ,gBAAegF,IAAM6K,EAAe,SAAW,EAAG,GAC1DzP,QAAgBI,GAAA,CACdA,EAAEC,eAAe,EACjBD,EAAE2R,gBAAgB,EAClBvC,EAAYrQ,QAAQ+Q,SAAS,CAC3BC,KAAMX,EAAYrQ,QAAQ6Q,YAAcpL,EACxCwL,SAAU,QAAA,CACX,EACDZ,EAAYrQ,QAAQkR,OACtB,EAAExQ,SAEFC,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,GAAA,CAAK,CAAA,EAdxB6F,EAAMhN,EAeL,EACT,CACG,EAENhC,EAAO,OAAA,CAAA,CAAA,EAETH,EAAA,OAAA,CAAAE,SAAA,CACEC,EAAC2I,GAAI,CACHI,SAAS,OACTqF,MAAM,MACN8D,SAAS,SACTC,mBAAmB,UACnBC,IAAK,EACLC,cAAc,aACdpJ,WACEjJ,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,kBAAiBC,SAC3CC,EAACG,EAAI,CAACC,KAAK,OAAO0D,IAAI,MAAA,CAAQ,CAAA,CACxB,EACT/D,SAEDF,EAACyS,GAAQ,CACP7O,OACEkL,EAAAA,EAAiBgB,CAAY,IAA7BhB,YAAAA,EAAgC4D,cAChC5D,EAAAA,EAAiBgB,CAAY,IAA7BhB,YAAAA,EAAgC1L,KAElCnD,MAAM,kBACNY,OAAO,SACPnB,MAAM,oCAAmCQ,SAAA,CAEzCC,EAACG,EAAI,CAACC,KAAK,QAAA,CAAU,EACrBJ,EAAA,OAAA,CAAAD,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACxB,CAAA,CACN,EAAE,IACRF,EAACiG,EAAI,CACHE,GAAK,GAAEvE,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAK+N,CAAS,GAClDlB,OAAOkE,WAAW,iCAAiC,EAAEC,QAChD,UAAS9C,EAAe,CAAE,GAC3B,EACL,GACD7P,MAAM,yCAQNC,UAEAC,EAAA,OAAA,CAAMF,MAAM,eAAcC,SAAC,WAAe,CAAA,EAC5C,GAAA,CAAA,CAAM,CAAC,CAAA,CACH,CAAC,CACJ,CAAA,GACJ4O,GAAAA,YAAAA,EAAkB3J,QAAS,GAC1BnF,EAAA,MAAA,CAAKC,MAAM,oBAAoBiO,OAAQ,CAACyC,EAAazQ,UACnDC,EAAA,SAAA,CACEC,KAAK,SACLH,MAAM,kBACNiO,OAAQ4B,IAAiB,EACzBzP,QAAgBI,GAAA,CACdA,EAAEC,eAAe,EACjBD,EAAE2R,gBAAgB,EAClBvC,EAAYrQ,QAAQkR,QACpBb,EAAYrQ,QAAQ+Q,SAAS,CAC3BC,KAAMX,EAAYrQ,QAAQ6Q,aAAeP,EAAe,GACxDW,SAAU,QAAA,CACX,CACH,EAAEvQ,SAEFC,EAACG,EAAI,CAACC,KAAK,YAAA,CAAc,CAAA,CACnB,EACRJ,EAAA,SAAA,CACEC,KAAK,SACLH,MAAM,kBACNiO,OAAQ4B,IAAiBhB,EAAiB3J,OAAS,EACnD9E,QAAgBI,GAAA,CACdA,EAAEC,eAAe,EACjBD,EAAE2R,gBAAgB,EAClBvC,EAAYrQ,QAAQkR,QACpBb,EAAYrQ,QAAQ+Q,SAAS,CAC3BC,KAAMX,EAAYrQ,QAAQ6Q,aAAeP,EAAe,GACxDW,SAAU,QAAA,CACX,CACH,EAAEvQ,SAEFC,EAACG,EAAI,CAACC,KAAK,aAAA,CAAe,CAAA,CACpB,CAAC,CACN,CAAA,EAEN,CAAC,CAACyQ,GACD7Q,EAACoK,GAAK,CACJtK,MAAM,QACNI,QAAgBI,GAAA,CACVA,EAAEI,SAAWJ,EAAEuR,gBACjBf,EAAgB,EAAK,EACrBpB,EAAYrQ,QAAQkR,QAExB,EAAExQ,SAEFC,EAAC0S,GAAa,CACZ5O,IAAK+M,EACLpS,QAASA,IAAMqS,EAAgB,EAAK,CAAA,CACrC,CAAA,CACI,CACR,CAAA,CACE,CAET,CAEA,SAAS4B,GAAc,CAAE5O,IAAAA,EAAKrF,QAAAA,CAAQ,EAAG,CACvC,KAAM,CAAC8M,EAAgBoH,CAAiB,EAAI7T,EAAS,EAAK,EAC1D,OACEe,EAAA,MAAA,CAAKC,MAAM,QAAOC,SACf,CAAA,CAAC,CAACtB,GACDuB,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,oBAAoBI,QAASzB,EAAQsB,SAC/DC,EAACG,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVP,EAAA,SAAA,CAAQC,MAAM,cAAaC,UACzBC,EAAA,KAAA,CAAAD,SAAI,mBAAA,CAAqB,EACzBC,EAAA,MAAA,CAAKF,MAAM,cAAaC,SACtBC,EAAC2I,GAAI,CACHyF,MAAM,MACNnF,WACEjJ,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,SAAQC,SAClCC,EAACG,EAAI,CAACC,KAAK,OAAO0D,IAAI,OAAOqF,KAAK,IAAA,CAAM,CAAA,CAClC,EACTpJ,SAEDF,EAACmJ,GAAQ,CACP/H,SAAUsK,EACVrL,QAASA,IAAM,CACbyS,EAAkB,EAAI,CACxB,EAAE5S,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,WAAA,CAAa,EACxBJ,EAAA,OAAA,CAAAD,SAAM,WAAA,CAAe,CAAC,CAAA,CACd,CAAA,CACN,CAAA,CACH,CAAC,CAAA,CACA,EACRF,EAAA,OAAA,CAAAE,UACEC,EAAA,IAAA,CACEsP,MAAO,CACLsD,WAAY,UACd,EAAE7S,SAED+D,CAAAA,CACA,EACFyH,GACCvL,EAAC+K,GAAgB,CAACQ,eAAAA,EAAgC5F,KAAM7B,CAAAA,CAAM,CAC/D,CAAA,CACG,CAAC,CAAA,CACJ,CAET,CChVA,MAAe+O,GAAA,8CCAAC,GAAA,2CCAAC,GAAA,2CCEf,SAASC,GAAU,CAAEjT,SAAAA,CAAS,EAAG,CAC/B,GAAI,OAAOA,GAAa,SAAiBA,OAAAA,EACzC,KAAM,CAAC4F,EAAMsN,CAAO,EAAInU,EAAS,EAAE,EACnCM,OAAAA,EAAU,IAAM,CACd8T,QAAQvG,QAAQ5M,CAAQ,EAAEoT,KAAKF,CAAO,CAAA,EACrC,CAAClT,CAAQ,CAAC,EACN4F,CACT,CCaA,MAAMyN,GAAkB,EAElBC,GAAQ,CACZ,YACA,WACA,gBACA,OACA,SACA,WAIA,UACA,YACA,YAAY,EAERC,GAAY,CAChB7M,UAAW,mBACX8M,cAAe,gBACf/U,KAAM,OACNgV,OAAQ,6BACR9G,OAAQ,SACR,mBAAoB,UACpB+G,UAAW,YACXC,WAAY,aACZC,QAAS,UACTC,SAAU,WACVC,SAAU,UACZ,EACMC,GAAc,CAClBtV,KAAM,CACJ,CACEmH,KAAM,UACNF,KAAM,IAAA,CACP,EAEH+N,OAAQ,CACN,CACE7N,KAAM,aACNF,KAAM,QACNxF,KAAM,UAAA,EAER,CACE0F,KAAM,WACNF,KAAM,WACNxF,KAAM,OACN8T,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHJ,SAAU,CACR,CACEjO,KAAM,WACNF,KAAM,WACNxF,KAAM,OACN8T,YAAa,iCACbC,YAAa,EAAA,CACd,EAEHtH,OAAQ,CACN,CACE/G,KAAM,cACNF,KAAM,QACNxF,KAAM,MAAA,CACP,EAEH,mBAAoB,CAClB,CACE0F,KAAM,IACNF,KAAM,KACNxF,KAAM,OACN8T,YAAa,yBAAA,CACd,EAEHJ,QAAS,CACP,CACEhO,KAAM,IACNF,KAAM,UACNxF,KAAM,OACN8T,YAAa,yCACbE,QAAS,OAAA,EAEX,CACEtO,KAAM,WACNF,KAAM,WACNxF,KAAM,OACN8T,YAAa,iCACbC,YAAa,EAAA,CACd,CAEL,EACaE,GAAiB,CAC5BzN,UAAW,CACTzE,GAAI,OACJzC,MAAOA,CAAC4U,EAAG1E,IAAWA,IAAU,EAAI,OAAS,YAC7C9E,KAAM,IACNvK,KAAM,MACR,EACAyT,SAAU,CACR7R,GAAI,WACJzC,MAAO,WACPoL,KAAM,YACNvK,KAAM,IACR,EACAmT,cAAe,CACbvR,GAAI,gBACJzC,MAAO,gBACPoL,KAAM,iBACNvK,KAAM,cACR,EACA5B,KAAM,CACJwD,GAAI,OACJzC,MAAO6U,GACL,MAAO,CAAEpS,GAAAA,CAAAA,KACM,MAAMrD,IAAMD,MAAMyL,GAAGa,MAAMqJ,MAAMrS,CAAE,GACpCzC,MAEd,CACE+U,SAAUA,CAAC,CAAC,CAAEtS,GAAAA,CAAI,CAAA,IAAMA,CAAAA,CAE5B,EACA2I,KAAMA,CAAC,CAAE3I,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3B5B,KAAM,MACR,EACAoT,OAAQ,CACNxR,GAAI,SACJzC,MAAOA,CAAC,CAAEgV,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,YACzCC,SAAUA,CAAC,CAAE/S,SAAAA,CAAAA,IAAeA,GAAY9C,EAAAA,EAAM8C,SAC9CkJ,KAAMA,CAAC,CAAE4J,MAAAA,EAAO9S,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,KAAI8S,EAAQ,KAAO,EAAG,GAClEnU,KAAMA,CAAC,CAAEmU,MAAAA,CAAAA,IAAaA,EAAQ,QAAU,OAC1C,EACAX,SAAU,CACR5R,GAAI,WACJzC,MAAO,WACPiV,SAAUA,CAAC,CAAE/S,SAAAA,CAAAA,IAAeA,GAAY9C,EAAAA,EAAM8C,SAC9CkJ,KAAMA,CAAC,CAAElJ,SAAAA,CAAAA,IAAgB,IAAGA,CAAS,YACrCrB,KAAM,OACR,EACAsM,OAAQ,CACN1K,GAAI,SACJzC,MAAOA,CAAC,CAAEkV,MAAAA,CAAAA,IAAYA,EACtB9J,KAAMA,CAAC,CAAE8J,MAAAA,CAAAA,IAAa,aAAYA,CAAM,GACxCrU,KAAM,QACR,EACA,mBAAoB,CAClB4B,GAAI,mBACJzC,MAAO6U,GACL,MAAO,CAAEpS,GAAAA,CAAAA,IAAS,CACVV,MAAAA,EAAU,MAAM3C,IAAMD,MAAMyL,GAAGpI,SAASsS,MAAMrS,CAAE,EACtD,OAAOV,EAAQ4B,UAAY5B,EAAQY,MAAQZ,EAAQiB,WAAAA,EAErD,CACE+R,SAAUA,CAAC,CAAC,CAAEtS,GAAAA,CAAI,CAAA,IAAMA,CAAAA,CAE5B,EACA2I,KAAMA,CAAC,CAAE3I,GAAAA,CAAAA,IAAU,MAAKA,CAAG,GAC3B5B,KAAM,MACR,EACAqT,UAAW,CACTzR,GAAI,YACJzC,MAAO,YACPoL,KAAM,KACNvK,KAAM,UACR,EACAsT,WAAY,CACV1R,GAAI,aACJzC,MAAO,aACPoL,KAAM,KACNvK,KAAM,OACR,EACAuT,QAAS,CACP3R,GAAI,UACJzC,MAAOA,CAAC,CAAEoU,QAAAA,CAAAA,IAAcA,EACxBa,SAAUA,CAAC,CAAE/S,SAAAA,CAAAA,IAAeA,GAAY9C,EAAAA,EAAM8C,SAC9CkJ,KAAMA,CAAC,CAAEgJ,QAAAA,EAASlS,SAAAA,CAAAA,IACf,GAAEA,EAAY,IAAGA,CAAS,GAAI,EAAG,MAAKkS,EAAQe,MAAM,KAAK,EAAE/C,KAAK,GAAG,CAAE,GACxEvR,KAAM,SACR,CACF,EAEA,SAASuU,GAAkB,CAAElW,QAAAA,CAAQ,EAAG,CAChCmW,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAAEpD,MAAAA,GAAUC,EAAI,EAChB,CAAEmW,UAAAA,CAAcF,EAAAA,EAEhB,CAAC5J,EAAOC,CAAQ,EAAInM,EAAS,CAAE,CAAA,EAC/B,CAACiW,EAAkBC,CAAmB,EAAIlW,EAAS,CAAE,CAAA,EACrD,CAACmW,EAAUC,CAAW,EAAIpW,EAAS,EAAK,EACxC,CAACqW,EAAkBC,CAAmB,EAAItW,EAAS,EAAK,EAE9DM,OAAAA,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAM4L,EAAQ,MAAMtM,EAAMyL,GAAGa,MAAMxM,KAAK,EACxCyM,EAASD,CAAK,CAAA,MACJ,CAAA,CACVpK,MACF,SAAA,CACC,GAAA,CAEU,MAAAyU,EAAA3W,EAAA,GAAA,aAAA,KAAA,EACP4W,EAAA,CAAA,EACF,EAAA,CACA,MACG,MAAAhW,EACK,KAAAiW,CAAA,EAAEjW,MAAAA,EAAAA,OAAOiW,GAAAA,IAAAA,GAAAA,YAAAA,EAAAA,UAAAA,EAAK,MAChBA,EAAAA,KAAAA,KAA6B,OAAA,IAC5BC,EAAaF,CAAA,CAAA,MACX,CAAA,CACTN,IAAwB,EAAA,IAExBpU,EAAAA,MAAcN,CAChB,GAAA,+BACF,MAAG,QACL,SAAK,KAEL,UACE,CAAA,CAAA7B,GAAAuB,EAAA,SAAA,CAAQ,KAAA,SAAqC,MAAA,cAAiB,QAAAvB,WAC1DuB,EAACvB,EAAAA,CACY,KAAA,GAAA,CAAe,CAAA,CAAA,EAAuBA,EAAAA,SAAAA,CAAQsB,SACzDC,EAAK,KAAA,CAACI,SAAK,CAAAJ,EAAAG,EAAA,CAAK,KAAA,UAGpBH,CAAAA,EAAAA,aAAA,IAAAA,EAAA,MAAA,CAAAD,OACEA,SACEC,GAAW,QAAA,GAAa,cAAW,WAE1B,EAAA,SACK,MAAA,CAAA,CAAA,CACD,CAAA,CACM,CACjB,EAAAH,EAAA,OAAA,CAAA,SACD,CAAAA,EAAA,IAAA,CAED,SAAM,CAAA,iDAAAG,EAAA,MAAA,CACJ,MAAA,sBAENH,SAAA,CAAA,CAAAE,MACEF,eAAA,MAAG,kBAEU,OAAAgT,EAAA,GAGLvT,MAAO,eACPuK,MAAO,eACP4L,OAAQ5C,EAAAA,EAEV,CACEvT,MAAO,eACPuK,MAAO,eACP4L,OAAQ1C,EAAAA,CAEV,EAAA,IAAA,CAAA,CACEzT,MAAAA,EACAuK,MAAAA,EACA4L,OAAAA,CAAQC,IAEVvQ,EAAK,QAAA,CAAE7F,SAAAA,CAAAA,EAAAA,QAAAA,CAAOuK,KAAAA,QAAO4L,KAAAA,sBAAO,MAAAnW,EAC5BS,QACEC,EAAA,SAAA,oBAAAV,GAAAA,IAAA,gBAAA,CAAAsV,EAAA,SAAA,kBACE3U,SAAKK,GAAA,CACAwB,EAAA,SAAA,kBAAAxB,EAAA,OAAA,KACLhB,CAAAA,CACAG,EAAAA,IAAAA,SAKAkW,MACSC,IAAAA,GACT,MAAA,KACD,OACD5V,IAAA,CAAA,EAAUyV,IAAAA,EAAAA,OAAAA,CAAQ3R,SAAI+F,CAAA,CAAA,CAAGxF,CAAM,CAAA,CAAA,CAAY,CAAA,CAAA,CAC3C,CAAA,EAAAyQ,EAAOjL,OAAAA,EAAAA,EAAAA,KAAAA,CAAAA,MAAa,iBAAA,SAEvBiL,EAAA,OAAA,OAAA,EAAA,IAAA,CAAAe,EAAA/Q,IAAA,CACG,MAAAwI,EAAAxI,EAAA,OAAA,OAAA+Q,CAAA,EA6BPf,CACW,KAAA7U,CAAgBF,EAAAA,EAEtB,GAAA,CAAAmU,GAAuB4B,CAAAA,EACjB,OAAA,KAAE7V,GAAAA,CAAS4V,KAAAA,EACb,MAAAtW,EAA8B,SAAAiV,CAClC,EAAIN,GAAAjU,CAAA,EAAEG,OAAAA,OAAAA,GAAAA,aAAMb,EAAAA,EAAAA,EAAAA,CAAAA,GAAoB2U,UAAmB,aAC/CM,IAA6BqB,EAAA/Q,CAAA,GAEjC,OAAA1E,GAAA,aACIA,EAAAA,IAAoB0E,CAAY,GAEpCjF,EAAA,KAAA,CACI,cAA4B,CACvBO,KAAAA,CAAgB,CACzB,EAAAP,EAAA,OAAA,CACA,sBACEE,SACEC,CAAAA,EAAKgT,GAAA,CAAC5S,SAAAA,CAAAA,CACNP,EAAAA,GAAAA,EAAA6D,EAAA,CAAY,SAAA,CAAA,IAAA1D,EAAA,QAAA,CAAeD,MACzBC,mBAAYT,SAAAA,CAAAA,CAAiB,CAC5BiV,CACC,CAAA,CAAAzU,CAEE,CAAA,EAAAF,EAAa,OAAA,CAAA,MAAoB2U,mBAAAA,SAAiB,CAAAxU,EAAA,SAAA,CAErD,KAAA,SAEHH,MAAA,cAAY,SAAAiF,IAAA,EAAkB/E,QAC5BC,IAAA,CACO,MAAA+V,EAAA,MAAA,KAAAjU,EAAA,SAAA,EACC,GAAAgD,EAAA,EAAA,OACIA,EAAMhD,EAAA,UAAAgD,EAAA,CAAA,IACDA,EAAA,CAAA,EAAA+Q,EACbE,EAAqBC,CAAAA,EAAAA,EACrBlU,EAAW,UAAAiU,CACT,CACajR,EACbiR,SAAAA,EAAAA,EAAkBE,CAClBnU,KAAAA,WACF,IAAA,SAAA,CACF,CAAA,CAAE/B,EAAAA,EAAAA,SAEG,CAAA,KAAM,SAAA,MAAe,cAAS,SAAE+E,IAAAgQ,EAAA,OAAA,EAEvC9U,QAAA,IAAA,CACO,MAAA+V,EAAA,MAAA,KAAAjU,EAAA,SAAA,EACC,GAAAgD,EAAAhD,EAAA,UAAA,OAAA,EAAA,CACNb,MAAU6D,EAAMgQ,EAAAA,UAAmBhQ,EAAA,CAAA,IACpBA,EAAA,CAAA,EAAA+Q,EACbE,EAAqBC,CAAAA,EAAAA,EACrBlU,EAAQA,UAAiBkD,CACvB,CACaF,EACbiR,SAAAA,EAAAA,EAAkBE,CAClBnU,KAAAA,aACF,IAAA,WAAA,CACF,CAAA,CAAE/B,EAAAA,EAAAA,SAEG,CAAA,KAAM,SAAA,MAAiB,cAAW,QAAE,IAAA,CAE3CC,EAAA,CACO,SAAA6V,EACC,cAAA/Q,CAAA,EAEQ,EACV+Q,SAAAA,EAAAA,EAAAA,CAAAA,KACe/Q,SACjB,IAAC,MAAA,CACH,CAAA,CAAE/E,CAAAA,CAEG,CAAA,CAAA,CAAM,EAAAuN,CAAA,CAAa,CAAA,CAAQ,CAAA,EAAAzN,EACzB,MAAA,CAAA,MAUJ,yBAAA,SACL,CAAAG,EAAA,IAAA,CAEP,SAAA,mDAAA,CAGHH,EAAAA,EAAA,IAAA,CAAW,SAAA,CAAA,wBAAAG,EAAA,KAAA,EAAA,EAAA,aAAA,IAAAA,EAAA,IAAA,CAAwBD,SAC9B,QAAAO,GAAA,CACHT,EAAAA,eAAA,EAAAE,EAAG,UAAA,CAAA,CAKM,KAAA,WAAA,GAEDQ,KAAe,eACjBuB,CAAAA,CACE,EACQ,SAER,oCAAA,CAAA,EAAA,IACQ,QAAA,CAAA,CAAA,CAAA,CACP,CAEL,EAAA9B,EAAA,IAAA,CAAA,MACD,gBAED,SAAK8U,EAEP,QAAA1B,IAAA,OAAAA,EAAA,YAAA,CAAA,EAAIvT,EAAA,IAAA,CAGRG,MAAA,CAAS,QAAA,OACN8U,eAAAA,gBAGHjV,WAAA,QACS,EAAA,SACI,CAAAG,EAAA,SAAA,CACTkW,KAAgB,SAChBC,MAAY,QACd,QAAA,IAAAf,EAAA,EAAA,EAAErV,SAEFC,eAAA,CAAA,EACOH,EAAA,SAAA,CACLC,KAAM,SACNI,SAAekV,EAAAA,QAAAA,GAA0BrV,QAC1C,IAAAmV,EAAA,EAAA,EAGDrV,SAAA,CAAAG,EAAAG,EAAA,CACO,KAAA,MAAA,CACLc,EAAAA,IAAAA,SAA8BmS,CAC9BlT,SAAegV,cAAgB,CAAEnV,CAAAA,CAE5B,CAAA,CAAA,CAAM,CAAA,CAAA,CAAU,CAAA,EAAAkV,GAAMjV,EAAAoK,GAAA,CAAA,MAAmB,QAAA,QACvC9J,GAAA,CACPA,EAAA,SAAAA,EAAA,eAGJN,EAAAA,EAAM,GAGEM,SAAaA,EAAAA,GAAiB,CAChC4U,SAAAA,EAAiB,SACnB,cAAAD,EAAA,cACF,MAAAjK,EAAEjL,iBAAAA,EAGA8V,SAAUZ,CAASY,UAEnB7K,KAAAA,CAAAA,IACA+J,KACW,OAAE/I,EAAAA,UAAAA,EAAAA,aAAAA,EAAAA,EAAmBlK,EAAA,UAAA,KAAAkK,CAAA,CAE9B,EACS8I,QAAAA,IAAAA,EAAmBsB,EAAAA,CAAiBpK,CAAAA,CAE3ClK,CAAOgT,EAAAA,GAAAA,KAAqB,CAC9B,MAAA,QACF,QAAAxU,GAAA,CACA7B,EAAAA,SAAeyW,EAAAA,eAChBE,EAAA,EAAA,CAKK,EACNlV,SAAgBF,EAAAqW,GAAA,CACV/V,UAAAA,EACF8U,QAAAA,IAAAA,EAAyB,EAAA,CAAA,CAC3B,CAAA,CACF,CAAA,CAAA,CAAErV,CAEW,CACX+U,SACArW,GAAe2W,CAAyB,MAAApK,EACzC,iBAAA+J,EAEJ,SAAA1U,EAGP,SAAAY,EAEA,SAAA4U,EACE7K,cAAAA,EACA+J,QAAAA,CAAAA,EACA1U,SACAY,MAAAA,EAAAA,CAAAA,CAAAA,EACA4U,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,GAAAA,YAAAA,EAAAA,OAAAA,IAAAA,EACAO,EAAAA,IACA3X,OAAAA,EAAAA,IAAAA,CACC,GAAAM,GAAAuX,GAAAxC,GAAAwC,CAAA,EAAA,CACO5O,MAAAA,IAAwB,QAC1B3I,GAAAA,CAAa8W,EAAAA,QAAAA,CAAAA,CACb,KAAApQ,EAEA8Q,KAAAA,CACNnX,IAAU,CACJL,MAAYuX,EAAAA,EAAAA,cAA2BA,UAAAA,CAAAA,IAAc,EAEjDE,GAAenX,EAAAA,CAAAA,IACTiX,IAAAA,WAAwB7Q,EAAAA,QAAAA,EAAAA,CAAAA,IAAAA,KAAiBgR,EAAA,MAAAZ,EAAApQ,CAAA,EAGjD,CAAA,CACEgR,CAAiD,EAAA,CAAA1X,EAC5CuX,CAAA,CAAA,EACChX,EAAAA,MAAAA,CACR,GAAA,yBACF,MAAA,QAAA,SACD,CAAA,CAAA,CAAAb,GAAAuB,EAAA,SAAA,CACH,KAAA,SACEjB,MAAUuX,cAEd,QACE7X,EAAQ,SAAAuB,EAAAG,EAAA,CAA+B,KAAA,GAAA,EAEnC,CAAA,EAAaH,EAAA,SAAA,CAASF,SAAMD,EAAA,KAAA,CAAuBpB,SAAAA,CAAAA,EAAAA,OAAAA,MAAAA,WAAAA,CAAAA,CAAQsB,CACpD,CAAA,EAACK,EAAK,OAAA,CAAG,SAAE,KAGpBJ,SAAAH,EAAA,OAAA,CAAAE,IAAAA,EACEA,SAAKhB,GAAW,CAA4BuB,EAAA,eAAA,EAE9CN,MAAAyE,EAAA,IAAA,SAAAnE,EAAA,MAAA,EAAe0L,EAAA,CAAA,EAAIjM,EAAAA,QACjB,CAAAT,EAAAgO,IAAA,CACOiJ,EAAAA,CAAAA,EAAAA,GAAAA,YAAAA,EAAAA,WACY,aAEEvK,EAAAsB,CAAA,EAAAtB,EAAAsB,CAAA,EAAA,QAAA,eAAA,EAAA,EAAA,QAAA,OAAA,EAAA,EACjBtB,EAAasB,CAAA,EAAahN,EAAAA,CAAEI,EAAM,QAAA,YAAA,EAAA,EAElC+D,CAAKiS,EACIpJ,EAAG,OAGDA,EAAAA,CAIPtB,OAAAA,EACF,KAAAjN,EAAA,OAAA,KAAA,CACD,EACO2I,EAAAA,OAAAA,QACRiP,EAAY1W,IAAAA,EAAMxB,GAAA,MAAAA,IACT,EACPuN,SAAAA,CAAAA,EAAAA,IAAAA,CACA4K,mBAA0B,CAC3B,SAAA,CAAA5W,EAAA,OAAA,UAEc,UACf2W,CAAAA,EAAAA,EAAAA,SAAmB,CACT,SAAA,GACZ,SAAA1V,EAAElB,SAEFO,GAAA,CAAAP,EACEO,EAAA,OAAA,KAAA,CAAAP,EACEA,aAAMhB,EAAA8W,EAAA,KAAA,OACNhW,KAAAA,OACEgX,SAAQ,CAAA7W,EAAA,SAAA,EAAA,EAAAqT,GAAA,IAAApT,GAAAD,EAAA,SAAA,CACRiB,MAAAA,WACiBqS,GAAArT,CAAA,CACAK,CAAAA,CAAAA,CAAAA,CAAc,CAC/B,CAAA,CAAA,CACAwW,CAAyCC,CAAAA,GAAAA,GAAAA,EAAAA,GACpCT,CAAA,IADoCS,YAAAA,EACpC,MADoCA,YAAAA,EAAAA,KAAAA,EACpC,CAAA,CAAMhX,KAAAA,EAIT,KAAA0F,EAAoB1F,KAAAA,EAAiB,YAAAgU,EACrC,QAAAE,EACK,YAAAD,CACJ,IAGJrO,IAAAA,OAAMF,EAAAA,IAAAA,CAAMxF,SAAAA,EAAAA,QAAAA,CAAM8T,SAAAA,CAAAA,EAAAA,OAAAA,CAAaE,SAAAA,MAAAA,CAASD,EAAAA,EAAAA,SAAAA,CAAkB,KAAA,iBAEzD,SAAA/S,EACElB,WACE,IAAAvB,GAAAwB,EAAA,SAAA,CAAAD,MACEC,EAAA,GAAM,SAAAxB,EAAA,KAAA,CACNwB,CAAAA,CAAA,CAAA,CACEyF,CAAK,CAAA,CACMuO,CACX/S,EAGEjB,MAAexB,CAAKwD,mBAAUzC,CAAAA,SAC/B,CAAAS,EAAA,OAAA,CAAC,SACK2F,CAAA,CACJ,EAAA,IAAA3F,EAAA,QAAA,CACN,KAAAC,EAEP,KAAAwF,EAEA,YAAAsO,EACEhU,aACE,QAAA,CAAAiU,EAAAjU,SAAAA,EACEA,KAAO4F,IAAAA,UAAAA,6BAAAA,KAAW,YAClB,MACE1F,eAAAA,MACAwF,WAAAA,GACAsO,QAAAA,CAAAA,CACA8C,EAAAA,IAAmB,WAAW7C,EAAAA,OAAAA,GAAAA,EAAAA,WAAAA,CAC9B/S,GAAAA,6BACAzC,SACkBuW,EAAA,IAAAiC,GAEZhX,EAAA,SAAA,CAEM,MAAAgX,EAAA,IAAA,CACG,CAAA,CAAA,CAAA,CACfC,CAAY,CACZhD,CAAAA,CAAiB,GAIfpU,EAAa,SAAA,CAAA,SACVkV,CAAAA,EAAAA,SAAAA,CACC,KAAQzV,SAAWmG,MACpB,QAAA,SAAAxE,EAEJ,SACElC,EAAA,OAAA,KAAA,CACN,EAAAA,GAAAiB,EAAA,SAAA,CAITH,KAAA,SAAAE,MAAAA,eACUE,QAAK,IAAA,CAAe6B,EAAA,UAAA,OAAAsU,EAAA,CAAA,EAAQnV,GAAAA,MAAAA,GAAmBlB,EAE/C,SAENC,QAAA,CAAA,CACEC,CAAK,CAAA,CAAA,CACC,CAAA,CAEJ6B,CAAOgT,CAAAA,CACPrW,CAAU,CAAA,CACZ,SAAA4X,GACD,CAAA,UAAAvB,EAGF,QAAArW,CACM,EAAA,OACL,MACDyY,EAAAC,GAAA,IACJ,CAAArC,GAIT,CAASuB,EAAa,OAAA,OAAA,EAAA,OAAEvB,GAAWrW,GAAAA,8BAAAA,KAAAA,UAAAA,EAAAA,OAAAA,OAAAA,CAAAA,CAAAA,EAAW,CAAAqW,CAAA,CAAA,EACtCoC,CAAAA,GAA6B,EAAApY,EAAA,EAAA,EAC7B,CAACgW,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAkBsC,EAAAD,GAAA,IAAA,CACvB,GAAI,CAACrC,EAAyC,OAAAuC,EAAA,SAAA,OAKhD,GAAM,CACN,MAAOC,EAAAA,KAA+B,MAAAC,GAAAA,kCAAsBC,CAAA,CAAA,EACtDJ,GAAAA,CAAAA,MAAAA,QAAAA,CAAAA,EACA,MAAoB,IAAA,MAAA,cAAA,EACtBC,OAAAA,EAAiB,SAAS,EACnBI,CACT,MAAA,CACI,GAAA,CACF,MAAeC,EAAAA,KACbH,MAAAA,CAAAA,EAGE,GAAOI,CAAAA,MAAAA,QAAcF,CAAA,EAAS,MAAA,UAAwB,cAAA,EAC1DJ,OAAAA,EAA0B,SAAA,EACnBI,OACK,CAGR,OAAAJ,EAAA,OAAA,EACII,IACF,CAA8B,CAClCJ,EAAAA,CAAAA,CAAAA,CAAAA,EACOI,EAAAA,EAAAA,UAAAA,OAAAA,EAAAA,SACAG,MAAK,CACZP,GAAAA,0BACO,MAAA,QACT,SAAA,CAAA,CAAA,CAAA5Y,GAAAuB,EAAA,SAAA,CACF,KAAA,SACEwX,MAAAA,cACEK,QAAAA,EAEN,SACE7X,EAAAG,EAAA,CAAQ,KAAA,GAAA,CAAgC,CAAA,cACnC1B,CACOwB,SAAKJ,EAAA,KAAA,CAAe,SAAA,CAAA,iBAAAG,EAAA,QAAA,CAAuBvB,MAAAA,mBAAQsB,oBACpD,CAAM,CAAA,CAAA,CAAK,CAAA,CACV,EAEVC,EAAA,OAAA,CAAAD,SACEF,KAAA,SAAA,CAAAA,EACgBG,UAAAA,CAAA,SAAa,CAAAH,EAAA,KAAA,CAAkBE,SAAC,CAAAC,EAAAG,EAAA,CAAiB,KAAA,oBAC7D,KAAA,IAENN,MAAA,eAAA,CAAe,EAAA,IAAAG,EAAA,OAAA,CAAID,SACjBF,QAAA,CAAAE,CAAAA,CACE,CAAAA,EAAAA,EAAAA,IACEC,CAAK,SAAMA,EAAA,QAAA,CAAoBmJ,KAAK,OAAIrJ,KAAM,SAAiB,YAC/D,uBAAAC,MAAM,QAAa,QAAAO,GAAA,CAErBN,EAAAM,EAAA,OAAA,KAAA,CAAAP,CACE,CAAA,CACO,CAAA,EACL0F,CAAK,CAAA2R,GAAA,MAAA,QAAAA,CAAA,GAAAvX,EAAA6D,EAAA,CAAA,SACO,CAAA7D,EAAA,IAAA,CACZC,SAAM,CAAAE,EAAA,IAAA,UACUoX,EAAA,MACdU,CAAqBxX,EAAAA,YAAAA,EAAc,OAAA,EAAA,IAAA,GAAA,IAAAT,EAAA,QAAA,CACrC,MAAA,gBACD,SAAA,CAAA,IAAA2X,EAAA,OAAA,cAAA,CAAA,CAED,CAACJ,CAEC,CAAArX,EAAAA,EAAAA,KACEF,CAAAE,MAAAA,uBACE,WAA4BiF,IAAAA,GAAAA,SAAAA,OAAAA,EAAAA,KAAAA,CAAW,SAAA,CAAAhF,EACdgF,OAAAA,CACZ,MAAA,SACTwS,EAAAA,KAAAA,GAGN,OAAA,KAAAO,CAAA,EAAA,MAAAzK,GAAAyK,EAAAzK,CAAA,IAAAuI,EAAAvI,CAAA,CAAA,CAAU,EAAA,EAAA,CACP8J,EACCrX,SACEC,GAAA,CAAA,EACSH,EAAA,OAAA,CACLmY,SAAAA,CAASlD,GAAUlJ,EAAMmM,IAAAA,EAAAA,EAAAA,OAAAA,QAAAA,MAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAAA,YAAAA,EAAAA,MAAAA,YAAAA,EAAAA,KAAAA,EAAAA,CAAAA,CAAAA,KAAAA,EAEvBE,KAAAA,EAEA,KAAAhY,CAIJ,IAAA4V,EAAApQ,CAAA,EAAA5F,EAAA6D,EAAA,CACD,SAAA,CAAA7D,EAAA,OAAA,CAGDA,MAAA,uCACGyT,CAAAA,EAAUuC,IAAS5V,IAAAA,IACVA,WAAAA,EAAmBwF,CAAA,IAAO,KACvBoQ,IAAAA,IAAAA,EAAapQ,CAAA,CAAGN,CACxBQ,CAAAA,EAAAA,GAAAA,CAAAA,CAAMF,EAAAA,KAAAA,CAAAA,CAAMxF,CAAAA,CAAAA,CAAAA,EAAAA,CAEX,CAAAF,EAAAA,EAAAA,IAAAA,CACE,SAAY,CAAAC,EAAA,QAAA,CAAA,SAA6B,+BAMrB,CAAA,EAAAA,OACT,CAAA,CAAA,EAAAA,EAAA,QAAA,CAAA,SAEX,wDACP,CAAA,CAAA,CACI,CAAA,CAAA,CAET,CAAA,EAEJH,IAAA,SAAAG,EAAA,IAAA,CAAAD,MAAAA,QACE,SAAOC,EAAA,QAAA,CAA6B,SAC/B,4BACL,CAAA,CAAO,CAAA,EAEPH,EAAQ,IAAA,CAAA,SACN,CAAAgY,GAAAhY,EAAA6D,EAAA,CAGT4T,SAAkB,CAAAtX,EAAAgB,GACjBhB,CAAS,aAAA,+BAAOD,WACdC,EAAA,MAAA,CAAO,MAAA,SAAiC,SAAA,wEAAA,CAG5CH,EACGgY,QACChY,IAAAA,CAAAE,MAAAmY,EACcd,EAAA,OAAAvB,GAAA,CAAA/T,EAAA,UAAA,KAAAiW,GAEVI,OAAAA,MACE,EAAA,MAAA7K,GAAAyK,EAAAzK,CAAA,IAAAuI,EAAAvI,CAAA,CAAA,CAAW,CAAA,EAAQvN,GAAC,CAAAmY,EAAA,OAAA,CAGf3O,GAAA,4BAAA,QAQL,CAE4BwO,IAAAA,EAAAA,CAAAA,GAAAA,EAAAA,UAAAA,GAAAA,CAAAA,EAEtBE,MAAAA,EAAeG,EACC,OAAe9K,GAGrC+K,IACIC,IAA4B,MAAA,EAAAlF,EAAA,GAE9BtR,EAAA,UAAAwW,EACF/O,GAAA8O,EAAA,oCAAAjF,EAAA,kCAAA,oBAAA,EACA3U,GAAA,MAAAA,GAIM4Z,EACN,SAAmBrY,EAAA,SAAA,CAEFsY,KAAAA,SACjB,MAAA,SACAxW,SAAmBwW,CAAAA,EACnB/O,SACE8O,kBAIF5Z,CAAU,CACZ,CAAA,EAAA,GAAA,CAAA,CAAEsB,EAAAA,EAAAA,GAEF,CAAA,aACO8X,EAAA,8BAAA,oBAAA,kBACCA,EAAA,SAAA,OAAA,YACKT,CAAAA,EACZ,UAAAA,EAED7N,GAAQ,oBAAA,cAIdvJ,EACE+J,SAAAA,YAKAG,KAAAA,eACShK,SACP4B,SAAmBsV,CAAAA,EACnB7N,SAAUsO,EAAoB,eAAA,SAC9BpZ,CAAU,CAAA,CACZ,CAAA,CAAA,CAAEsB,CAAAA,CAEF,CAAA,EAAAF,EACO,UAAA,CAAA,SACC,CAAAA,EAAA,KAAA,CAAA,YACKuX,EAAAA,CAAwBrX,KAAAA,kBAEa,KAC1C,IACI,MAAA,eAAA,CACZ,EAAA,IAAAC,EAAA,OAAA,CAENH,SAAA,QAAA,CAAAE,CAAAA,CACE,CAAAA,EAAAA,EAAAA,IACEC,CAAK,SAAMA,EAAA,QAAA,CAAkBmJ,MAAK,CAAU,MAAA,MAAiB,EAC7DpJ,KAAM,OAAa,MAAAmX,EAErBlX,SAAA,GAAAD,WACE,CACS,GAAAO,EAAA,OAAA,MAAgB,CAAAA,EAAA,OAAA,SAClB,GAAA,CACE4W,UAAAA,UAAAA,UAAAA,EAAAA,OAAAA,KAAAA,EACC3N,GAAA,kBAAA,OACQ,CACVA,GAAUjK,0BAAAA,CAAO,EACrBgB,CAEA,CAAI,CACFkJ,CAAAA,EAAAA,EAAAA,IAAAA,CACAD,SAAAA,CAAAA,EAA4B,SAAA,CAAA,cAE5B3I,MAAAA,SACA2I,SAAAA,CAAAA,EACF,QAAA,IAAA,CACF,GAAA,CACD,UAAA,UAAA,UAAA2N,CAAA,EAEHrX,GAAA,0BAAA,CAAAE,MACEF,CACO0J,GAAA,kCAAA,CACC,GAENrJ,SAAe,CAAAF,EAAAG,EAAA,CACT,KAAA,WACFqJ,CAAUC,EAAAA,IAAAA,EAAAA,OAAAA,CACVF,SAAAA,MAAoC,CAAA,CACtC,CACE3I,CAAAA,EAAAA,KAAAA,iCAAcN,UAACuI,EAAA,iCAAA,WAAA,YAAAA,EAAA,eAAA,CACfU,KAAAA,CAA4C,KAC9C1J,EAAA,SAAA,CACF,KAAA,SAAEE,MAAAA,SAEG,SAAM,CAAAmX,EAAW,QAAIlX,IAAA,CAAAD,GAAM,CAAW,UAAA,MAAA,CACnC,KACE2J,CACY,CACdwN,CAENrX,MAAA,CACO,MAAA,+BAAA,CACC,GAENK,SAAe,CAAAF,EAAAG,EAAA,CACT,KAAA,OACFqJ,CAAAA,EAAAA,IAAAA,EAAUE,OAAM,CAAA,SACRwN,OAAAA,CAAAA,CAAAA,CACP,CAAA,EACH,MAAY,OAAA,GAAArX,EAAA,QAAA,CACVe,MAAAA,gBACAM,SAAM,CAA+BgW,EAAA,OAAA,aAAA,CAAA,CACvC,CAAA,CACF,CAAA,EAAA,CAAA,CAAAA,GAAArX,EAAA,UAAA,CAAEE,SAAAA,CAAAA,EAEFC,UAAK,CAAA,MAAM,gBAAO,SAAIA,EAAA,QAAA,CAAAD,SAAM,oBAAA,CAAW,CAAC,CAClC,EACPC,EACJkX,YACQpX,MAAM,CACVoX,MAAAA,MAEJ,EAEF,KAAEA,GACDnX,SACEC,GAASF,SAAM,KAAA,UAAAgV,EAAA,OAAA,OAAA,EAAA,KAAA,CAAA,CAAA,CAAe/U,CAAAA,CAC5B,CAAA,CAAA,CAAO,CAAA,CAAA,CAAyB,CAAC,CAAA,CAEnC,CAAA,CAAiB,CCv7B/B,SAASwY,IAAY,CACb,KAAA,CAAE9W,SAAAA,GAAa9C,EAAI,EACnBiW,EAAaC,GAAY/S,CAAM,EAC/B,CAAEgT,UAAAA,CAAcF,EAAAA,EAElB,GAAA,CAACE,EAAU9P,OACN,OAAA,KAGT,MAAMwT,EAAUvZ,IAEVwZ,EAAqBtB,GACzB,IACErC,EACG3P,IAAI,CAACuT,EAAK5T,IAAM,CACT,KAAA,CAAE7E,KAAAA,EAAM,GAAGwE,CAASiU,EAAAA,EACtB,GAAA,CAACxE,GAAejU,CAAI,EAAU,OAAA,KAC9B,GAAA,CAAE+B,GAAAA,EAAI2I,KAAAA,EAAMpL,MAAAA,EAAOiV,SAAAA,EAAUpU,KAAAA,CAAAA,EAAS8T,GAAejU,CAAI,EAEzD,OAAA,OAAO+B,GAAO,aACXA,EAAAA,EAAGyC,EAAMK,CAAC,GAEb,OAAO6F,GAAS,aAClBA,EAAOA,EACL,CACE,GAAGlG,EACHhD,SAAUgD,EAAKhD,UAAYA,GAE7BqD,CACF,GAEE,OAAOvF,GAAU,aACXA,EAAAA,EAAMkF,EAAMK,CAAC,GAEnB,OAAO0P,GAAa,aACXA,EAAAA,EAAS/P,EAAMK,CAAC,GAEzB,OAAO1E,GAAS,aACXA,EAAAA,EAAKqE,EAAMK,CAAC,GAGd,CACL9C,GAAAA,EACA2I,KAAAA,EACApL,MAAAA,EACAiV,SAAAA,EACApU,KAAAA,CAAAA,CAEH,CAAA,EACAiN,OAAOsL,OAAO,EACnB,CAAC7D,CAAS,CACZ,EAEM8D,EAAWC,KACjBzM,OAAAA,GAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAAG,CAAC9L,EAAGwY,IAAY,SACxE,MAAMrJ,EAAQsJ,SAASD,EAAQ9L,KAAK,CAAC,EAAG,EAAE,EAAI,EAC1CyC,GAAAA,EAAQgJ,EAAmBzT,OAAQ,CAC/B,KAAA,CAAE2F,KAAAA,CAAAA,EAAS8N,EAAmBhJ,CAAK,EACrC9E,IACFiO,EAASjO,CAAI,GACb6N,GAAAA,EAAAA,EAAQnZ,UAARmZ,YAAAA,EAAiBQ,YAAjBR,MAAAA,EAAAA,KAAAA,GAEJ,CAAA,CACD,EAGCxY,EAAA,MAAA,CAAKgC,GAAG,YAAWjC,SAChB6U,EAAWgB,SAASqD,oBAAsB,eACzCjZ,EAAA,MAAA,CAAKF,MAAM,UAASC,SAClBC,EAAA,KAAA,CAAAD,SACG0Y,EAAmBtT,IAClB,CAAC,CAAEnD,GAAAA,EAAI2I,KAAAA,EAAMpL,MAAAA,EAAOiV,SAAAA,EAAUpU,KAAAA,GAAQ0E,IAElC9E,EAAA,KAAA,CAAAD,SACEF,EAACiG,EAAI,CACHhG,MAAO0U,EAAW,eAAiB,GACnCxO,GAAI2E,EACJzK,QAAgBI,GAAA,CACd,GAAIA,EAAEI,OAAO4Q,UAAUC,SAAS,WAAW,EAAG,CAC5CjR,EAAEC,eAAe,EACjB,MAAM2Y,EAAOC,SAASC,eAAgB,GAAEpX,CAAG,OAAM,EACzC0F,GAAAA,EAAAA,CACRwR,EAAU,UAAA,EACRA,MAAiBG,EAAAH,EAAA,cAAA,iBAAA,EACXG,GAENA,EAAmB,MAAA,CAEnB,CACF,CACF,EACF,SAAA,CAAArZ,EAAAG,EAAA,CAAEJ,KAAAA,EAEIK,KAAAA,KAAY+I,IAAK5J,CAAA,CAAA,EAAUA,EAAAA,OAAAA,CACjCM,SAAA,CAAAG,EAAAgT,GAAA,CAAAjT,SACEC,CAAU,CAAA,EAAET,GAAAA,EAAAA,EAAAA,CAAiB,SAE3BM,CAAAA,EAAAA,KAAA,CAAA,CAAA,EAAAG,EAAA,QAAA,CAAAD,SACOyU,CACL,CAAA,CAAAzU,CAAQyU,CAAAA,CAAQ,CAAS,CAAA,CAAA,CAE5B,CAAA,CACI,EACH1P,EAAAvF,CAAA,CAAC,CACL,CAAA,CAGV,CAAA,EACES,EAAA2I,GAAA,CAGN3I,YAAKwY,EACHc,SAAad,OACbzP,WAAS,QACTwQ,mBAAW,UACXpH,cAAmB,4BACnBE,IAAc,EACdD,SAAK,SACLF,WAASlS,EAAA,SAAA,CACTiJ,KAAAA,SAEIhJ,GAAK,mBACL+B,MAAG,QACHlC,kBAAMQ,GAAA,aAGA,KAAA,CACI,OAAAI,CAAEA,EAAAA,EAAWJ,iBAAAA,CAAAA,EAAAA,gBAAAA,UACnBsI,GAAAC,EAAA2P,EAAqB9X,UAArB,YAAAmI,EAAqBnI,YAArB,MAAAkI,EAAA,KAAAC,GAEA,MAAA,EACW,EACf,SAAA7I,EAAAG,EAAA,CAAEJ,KAAAA,WAEIK,KAAK,KAAW+I,IAAK,WAAA,CAAA,CAAS,CAAA,EAAc,SAC5CsP,EAAA,IAAA,CAAA,CACT1Y,KAAAA,EAE0B4K,MAAAA,EAAMpL,SAAAA,EAAOiV,KAAAA,CAAUpU,EAAAA,IAAcP,EAAAyS,GAAA,CAC9D,GAAA3H,EACY3E,MAAI2E,kBAAsB7K,SAAM,CAAAE,EAAAG,EAAA,CAAiBJ,KAAAA,EACnDK,KAAAA,GAAAA,CAAAA,EAAiB,IAAAP,EAAA,OAAA,CAAK,MAC5BA,YAAMC,SAAM,CAAAE,EAAA,OAAA,CAAWD,SACrBC,EAAAgT,GAAA,CAAAjT,UACY,CAAA,CAAER,CAAAA,EAAiBiV,GAAA3U,EAAA6D,EAAA,CACzB,SAEJ7D,CAAAA,IAAAA,EAAA,QAAA,CAAA,MAAA,qBAESC,SAAM0U,CAAA,CAAA,CAAoBzU,CAAEyU,CAAAA,CAAQ,CAAS,CAAA,EAEvDxU,EAAA,OAAA,CAEHA,MAAA,yCAAMF,SAAM,EAAA,CAAA,CAAA,CAAwCC,CAC7C,EACD,EAACR,CAAA,CAAA,CACC,CAAA,CAEb,CAAA,CACG,CCzKd,SAASia,GAAMC,EAAO,CACd,KAAA,CAAE3Q,eAAAA,CAAmB2Q,EAAAA,EACrBtQ,EAAOuQ,KACPJ,EAAcra,IACpB,OACEe,EAAC2I,GAAI,CACHwJ,mBAAoBwH,GAAuB,EAC3CC,eAAiB,GAAEzQ,EAAK9E,KAAM,IAAG8E,EAAK7E,MAAO,GAAE,GAC3CmV,EACJH,YAAAA,EACAxQ,eAAgB,CACd5I,QAAgBI,GAAA,WACVA,EAAEI,SAAWJ,EAAEuR,iBACjByH,GAAAA,EAAAA,EAAYja,UAAZia,YAAAA,EAAqBN,YAArBM,MAAAA,EAAAA,KAAAA,KAEFxQ,EAAAA,GAAAA,YAAAA,EAAgB5I,UAAhB4I,MAAAA,EAAAA,KAAAA,EAA0BxI,EAC5B,EACA,GAAGwI,CACL,CAAA,CACD,CAEL,CC1BO,SAAS+Q,GAAY/D,EAAQ,OAClC,IAAIgE,EAAY,CAAA,EACZC,EAAa,CAAA,EACbC,EAAe,EACnB,QAASlV,EAAI,EAAGA,EAAIgR,EAAO9Q,OAAQF,IAAK,CAChCmV,MAAAA,EAAOnE,EAAOhR,CAAC,EACjBmV,EAAKC,QAAU,GAACD,EAAAA,EAAK3Y,UAAL2Y,MAAAA,EAAcrX,QAChCmX,EAAWvE,KAAKyE,CAAI,EACpBD,MAEAF,EAAUtE,KAAKyE,CAAI,EACfD,EAAe,IACFA,EAAA,GAGrB,CAIElE,GAAAA,EAAO9Q,OAAS,KACf+U,EAAW/U,OAAS8Q,EAAO9Q,OAAS,GAAKgV,GAAgB,GAC1D,CAEA,MAAMG,EAAeJ,EAAW5U,IAAKsJ,GAAWA,EAAOzM,EAAE,EACzD,GAAI+X,EAAW/U,OAAU8Q,EAAO9Q,OAAS,EAAK,EAEhC8U,EAAA,CACV,GAAGA,EACH,CAAE9X,GAAImY,EAAcC,MAAOL,EAAY9Z,KAAM,QAAA,CAAU,MAEpD,CAEL,MAAMoa,EAAOzP,KAAK0P,MAAMR,EAAU9U,OAAS,CAAC,EAC5C8U,EAAY,CACV,GAAGA,EAAUS,MAAM,EAAGF,CAAI,EAC1B,CACErY,GAAImY,EACJC,MAAOL,EACP9Z,KAAM,QAER,EAAA,GAAG6Z,EAAUS,MAAMF,CAAI,CAAC,CAE5B,CACOP,OAAAA,CAAAA,KAEAhE,QAAAA,CAEX,CAEgB0E,SAAAA,GAAaJ,EAAO3Y,EAAU,CAC5C,MAAMgZ,EAAmBrT,EAAM9F,QAAQX,IAAI,kBAAkB,GAAK,GAC5D+Z,EAAgBN,EAAM/M,OAAiB4M,GAAA,CAC3C,GAAI,CAACA,EAAKC,OAAe,MAAA,GACzB,MAAMS,EAAa,GAAElZ,CAAS,IAAGwY,EAAKC,OAAOlY,EAAG,GAC1C4Y,EAAYH,EAAiBE,CAAS,EACxCC,OAAAA,GAAaA,IAAcX,EAAKjY,GAC1B6Y,IAMHJ,EAAAE,CAAA,EAAAV,EAAA,GAEP,GACA,CAAO,EACRjN,EAAA,OAAA,KAAAyN,CAAA,EAEKzN,OAAAA,EAAAA,OAAcA,IAChBA,EAAAA,UAAkB,OAAA,EAAA,EAAA,QAAAM,GAAA,CACpBN,UAA8B,CAC5B,CAAA,EAEJ5F,EAAA,QAAA,IAAA,mBAAAqT,CAAA,EACMnZ,CACN,CACF,SAAAwZ,GAAAV,EAAA,CAEO,MAAAW,KACL,IAAAC,EAAmB,EACnBZ,EAAmB,QAAAH,GAAA,CACnBG,UAAwB,EAAAtV,EAAAiW,EAAA,OAAAjW,IAAA,CACtB,GAAAiW,EAAajW,CAAGA,EAAIiW,KAAAA,UAAsBd,EAAA,EAAA,EACpCc,OAA2C,GAAAA,EAAAjW,CAAA,EAAA,KAAAmW,GAAAA,EAAA,KAAAhB,EAAA,WAAA,GAAAc,EAAAjW,CAAA,EAAA,KAAAmW,GAAAA,EAAA,cAAAhB,EAAA,EAAA,EAAA,CAC/Cc,KACY,MAAcE,EAGfnW,MACT,CACF,CACF,MAAAoW,EAAAd,EAAA,KAAAtV,GAAAA,EAAA,KAAAmV,EAAA,WAAA,EACAiB,IACAH,EAAiBC,GAAA,EAAA,CAAAf,EAAAiB,CAAA,EAC8B,CAC/C,EACF,QAACpW,EAAA,EAAAA,EAAAiW,EAAA,OAAAjW,IAID,QAAaqW,EAAArW,EAAOiW,EAAAA,EAAAA,SAAsBI,IAChBJ,EAAAA,CAAAA,EAAS/V,QAAa+V,EAAAI,CAAA,EAAA,SAAAF,CAAA,CAAA,IAE5CF,EAAgBjW,CAAA,EAAA,CAAA,GAAAiW,EAAAjW,CAAA,EAAA,GAAAiW,EAAAI,CAAA,CAAA,EACLrW,EAAAA,CAAC,EAAIiW,EAAIA,CAAAA,EAAAA,OAAa,CAAGA,EAASI,EAAEC,IAAAA,EAAA,UAAAH,GAAAA,EAAA,KAAAhB,EAAA,EAAA,IAAAxK,CAAA,EAE7CsL,EAASjW,OAAKiW,EAAAA,CAAAA,EAILM,KAIfN,EAAA,QAAAO,GAAA,CAGAP,UAA8BlW,IACpB4I,CAAAA,EAAAA,aAAe,CAAA5I,EAAA,YACC,IAAA,KAAAI,EAAA,SAAgB,EAAA,IAAA,KAAAJ,EAAA,SAAA,EAEtCI,EAAA,cAAAJ,EAAA,KACmCA,EAAA,cAAAI,EAAA,IACA,CAAAA,EAAA,YAC5BsW,GAAoB1W,EAAA,YACA,IAAA,KAAAI,EAAA,SAAA,EAAA,IAAA,KAAAJ,EAAA,SAAA,EAApB0W,CACA,CAA4C,CAAA,EAEvDR,EAAC,QAAAO,GAAA,CAGDP,MAAAA,EAA8BO,EAAA,CAAA,EAAA,QAAA,GAC5BA,EAA2BA,QAAAA,GAAAA,CAC3BA,UAA0B,KAAAE,IACpBvB,EAAAA,iBAAwC,GAClB,CAC1B,CAAA,CAAA,EAEHc,EAAA,OAE4BrT,MAAAA,KAEvB+T,EAAa,CAAA,EACnB,OAAArB,EAAMsB,YACNtB,GAAM1D,SAAkB,CACtB+E,EAAiB,KAAAxB,CAAA,EACfwB,MACA,CACF,QAAA3W,EAAA,EAAAA,EAAAiW,EAAA,OAAAjW,IACA,GAAAiW,EAAajW,CAAGA,EAAIiW,KAAAA,UAAsBd,EAAA,EAAA,EAAA,CACpCc,GAAAA,EAAwBE,SAAShB,CAAKjY,EACpC0Z,OAAmC,MAAAC,EAAAZ,EAAAjW,CAAA,EACjC6W,EAAAA,KAAAA,CAAAA,OACOlO,MAAAA,EAAAA,IAAMxI,KAASA,EAAA,SAAA,EACpB2W,EAAQ,IAAIlO,KAAKzI,EAAE3C,SAAS,EAClC,OAAcsZ,EAAAC,CACd,CAAA,EACF,MAACL,EAAAG,EAAA,CAAA,EAAA,QAAA,GACDF,EAA2BE,KAAAA,CAC3BF,GAAAA,EAAc,IAAAK,GAAAA,EAAA,EAAA,EACZ9Z,MAAiBmD,EACjBiV,KAAOuB,EAAAA,MAAAA,GAAAA,EAAAA,QAAAA,KAAAA,CAAAA,EAAAA,SAAAA,cAAAA,CACP1b,EAGFyb,EAAC,KAAA5W,CAAA,EACD4W,MACA,CAEJD,EAAA,KAAAxB,CAAA,CACAwB,CAAAA,EACDA,CAED,CC7Ka,SAASM,GAAkBC,EAAKA,IAAM,GAAIC,EAAO,CAAA,EAAI,CAClE,MAAMC,EAAgBjd,EAAO+c,CAAE,EAC/B5c,EAAU,IAAM,CACd8c,EAAc7c,QAAU2c,CAC1B,EAAG,CAACC,CAAI,CAAC,EAET7c,EAAU,IAAM,CACd,MAAM+c,EAAyBA,IAAM,CACnC,MAAMpO,EAASoL,SAASpL,QAAUoL,SAASiD,kBAAoB,SAC/Dxb,EAAwC,QAAA,CAAAmN,CAAA,CACxCmO,EACF,gBAAC,iBAAA,mBAAAC,CAAA,EAEDhD,IAAyB,SAAA,oBAAmB,oBAAyB,GAC9D,CAAA,CAAA,ECdI,SAASkD,GAAU,CAChCC,cAAAA,EACAC,kBAAAA,EAAoB,EACpBC,gBAAAA,EAAkB,EAClBC,qBAAAA,EAAuB,GACvBC,mBAAAA,EAAqB,GACrBC,UAAAA,EAAY,WACZC,oBAAqBC,EACrBC,kBAAmBC,CACrB,EAAI,GAAI,CACN,KAAM,CAACC,EAAiBC,CAAkB,EAAIne,EAAS,IAAI,EACrD,CAACoe,EAAYC,CAAa,EAAIre,EAAS,EAAK,EAC5C,CAACse,EAAUC,CAAW,EAAIve,EAAS,EAAK,EACxC,CAACwe,EAAgBC,CAAiB,EAAIze,EAAS,EAAK,EACpD,CAAC0e,EAAcC,CAAe,EAAI3e,EAAS,EAAK,EAChD4e,EAAaf,IAAc,WAEjC7M,OAAAA,GAAgB,IAAM,CACpB,MAAM6N,EAAoBrB,EAAcjd,QACxC,GAAI,CAACse,EAAmB,MAAO,GAC/B,IAAIC,EAAsBF,EACtBC,EAAkBE,UAClBF,EAAkB1N,WAEtB,SAAS6N,GAAW,CAClB,KAAM,CACJD,UAAAA,EACA5N,WAAAA,EACA8N,aAAAA,EACAC,YAAAA,EACAC,aAAAA,EACA/N,YAAAA,CACD,EAAGyN,EACEO,EAAcR,EAAaG,EAAY5N,EACvCkO,EAAkBT,EAAaK,EAAeC,EAC9CI,EAAkBV,EAAaO,EAAe/N,EAC9CmO,EAAiBzT,KAAK0T,IAAIJ,EAAcN,CAAmB,EAC3DhB,EACJC,GACAjS,KAAK2T,IACHH,EAAkB7B,EAClB4B,EACAD,CACF,EACIpB,EACJC,GACAnS,KAAK2T,IACHH,EAAkB5B,EAClB2B,EACAA,EAAkBD,EAAcE,CAClC,EAGAC,IACCT,EAAsBM,EACnBxB,EACAD,KAEJQ,EAAmBW,EAAsBM,EAAc,MAAQ,OAAO,EACtEN,EAAsBM,GAGxBf,EAAce,GAAe,CAAC,EAC9Bb,EAAYa,EAAcE,GAAmBD,CAAe,EAC5DZ,EAAkBW,GAAetB,CAAmB,EACpDa,EACES,EAAcE,GAAmBD,EAAkBrB,CACrD,CACF,CAEAa,OAAAA,EAAkBhN,iBAAiB,SAAUmN,EAAU,CAAE7M,QAAS,EAAK,CAAC,EAEjE,IAAM0M,EAAkB/M,oBAAoB,SAAUkN,CAAQ,CACtE,EAAE,CACDvB,EACAC,EACAC,EACAC,CAAkB,CACnB,EAEM,CACLM,gBAAAA,EACAE,WAAAA,EACAE,SAAAA,EACAE,eAAAA,EACAE,aAAAA,EACAgB,KAAMA,IAAM,CACNlC,EAAcjd,SAChBid,EAAcjd,QAAQof,cAAc,IAAIC,MAAM,QAAQ,CAAC,CAE3D,EAEJ,CC9EA,SAASC,GAAQlF,EAAO,eAChB7E,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAAEL,SAAAA,EAAUC,cAAAA,GAAkB/C,EAAI,EAElC,CAACigB,EAAgBC,CAAiB,EAAI/f,EAAS,EAC/C,CAACggB,EAAoBC,CAAqB,EAAIjgB,EAAS,EAAK,EAElEM,EAAU,IAAM,CACd,MAAM2C,EAAWqF,EAAMmN,MAAMyK,QAAQ,UAAU,GAAK,GAC9CC,EAAMld,EAASmd,KACN5d,GAAAA,EAAQM,KAAKI,KAAOoF,EAAM+X,QAAQxe,IAAI,gBAAgB,CACrE,EACIse,GAAKJ,EAAkBI,CAAG,EACRld,EAAAA,EAASiD,OAAS,CAAC,CAC3C,EAAG,CAAE,CAAA,EAML,MAAMoa,GACHxK,EAAWgB,SAASyJ,sBACnBzK,EAAWgB,SAASqD,oBAAsB,iBAC5C,CAACrE,EAAWE,UAAUoK,KAAcxG,GAAAA,EAAIzY,OAAS,WAAW,EAExDqf,EAAgBC,GACpB,IAAM,CACJzd,EAAO0d,aAAe,EAAA,EAExB,CACEC,UAAW,IACXC,OAAQ,QACRC,iBAAkB,EAAA,CAEtB,EAEMC,EAAY3gB,IACZ,CAAC4gB,EAAWC,CAAY,EAAIhhB,EAASiY,MAAS,EAE9C5E,EAAqBwH,GAAuB,CAChD,EACA,EACA/E,EAAWgB,SAASqD,oBAAsB,eAAiB,GAAK,EAChE,CAAC,CACF,EAED,OACEpZ,EAAA6D,EAAA,CAAA3D,UACEF,EAAA,SAAA,CACEkB,IAAK6e,EACL3f,KAAK,SACLH,MAAQ,gCACNgf,EAAqB,cAAgB,EACtC,IAAGiB,KAAO,SAAW,EAAG,GACzBzQ,MAAO,CAAE4C,SAAU,UAAW,EAC9BhS,QAASA,IAAM,CACb4f,EAAyBE,GAACA,EAAiBjJ,OAAT,MAAmB,CACvD,EACAkJ,cAAsB3f,GAAA,CACpBA,EAAEC,eAAe,EACjBuB,EAAO0d,aAAe,EACxB,EAAE,GACEF,EAAc,EAACvf,SAElB+e,CAAAA,GACC9e,EAAC0I,GAAM,CACLzF,MACE2b,EAAAA,GAAAA,YAAAA,EAAgBhd,OAAhBgd,YAAAA,EAAsBzc,WAAUyc,EAAAA,GAAAA,YAAAA,EAAgBhd,OAAhBgd,YAAAA,EAAsBxc,cAExD+G,KAAK,IACL+W,UAAUtB,EAAAA,GAAAA,YAAAA,EAAgBhd,OAAhBgd,YAAAA,EAAsBvc,GAAAA,CACjC,EAEHrC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAM2V,EAAqB,IAAM,GAAA,CAAM,CAAC,CAAA,CACpD,EACRjf,EAACsgB,GAAc,CACb9N,cAAc,WACd2N,MAAOH,EACPO,UAAWR,EACXnhB,QAASA,IAAM,CACbqhB,EAAa/I,MAAS,CACxB,EACAjO,eAAgB,CACdwG,MAAO,CACL+Q,OAAQ,EACV,EACAngB,QAASA,IAAM,CACb4f,EAAa/I,MAAS,CACxB,CACF,EACAuJ,OAAQ,CACN5f,OAAQyY,SAASoH,IACnB,EAAE,GACE9G,EACJ1Q,SAAS,OACTwQ,WAAW,QACXrH,SAAS,SACT9D,MAAM,SACN+D,mBAAAA,EACAqO,eAAc,GAAAzgB,UAEdF,EAAA,UAAA,CAAAE,UACG,CAAC,GAAC6U,EAAAA,EAAW6L,aAAX7L,MAAAA,EAAuB8L,aACJ9L,EAAW6L,WAAWC,aAA1CC,WACE9gB,EAAA6D,EAAA,CAAA3D,SAAA,CACEF,EAACmJ,GAAQ,CACP9I,QAASA,IAAM,CACD0gB,QAAQ,4BAA4B,IAE7C,SAAY,CACP,GAAA,CACFC,SAASzV,OAAO,OACN,CAAC,CAAA,IAGnB,EAAErL,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,WAAW+I,KAAK,GAAA,CAAK,EAAE,IAClCnJ,EAAA,OAAA,CAAAD,SAAM,uBAAA,CAA2B,CAAC,CAC1B,CAAA,EACVC,EAACoJ,KAAa,CAAC,CAAA,CACf,EAENvJ,EAACyS,GAAQ,CAACtM,GAAG,IAAGjG,SAAA,CACdC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,MAAA,CAAU,CAAC,CAAA,CACvC,EACT2B,GACC7B,EAAA6D,EAAA,CAAA3D,SACGqf,CAAAA,GACCvf,EAACyS,GAAQ,CAACtM,GAAG,aAAYjG,SAAA,CACvBC,EAACG,EAAI,CAACC,KAAK,YAAY+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,WAAA,CAAe,CAAC,CAAA,CACjD,EAEZF,EAACyS,GAAQ,CAACtM,GAAG,YAAWjG,SAAA,CACtBC,EAACG,EAAI,CAACC,KAAK,KAAK+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,UAAA,CAAc,CAAC,CAAA,CACzC,EACVF,EAACyS,GAAQ,CAACtM,GAAG,iBAAgBjG,SAAA,CAC3BC,EAACG,EAAI,CAACC,KAAK,eAAe+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,eAAmB,CAAA,EAC9D6U,EAAWkM,sBACVjhB,EAAA,MAAA,CAAKN,MAAM,MAAM+P,MAAO,CAAE0I,QAAS,EAAI,EAAEjY,SAAA,CACtC,IAAI,GAEP,CAAA,CAAK,CACN,CAAA,CACO,EACVC,EAACoJ,IAAa,CAAA,EACdvJ,EAACyS,GAAQ,CAACtM,GAAG,KAAIjG,SAAA,CACfC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,OAAA,CAAW,CAAC,CAAA,CACxC,EACVF,EAACyS,GAAQ,CAACtM,GAAG,MAAKjG,SAAA,CAChBC,EAACG,EAAI,CAACC,KAAK,UAAU+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,mBAAA,CAAuB,CAAC,CAAA,CACvD,EACVF,EAACyS,GAAQ,CAACtM,GAAG,KAAIjG,SAAA,CACfC,EAACG,EAAI,CAACC,KAAK,WAAW+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,WAAA,CAAe,CAAC,CAAA,CAChD,EACVF,EAACyS,GAAQ,CAACtM,GAAG,KAAIjG,SAAA,CACfC,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,YAAA,CAAgB,CAAC,CAAA,CAC9C,CAAC,CAAA,CACX,EAEJC,EAACoJ,IAAa,CAAA,EACdvJ,EAACyS,GAAQ,CAACtM,GAAK,UAASjG,SAAA,CACtBC,EAACG,EAAI,CAACC,KAAK,SAAS+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,QAAA,CAAY,CAAC,CAAA,CAC3C,EACVF,EAACyS,GAAQ,CAACtM,GAAK,IAAGvE,CAAS,OAAM1B,SAAA,CAC/BC,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,OAAA,CAAW,CAAC,CAAA,CACzC,EACVF,EAACyS,GAAQ,CAACtM,GAAK,IAAGvE,CAAS,KAAI1B,SAAA,CAC7BC,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,WAAA,CAAe,CAAC,CAAA,CAC7C,EACVF,EAACyS,GAAQ,CAACtM,GAAK,IAAGvE,CAAS,YAAW1B,SAAA,CACpCC,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,UAAA,CAAc,CAAC,CAAA,CAC5C,CAAC,CAAA,CACJ,EACTC,EAAA,UAAA,CAAAD,SACG2B,EACC7B,EAAA6D,EAAA,CAAA3D,SACEC,CAAAA,EAACoJ,IAAa,CAAA,IACbwV,EAAAA,GAAAA,YAAAA,EAAgBhd,OAAhBgd,YAAAA,EAAsB5c,KACrBnC,EAACyS,GAAQ,CAACtM,GAAK,IAAGvE,CAAS,MAAKmd,EAAehd,KAAKI,EAAG,GAAEjC,SAAA,CACvDC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,SAAA,CAAa,CAAC,CAAA,CAC1C,EAEZF,EAACmJ,GAAQ,CACP9I,QAASA,IAAM,CACb4B,EAAO0d,aAAe,EACxB,EAAEzf,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,WAAA,CAAsB,CAAC,CAAA,CACpD,EACVF,EAACmJ,GAAQ,CACP9I,QAASA,IAAM,CACb4B,EAAOif,sBAAwB,EACjC,EAAEhhB,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,WAAW+I,KAAK,GAAA,CAAK,EAAE,IAClCnJ,EAAA,OAAA,CAAAD,SAAM,qBAAA,CAAgC,CAAC,CAAA,CAC/B,EACVF,EAACmJ,GAAQ,CACP9I,QAASA,IAAM,CACb4B,EAAOkf,aAAe,EACxB,EAAEjhB,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,WAAA,CAAsB,CAAC,CAAA,CACnD,CAAC,CAAA,CACX,EAEFF,EAAA6D,EAAA,CAAA3D,SAAA,CACEC,EAACoJ,KAAa,EACdvJ,EAACyS,GAAQ,CAACtM,GAAG,SAAQjG,SAAA,CACnBC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAK,GAAA,CAAK,EAAE,IAAAnJ,EAAA,OAAA,CAAAD,SAAM,QAAA,CAAY,CAAC,CAAA,CACzC,CAAC,CAAA,CACX,CAAA,CAEG,CAAC,CAAA,CACI,CAAC,CAAA,CACjB,CAEN,CCtNA,SAASkhB,GAAS,CAChB1hB,MAAAA,EACA2hB,eAAAA,EACAlf,GAAAA,EACAP,SAAAA,EACA0f,UAAAA,EACAC,UAAAA,EACAC,UAAAA,EACAC,eAAAA,EACAC,WAAAA,EAAaA,IAAM,CAAC,EACpBC,gBAAAA,EAAkBA,IAAM,CAAC,EACzBC,wBAAAA,EAA0B,IAC1BC,YAAAA,EACAC,UAAAA,EACAC,cAAAA,EACAC,aAAAA,EACAC,QAAAA,CACF,EAAG,CACKlN,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAACsY,EAAO2H,CAAQ,EAAIjjB,EAAS,CAAE,CAAA,EAC/B,CAACF,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C,CAACkjB,EAAUC,CAAW,EAAInjB,EAAS,EAAK,EACxC,CAACojB,EAASC,CAAU,EAAIrjB,EAAS,EAAK,EACtC,CAACsjB,EAASC,CAAU,EAAIvjB,EAAS,EAAI,EACrCwd,EAAgBrd,IAEdqjB,EAAyBtgB,GAAWugB,GAAA,CAEtCC,EAAAA,EAAYC,EAEdN,IAAgB,YACWtjB,EAAA,SAAA,GAC3BA,SAAoB,CACP,GAAA,CACP,GAAA,CACE,KAAA0W,EAAEA,MAAAA,CAAAA,EAAMjW,MAAAA,EAAAA,CAAAA,EAAU,MAAMiiB,QAAAA,CAAoB,GAC5CvL,IACF1W,EAAoBua,GAAAva,CAAA,GAEpBA,EAAAwb,GAAAxb,CAAA,EAEAsB,EADAtB,IAGgBojB,GAAA,CAAA,GAAAA,EAAA,GAAApjB,CAAA,CAFC,EAIfyiB,EAAU3H,SACZ7E,EAAA,IACA0M,EAAWjd,CAAAA,CAAAA,GACXid,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACApjB,EAAW,OAAS,CAAA,QACV,CACV+B,SAAe,CACf/B,CAAkB,KAElB2jB,EAAAA,KAAAA,CACF,QAAA,GACF,SAAG,EAAA,GAIMG,EAAA,qCACCC,EAAAxW,GAAA,aAAA,CAAA+H,EAAA2E,IAAA,SAEd,MAAA+J,EAAA,SAAA,cAAA,QAAAF,CAAA,EAEsBG,EAAAD,GAAA,YAAAA,EAAA,wBAETzW,EAAAA,MAAyB,KAAAkQ,EAAgB,QAAA,iBAAAqG,CAAA,CAAA,EAEpD,GAAAE,GAAmB1J,EAAuB9M,IAAAA,EAAqB,QAAA,cAAAyW,EAAA,OAAA,EAAA,CACzDA,MAAAA,IAA6BC,QAAsBF,CAAA,EACzD,IAAMG,EAAWhN,EAAMiN,EACCC,CAAAA,EAGtBL,EAAAA,QAIMM,EAAAA,EAAAA,KAA2BC,CAAAA,GAAAA,KAAkB3T,GAAA0T,GAAA,CAAAlJ,GAAA,UAAA,SAAA,mBAAA,CAAA,GAE/CnB,IAEFuK,EAAAA,MAAoBnE,GAKtBrW,EAAAwa,EAAA,yBAAA,MAAAxa,EAAA,KAAAwa,GAEEA,KAAAA,CACAA,MAAAA,EAAkCL,EAAA,KAAA/I,GAAA,CACpC,MAAAqJ,GAAArJ,EAAA,wBACK,OAAAqJ,GAAA,KAAA,IAAAA,GAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgBC,MAAAA,GACjB5a,EAAA2a,EAAA,yBAAA,MAAA3a,EAAA,KAAA2a,GAECA,CACAA,CAAAA,EACFE,EAAArX,GAAA,aAAA,CAAA+H,EAAA2E,IAAA,SACF,MAAA+J,EAAA,SAAA,cAAA,QAAAF,CAAA,EACDG,EAAAD,GAAA,YAAAA,EAAA,wBAEYzW,EAAAA,MAAyB,KAAAkQ,EAAgB,QAAA,iBAAAqG,CAAA,CAAA,EAEpD,GAAAE,GAAmB1J,EAAuB9M,IAAAA,EAAqB,QAAA,cAAAyW,EAAA,OAAA,EAAA,CACzDA,MAAAA,IAA6BC,QAAsBF,CAAA,EACzD,IAAMG,EAAWhN,EAAMiN,EACCC,CAAAA,EAGtBL,EAAAA,QAIMM,EAAAA,EAAAA,SAA2BC,CAAAA,GAAAA,KAAkB3T,GAAA0T,GAAA,CAAAlJ,GAAA,UAAA,SAAA,mBAAA,CAAA,GAE/CnB,IAEF4K,EAAAA,MAAoBC,GAKtB9a,EAAA6a,EAAA,yBAAA,MAAA7a,EAAA,KAAA6a,GAEEA,KAAAA,CACAA,MAAAA,EAAkCV,EAAA,KAAA/I,GAAA,CACpC,MAAAqJ,GAAArJ,EAAA,wBACK,OAAAqJ,GAAA,KAAA,IAAAA,GAAA,MAAA,CAEL,CAAMC,EACED,IACNC,EAAgBC,MAAAA,GACjB5a,EAAA2a,EAAA,yBAAA,MAAA3a,EAAA,KAAA2a,GAECA,CACAA,CAAAA,EACFK,EAAAxX,GAAA,CAAA,QAAA,GAAA,EAAA,IAAA,CACF,MAAAyW,EAAA,SAAA,cAAA,QAAAF,CAAA,EACDE,GAEDA,EAAwB,MAAA,CAGtB,CAAA,EACEA,CACF,gBAAA7F,EACD,eAAAM,GAEK,aAAAE,GACJR,WAAAA,GACAM,SAAAA,EACAE,EAAAA,GAAAA,CACAN,cAAAA,EACAE,gBAAAA,uBACY,EAAA,CACZd,EAAAA,EACiB,IAAA,QACjBG,EAAAA,EAAsB,UAAtBA,MAAAA,EAAsB,SAAA,CACvB,IAAA,CAEDrd,GACEkd,EAAAA,EAAcjd,CAAkB,EAAA,CAAO,CAAA,EAAAD,EAAG,IAAA,CAC1CojB,EAAU,EAAI,CAAA,EACb,EAAE,CAAA,EACLpjB,EAAU,IAAM,CACdojB,IACEV,EAAQ,EAAA,CAGV,EAAA,CAAA5E,EAAgB,CAAA,EACdsF,EAAAA,IAAc,EAChBhF,IAAAJ,IAAA4E,IACE9E,GAGF,EAAIM,CAAAA,GAAAA,IACQ,MAAAqG,GAAA5kB,EAAA,EAAA,EACZ6kB,GAAAC,GAAA,GAAA,EACgB/B,GAASgC,GAAA,MAAA,CAErBH,kBAAAA,IACAC,EAAAA,KAAAA,CACExB,wBAAwBhG,EAAA,QAAA,YAAA,IAAA2H,GAAAH,KAAA,CAAAI,GAAA,EAC1BC,EAAAA,EAAAA,EAC0C,MAAA3C,KAE1C4C,EAAaxP,GAEbqP,EACAH,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,SAAAA,WAAAA,CAAAA,KAC2B7kB,IAAA8c,GAC5BsI,GAAA,CAECzP,GAAAA,EAAAA,CAKAhU,MAAAA,EAAY,KAAA,IAAA,EAAkBgU,GAAWgB,SACzC4M,CAAAA,GAAc,SAAA8B,EAAA,IAAA,KACTH,GAAA,CACLvjB,kBAAY,EACZ,CAAM2jB,CAEJ3jB,MACAuhB,GAAe,QAAA,KAAA,MAEnBE,EAAAgC,CAAA,CAAA,EAEF,CAACriB,KAAsC4S,EAAAA,SAAoBwP,WAAAA,CAAW,EAGxEI,MAA8BpC,GAAA,CAAAF,EAAAT,EAAA,IAAA,EAC9B1F,MAAAA,GAAAA,IACe,OAAA,CAAAuB,GACX,OAAatd,EAAA,MAAA,CACX,GAAA,GAAAgC,CAAiB0L,QACjB,MAAK+W,iBACgB,IAAAC,GAAA,CAAApI,EACE,QAAAoI,EAAA9B,EACpB,QAAA8B,EACHjB,EAAA,QAAAiB,EACKd,EAAA,QAAAc,CACUrlB,EACjB,SAAA,KACAgjB,eAAkB/hB,GAAA,CAEnBkhB,GAAAA,UAIHgD,EAKMG,eAA+B,IAAA,CAErCd,GACE,QAAA,EACE7hB,EACAlC,SAAMD,EAAA,MAAA,OACS,qBACbyc,SAAAA,CAAAA,EAAwBoI,SAAAA,CACxB9B,OAAe8B,GACfjB,QAAeiB,GAAAA,OACAA,EAAAA,OAAAA,QAAAA,WAAAA,IACjB7b,EAAAyT,EAAA,UAAA,MAAAzT,EAAA,SAAA,CACS,IAAA,WACc,QACrBgb,IAGAA,WAAqBvjB,GAAA,CACvBA,EAAA,OAAA,QAAA,WAAA,GAAEP,EAEF,EAAA,CAA+BA,EAE3BgO,MAAQ4W,IAAAA,UAAAA,UAAAA,GACRzkB,SAAgB,CAAAL,EAAA,MAAA,CACd,MAAOa,cACL4b,SAAAA,CAAAA,SAAgC,MACzB,cAAA,SACK,CAAAtc,EAAA2e,GAAA,CAAA,CAAA,EAAA+C,GAAA1hB,EAAA8F,EAAA,CACX,GAAA,IACH,MAAA,2BACF,SAAA9F,EAAAG,EAAA,MACmB,OACZG,KAAS+L,GACZmW,CAAAA,CAAc,CAChB,CAAA,CACF,CAAA,EAAAjjB,IAAA2hB,GAAAlhB,EAAA,KAAA,CACAF,SAAmBP,CAAwB,CAAGQ,GAAAA,EAE9CF,MAAA,CAAW,MAAA,cAAaE,SACtBF,CAAAA,CAAAA,GAAA8hB,CAAA,CAAA,CAAK7hB,CAAM,CAAA,EAAaC,SACrB4e,GAAAA,IACA+C,WAAAA,CAAgBiD,IAAQjD,GAAAA,EACvBA,SAAAA,CAEK,MAAI,4BAAA,KAAU,SAA0B3hB,QAAAA,WACtCyiB,EAAM,EAAA,GAAA3Z,EAAAyT,EAAY,UAAZ,MAAAzT,EAAY,SAAA,CAAG,IAAE,EAE/B,SAAA,QAAA,EAE0C,EAAU,SACvD,CAAA7I,EAAAG,EAAA,CAAKL,KAAM,UAAaC,CAAAA,EAAAA,YAEN4hB,CAAAA,CAAAA,CAAS,CACrB,CAAA,EAEPvH,CAAAA,CAAAA,GAAepa,EACF,MAAA,CAGV,MACQ,iBAAA,SACD4hB,CAAA,CAAA,WACU/hB,EAAA6D,EAAA,CACb8e,SAAAA,CAAAA,EAAc,KAAA,CACdlG,MAAAA,WAAgC,SACzB,CAAAlC,EAAA,IAAA3L,GAAA,CAAA,KACK,CACX,GAAAe,EACH,OAAA0K,EAAEna,MAEFC,EAAW,KAAAC,EACb,QAAA2kB,CACD,EAAAnW,EAEFmT,GAAiB1H,GAAA,YAAAA,EAAA,KAAA1K,EAAWvM,EAAAxB,EAAA,IAAAA,CAAA,MAAAojB,CAAA,GAAA,MAAAA,CAAA,GAAkBjD,IAAAA,EAAAA,GACxC5c,IAAAA,SACPjF,EACEF,GAAA6iB,EAAA,MAAA,UAAUziB,IAAA,aACDkF,gBACC,MAAMqK,GAAAA,IAAAA,UAAAA,IAAAA,SAAU0K,GAAAA,EAAAA,CAAQE,GAAAA,GAAOna,OAAAA,EAAAA,KAAAA,CAAAA,GAAAA,KAAM2kB,GAAAA,WAAAA,CAAAA,GAAAA,UAAYnW,EAEjDxL,CAAAA,cACExB,GAAAA,UAEI,GAEC2Y,CACb,EACUpa,EAAA,KAAA,CACV,MAAA,yBACM8kB,SAAAA,EAAsBC,GAAA,CACjB,MAAAC,EACO,MAAA,GAAA/kB,CAAA,YAERwN,SAAMxI,EAAS,IAAAgV,IAAA,CACfhV,KAAEggB,CACG,GAAAC,GACT,OAAAC,EACKlgB,EAAeJ,GACXugB,IAAAD,IAAA,YAAAA,GAAA,KAAAD,GACTG,GAAA5jB,EAAA,IAAAA,CAAA,MAAA2jB,EAAA,GAAA,MAAAA,EAAA,GACO,OAAAplB,EAAA,KAAA,CACR,SAAAA,EAAA8F,EAAA,OAEC,yCAEQ,GAAAuf,GAAwBtlB,SAEfshB,EAAArhB,EAAAslB,GAAA,CACN/lB,SAAAA,cACmBQ,KAEnBoF,IACC,kBAAA,EAAA,CAAMqK,EAAAA,EAAAA,GAAAA,CAAU0K,OAAAA,GAAWD,SAAAA,EAC3B4K,KAAAA,IACA5hB,kBACExB,EAER,CAAA,CACE,CAAA1B,CACO,EAAAmlB,EACG,CAAA,CAAA,CACFjiB,CAAIlD,CAGC,EAAA,YACKyP,CAAAA,EAAAA,EACV/N,MAAAA,GACKihB,EAAA,OAAA,EAAA,OAAAA,EACL6C,IAAiB,CAAAtL,GAAAnV,KAAA,CAAA,KAAA,CAGZ,GAAAogB,GAELzjB,iBAAAA,EAAAA,EAAAA,GACK4jB,GACY5jB,EAAA,IAAAA,CAAA,MAAAyjB,EAAA,GAAA,MAAAA,EAAA,GAAAM,GAClB1gB,GAAA,GAAAA,GAAA4d,EAAA,OAAA,EAEE+C,GAADxL,GAAA,WAAA,CAAA,CAAAA,GAAA,aACJnV,GAAA,GAAA4gB,IAAAF,IAAAvlB,IAAA,SAAA,OAEPD,EAAA,KAAA,CAAC,MACY,wDAAAC,CAAA,4BAAA6E,KAAA,EAAA,QAAAA,KAAA4d,EAAA,OAAA,EAAA,MAAA,QAAA,IAAAiD,GAAA,4BAAA,EAAA,GAAC,SAtCAnW,EAAAA,EAAS,CAyChC,MAAA,4BACMkW,GAAAA,GACN,SAAavgB,GAAiBnF,EAAA4lB,GAAA,CACtB,OAAA3L,GAAMzK,SAAAA,CAAAA,CAAUmW,EAAAA,EAAAA,EAAAA,GAAAA,CAAqB1L,SAAAA,GACrChX,SAAAA,EAGAuiB,aAAAA,CACN,CAAA,EAAkBvL,EAAAA,GAAAA,CACZwL,UAGN,SAAAhkB,gBAWK,CAAE1B,CAEE,CAAA,CAAO,EAAA,YAAgCkD,EAAAA,EAAAA,CAAAA,CAAIlD,CAEtB,CAEpB0B,OAAAA,EAAAA,KAAAA,CAAAA,SACDzB,EAEDA,EAAAA,CAAO,MACKwP,4BACV/N,GAAAA,EACAogB,SAAAA,EAAAA,EAAAA,GAAAA,CAA2B,SAAArS,EAGtB,SAAA/N,EAELA,aAAAA,CAAAA,CACAogB,EAAAA,EAAAA,GAAAA,CAAAA,OAAAA,EAEH,SAAApgB,EACI,aAAAogB,CACL,CAEP,CAAA,CACH,CACA,EAAA,YACErS,EAAAoV,CAAA,EAAA,CAAA7kB,CAAAA,EAAAA,OACO,WAAAF,EAAA6D,EAAA,CAAA,SAAO,CAAA1D,EAAA,KAAA,CAAA,MAAgCiD,CAAIlD,OAAAA,MAG1CyP,EACA/N,SAAAA,EAAAA,GAAAA,CACAogB,SAAAA,EAAAA,CAA2B,CAGtB,CACLpT,EAAAA,EAAAA,KAAAA,CACAhN,MAAAA,CACAogB,OAAAA,MAAAA,EAEH,SACG7hB,EAAAslB,GAAA,CAfE,SAAA,EAgBN,CAGPtD,CACC,CAAAjiB,CAAAA,CACE,CAAA,CAAA,CACS,CAAA,EAAAnB,IACG,YAAAojB,EAAAhiB,EAAA6lB,GAAA,CACV,SAAAC,GAAA,CAAE/lB,GAEKyiB,GAAY,EAErB,SACSxiB,EAAA,SAAA,CAAA,KACG,SACV,MAAA,cAAED,QAAAA,MAEK,EAAA,MAAS,CAAA,eAAE,KAChB,EAEP,SAAA,YAAA,CAEFnB,CAEU,CAAA,QACiB,CACpB,MAAY,yBACA,SAAA,UACZ,CAAA,EAAA,CACF,CAAA,EAAAA,IAAA,UAAAoB,EAAA,KAAA,CAAED,MAAAA,WAEF,SACO,MAAA,KAAA,CAAA,OACC,CAAA,CACNG,EAAAA,IAAAA,CAAAA,EAAAA,MAAyB,KAAA,CAAA,SAClBF,EAAAslB,GAAA,CAAA,SAAkB,EAAA,CAAM,CAAA,EAAAxgB,CAAE/E,CAClC,CAAA,CAAA,EAEOnB,IAAA,SAAAoB,EAAA,IAAA,CAAC,MAGXA,WAAA,SAASmhB,CAAA,CAAA,EAAwBphB,IAAC,SAAAF,EAAA,IAAA,CAAQ,MAC1C,WACJ,SACY,CAAAuhB,EAAAphB,EACdA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAU,MAAA,eAAUD,YACNyiB,EAAA,CAAApI,EAAA,MAAA,EAAEpV,SAAQ,WAAA,CAAG,CAAEG,CACzB,CAAApF,CAAAA,CACS,CAAA,CAAS,CAAA,CAAE,CAErB,SACCglB,GAEQ,CAAW,MAAAxlB,EAAS,MAAY4hB,EAAAA,SAAAA,CAG5C,EAAA,CAAS,MAAUphB,EAEjBC,IAEA,CACQ,WAAAkd,EACgC,SAAAE,EACvC,KAAAoB,CAEQ,EAAAnC,GAEZ,CAAA,cACE3M,EACF,UAAA,YAET,CAAA,EAEAtQ,OAAAA,EAAwB,IAAA,CAAEG,GAAAA,MAAAA,GAAcwmB,EAAAA,CAAAA,CAAAA,EAAWhmB,EAAAA,MAAAA,CAAY,MAAA,mBAAAgmB,CAAA,GAC7D,qBAA2B,CACrB,SAAA,CAAA/lB,EAAA,KAAA,CAAEkd,SAAAA,CAAAA,CAAYE,EAAAA,EAAAA,OAAAA,CAAUoB,SAAAA,CAAAA,EAAAA,SAAAA,CAAmB,KAAA,SAChC9O,MAAAA,eACJ,SAAAwN,EACZ,QAAA,IAAA,UACStU,EAAA8G,EAAM,UAAN,MAAA9G,EAAM,SAAA,CACP,KAAA,CAAA,KAAA,IAAA,KAAAC,EAAA6G,EAAA,UAAA,YAAA7G,EAAA,WAAA,EACJ,SAAA,QAEL,EACe,EAA8B9I,SACzCF,EAAAM,EAAA,CAAAJ,KACEC,cAAA,CAAKT,CAAAA,CACLM,EAAAA,IAAAG,EAAA,SAAA,CAAAD,KAAAA,SAEIE,MAAK,eACLH,SAAMsd,EACNnc,QAAUic,IAAAA,cACK,kBAAA,SAAA,CACbxN,KAAAA,cAA8B7G,EAAA6G,EAAA,UAAA,YAAA7G,EAAA,WAAA,EAC5BwH,SAAOzF,QAA8C,EAC3C,EAEd,SAAA5K,EAAAG,EAAA,CAAEJ,KAAAA,eAEG,CAAA,CAAM,CAAA,CAAc,CAAE,CAAA,CAAC,CAE9B,CAAA,EAAAC,EACO,KAAA,CAAA,IACC0P,EAAA,SAAA3P,CACIqd,CAAAA,CAAAA,CAER1N,CAAAA,CAA8B,CACwB,SAAAkW,GAC1C,CAAA,OAAAnX,EAEd,SAAAhN,CAAA,EAAE1B,CAEG,MAAA6U,EAAMC,GAAA/S,CAAA,EAAA,CAAiB,GAAAE,CACrB,EAAAyM,EAGbzO,EAAAgmB,GAAAvX,CAAA,EAASiB,EAAAA,GAAAA,EAAAA,CAAAA,EAAY3P,OAAAA,EAAAA,UAAAA,CAAU,MAAM,wBAClC,SAAA,KAET,SAAA,CAAA6U,EAAA,mBAAAqR,CAAA,EAAApmB,EAAA,MAAA,CAEA,MAA+B,sBAAE4O,SAAAA,CAAAA,EAAAA,EAAAA,CAAQhN,KAAAA,SAAY,KAAA,GAC7CmT,CAAAA,EAAAA,EAAaC,mBAAkBoR,CAAA,EAAA,IAAArR,EAAA,mBAAAqR,CAAA,CAAA,KAAA,EAAA,CACrC,CAAM,EAAAjmB,EAAA,MAAA,CAAEgC,MAAAA,sBAAOyM,SAAAA,EAAAA,EAAAA,CACTyX,KAAAA,SACAD,KAAAA,GACN,CAAA,CACE,CAAe,EAAApmB,EAAA,MAAA,CAAiC,MAAA,kBAAIE,MAAAA,EAE3CD,SAAM,CAAAomB,EAAAzX,EAAA,WAAAA,EAAA,aAAA5O,EAAA6D,EAAA,CAAqB3D,SAC9BC,CAAAA,IAAKA,EAAA,OAAA,CAAM,MAAA,gBAAc,SAAAA,EAAAG,EAAA,CACbgmB,KAAAA,YAKdnmB,KAAA,GAAA,CAAW,CAAA,CAAqBD,CAAAA,CACzB,CAAA,CAACK,CAAK,CAAA,CAAA,CAAc,CAAA,CAAK,CAGlC,SAAW8jB,IAAA,CAAA,MAAyBgC,CAAAA,CAAAA,SAAAA,cAAAA,sCAAAA,CAAAA,CCvlB1C,MAAME,GAAQ,GAEd,SAASC,IAAkB,CACnBzR,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAAEE,GAAAA,EAAI,GAAGskB,GAAWC,GAAU,EAC9B,CAACC,EAAcC,CAAe,EAAIC,GAAgB,EAClDC,EAAiB,CAACH,EAAa7lB,IAAI,SAAS,EAC5CimB,EAAgB,CAAC,CAACJ,EAAa7lB,IAAI,QAAQ,EAC3CkmB,EAASL,EAAa7lB,IAAI,QAAQ,EAClCqO,EAAQ,CAAC,CAACwX,EAAa7lB,IAAI,OAAO,EAClC,CAAEjC,MAAAA,EAAO+C,SAAAA,EAAUC,cAAAA,GAAkB/C,EAAI,CAAE8C,SAAU6kB,EAAO7kB,QAAAA,CAAU,EACtEqlB,EAA0B7nB,IAChC,eAAe8nB,EAAqBxE,EAAW,CAC7C,MAAM/a,EAAU,CAAA,EAChB,GAAI+a,EAAW,CACP,KAAA,CAAEjjB,MAAO0nB,GAAmB,MAAMtoB,EAAMyL,GAAGpI,SAC9CklB,aAAajlB,EAAI,CAChBklB,OAAQ,EAAA,CACT,EACAC,KAAK,EACR,GAAIH,GAAAA,MAAAA,EAAgBhiB,QAAU,CAAC6hB,GAAU,CAAC7X,EAKpCgY,GAJJA,EAAetQ,QAAoBjI,GAAA,CACjCA,EAAOmW,QAAU,GACjBwC,GAAW3Y,EAAQhN,CAAQ,CAAA,CAC5B,EACGulB,EAAehiB,QAAU,EAAG,CAC9B,MAAMqiB,EAAoBL,EAAe7hB,IAAKsJ,GAAWA,EAAOzM,EAAE,EAClEwF,EAAQgO,KAAK,CACXxT,GAAIqlB,EACJjN,MAAO4M,EACP/mB,KAAM,QAAA,CACP,CAAA,MAEOuV,EAAAA,KAAK,GAAGwR,CAAc,CAGpC,EACIzE,GAAa,CAACuE,EAAwBznB,WACxCynB,EAAwBznB,QAAUX,EAAMyL,GAAGpI,SAASklB,aAAajlB,EAAI,CACnEyF,MAAO2e,GACPkB,gBAAiBX,EACjBY,gBAAiBX,EACjBY,WAAYxY,EACZ6X,OAAAA,CAAAA,CACD,GAEG,KAAA,CAAEvnB,MAAAA,EAAOiW,KAAAA,CAAS,EAAA,MAAMuR,EAAwBznB,QAAQ8nB,OAC9D,OAAI7nB,GAAAA,MAAAA,EAAO0F,SACDwQ,EAAAA,KAAK,GAAGlW,CAAK,EAErBA,EAAMoX,QAAkBuD,GAAA,CACtBmN,GAAWnN,EAAMxY,CAAQ,CAAA,CAC1B,GAEI,CACLnC,MAAOkI,EACP+N,KAAAA,CAAAA,CAEJ,CAEA,KAAM,CAACjU,EAASmmB,CAAU,EAAI3oB,EAAS,EACjC,CAAC4oB,EAAcC,CAAe,EAAI7oB,EAAS,CAAE,CAAA,EACnD8oB,GACG,GAAEtmB,GAAAA,MAAAA,EAASiB,YAAcjB,EAAQiB,YAAc,IAAM,EAAG,IACvDjB,GAAAA,MAAAA,EAASY,KAAOZ,EAAQY,KAAO,eAChC,GACD,mBACF,EACA9C,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAM6f,EAAM,MAAMvgB,EAAMyL,GAAGpI,SAASsS,MAAMrS,CAAE,EAC5CpB,GAAe,CACf6mB,MAAAA,CAAc,CAChB,IACE7mB,MAAAA,EAAe,MAAAlC,EAAA,GAAA,SAAA,iBAAAsD,CAAA,EACjB2lB,EAAAE,CAAA,CACA,MAAI,CAAA,CACF,IACAjnB,EAAAA,CAAAA,CAAAA,CAAAA,EAAY,KAAA,CAAE8mB,YAAAA,EACdC,KAAAA,EAA4B,OAAAnlB,CAE5B5B,EAAAA,MACFknB,EAAA7oB,IACC8oB,EAAA5Q,GAAA,IAAA,CACL,MAAO6Q,EAAApT,EAAA,SAAA,GAAA5S,CAAA,IAAAP,CAAA,EAAA,EAEDwmB,EAAA,CAAAtB,GAAAC,GAAAC,GAAA7X,EAAEzM,OAAAA,EAAAA,EAAAA,CAAaL,SAAAA,CAAAA,EAAAA,GAAAA,CAAMM,SAAAA,UAAsBwlB,GAAChmB,EAE5C8lB,iBAAsBppB,EAAA,GAAA,SAAA,MAAAsD,CAAA,EACtB+lB,cAAAA,EACJ,aACA,CAAA,EAAME,EAAW,MAAmBrB,CACpC,mBACE7mB,IAAAA,EAEI0B,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA,QAC0BO,CAAAA,MAAAA,CAAAA,sCAE1BN,MAAAA,gBACU,SAAA1B,EAAAG,EAAA,CAEZN,KAAA,IAAW,KAAA,GAAA,CAAkBioB,CAAAA,CAC1BG,EAAAA,EAAAA,EACCjoB,CACEgG,KAAK,SACLlG,MAAM,gBACNP,KAAM,GAAA,CAAeQ,EAAAA,EAAAA,GAEhB,GAAM,IAAA0B,CAAA,MAAAO,CAAA,GAAA2kB,EAAA,aAAA,EAAA,GAAA,QAAS,IAAA,CAAKA,GAG3B3mB,GAAK,2BAAA,CAAqB,EAAgBmJ,MAAKwd,EAAA,GAAA,YAEjD3mB,SAAK,WAAA,CACHgG,EAAAA,IAAiB,CACjB9F,QAAe,MAAA8B,CAAA,GAAA4kB,EAAA,GAAA,WAAA,GACb,QAAoB,IAAA,CAClBrd,GACFA,GAAA,8BAAA,CAEFzJ,EAAyCC,MAC1C6mB,EAAA,YAAA,GAGD5mB,SAAK,UAAA,CACHgG,EAAAA,IAAiB,CACjB9F,QAAe,MAAA8B,CAAA,GAAAgN,EAAA,GAAA,UAAA,GACb,QAAoB,IAAA,CAClBzF,GACFA,GAAA,0BAAA,CAEFzJ,EAAyCC,MAC1CiP,EAAA,YAAA,GAGDhP,SAAK,OAAA,CACHgG,EAAAA,EAAiB,IAAAgR,GAAUhI,EAAAA,GAC3B9O,QAAe,MAAA8B,CAAA,GAAA6kB,IAAA7P,EAAA,KAAA,GAAA,WAAA,mBAAAA,EAAA,IAAA,CAAA,EAAA,GACb,QAAY,IAAA,CACVzN,IAAoCyN,EAAA,MACtCzN,GAAA,8BAAAyN,EAAA,IAAA,EAAA,CAEFlX,EAAgCC,MACjC8mB,IAAA7P,EAAA,KAAA,YAAA,GAGA0Q,SAAAA,EAAkB1Q,OAAAA,CAEV,SAAY,CAAAhX,EAAA,OACf6mB,OAIa,qBACTA,SAAAA,GACFtd,CAAW,EAAAyN,EAAA,IAAA,CAAuC,CACpD,CACF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC2C,CAAGjX,CAE9C,EAAAA,CAAAA,EAAAA,EAAAA,EACE4mB,EAAAC,EAAAc,EAAAb,EAAA7X,CAAA,CAAA,EAAA5P,EAAA,IAAY,OAAA,MAAA8oB,GAAqBrf,EAAAif,EAAA,UAAA,YAAAjf,EAAA,cAAA,cAACqf,GACzBJ,EACL,QAAA,SAAA,CAAC,SAMT,SACE,KAAAI,EAAA,YAAAJ,EAAA,QAAA,YAAAI,EAAA,aAAA,CAAA,CACN,CAaN9oB,EAAAA,CAAAA,EAAgBynB,EAAA7X,EAAA2X,EAAAC,CAAA,CAAA,EAEd,MAAAuB,EAAeL,GAAsBM,IACzB9mB,GAAA,MAAAA,EAAA,IAEGjC,QAAQ+Q,EAAS,GAAA,EAAA,SAD9BxP,KAEY,CAAAU,EAER4mB,EAGNG,EAAA,CAAA,CAAA/mB,GAAA,EADGG,IAAA0mB,GAEL,OAAIT,EAAAA,IAEES,MAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAgC7mB,EAAA,KAAA,OAAA,GACpC,eAAc2B,EAAAA,KAAAA,CAAY,MAAA,iBAC1B,SAAe,CAAAjD,EAAA,IAAQsB,CAChBgnB,SAAAA,EAAAA,GAAAA,CACLhnB,KAAQiB,UAEZ,CAAoB,CAEpB,CAAA,IACW,MAAA,UAEGjB,SAAsBA,CAChC4f,SACErhB,KAAAqC,CAAA,CAAA,CACQ,CAAA,CAMNnC,CAAAA,CAEA,CAAAA,EACY,GAAA,mBAAoByC,SAAAA,EAAAA,UAAiB,2BAAC,UAElD,uBAAAzC,WAAAA,EACEA,UAAAA,GAAY,eAAO6U,EAAA,SAAA,eAAA,cACfmT,EAAA,QACJpB,EAAAC,EAAAC,EAAA7X,EAENhN,UAAGhC,EAAAwZ,GAAA,CACH/X,OAAAA,GACU,SAAA,OACA,WAAA,QACEslB,SAAAA,SACH,WAAA/mB,EAAA,SAAA,CACTshB,KAAAA,SACeyG,MAAAA,QACfjG,SAA0B8E,EAAAA,EAAAA,CAC1BjF,YAEU,KAAA,GAAA,CAEG,CAAA,CACE,EACXzP,SAASrS,EAAAmJ,GAAA,CACTC,SACEjJ,GAAQC,QAAK,IAAA,EAAe,SAAA,CAAOF,GAAAA,CACtB,KAAA,CAAY,MAAAwoB,CAAK,EAAA5pB,EAAA,CACtB,SAAAwpB,CAAA,CACTpoB,EAGYsoB,EAAAA,MAAAA,EAAAA,GAAAA,SAAAA,OAAAA,MACI/mB,EAAA,IACb,CAAa,EACP,CACI,GAAAknB,CAAA,EAAE9pB,EAAM,SAAQ,KAAA,IAAAypB,CAAA,MAAAK,CAAA,EAAA,MACVL,CACZ,MAAC,8BAAA,CACD,CAA2C,IAC3BjmB,EAEV,SAAA,CAAAlC,EAAAG,EAAA,CAAA,KAAE6B,UAAAA,CAAAA,EAAAA,IAAOid,EAAAA,QAAAA,CACf4B,MAAAA,oBAA4C,UACrCvgB,iCAAGN,EAAA,IAAA,CACVY,SAAQqB,CACRf,CAAAA,EAAAA,GAAAA,CAAoC,CACtC,CAAA,CAAA,CAAA,CACC,CACL,CAAEnB,EAAAA,CAAAA,CAEG,CClRjB,SAAS0oB,GAAS,CAAEhqB,QAAAA,CAAQ,EAAG,CACvB,KAAA,CAAEC,MAAAA,GAAUC,EAAI,EAEhBoD,EAAWqF,EAAMmN,MAAMyK,QAAQ,UAAU,EACzCJ,EAAiBxX,EAAM+X,QAAQxe,IAAI,gBAAgB,EACnDme,EAAqB/c,EAASiD,OAAS,EACvC,CAAC0jB,EAAgBC,CAAiB,EAAI7pB,EAAS,CAAC,EAEhD,CAACqV,EAAG/I,CAAM,EAAIC,GAAkBud,GAAAA,EAAI,EAAG,CAAC,EAE9C,OACE/oB,EAAA,MAAA,CAAKmC,GAAG,qBAAqBlC,MAAM,QAAQuR,SAAS,KAAItR,SACrD,CAAA,CAAC,CAACtB,GACDuB,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,cAAcI,QAASzB,EAAQsB,SACzDC,EAACG,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVJ,EAAA,SAAA,CAAQF,MAAM,cAAaC,SACzBC,EAAA,KAAA,CAAAD,SAAI,UAAA,CAAY,CAAA,CACV,EACRC,EAAA,OAAA,CAAAD,SACEF,EAAA,UAAA,CAAAE,UACEC,EAAA,KAAA,CAAIF,MAAM,gBAAeC,SACtBgC,EAASoD,IAAI,CAAC7D,EAASwD,IAAM,CACtB+jB,MAAAA,EAAYvnB,EAAQM,KAAKI,KAAO4c,EAChCkK,EAAYhkB,KAAO4jB,GAAkB,GAC3C,OACE7oB,EAAA,KAAA,CAAAE,UACEF,EAAA,MAAA,CAAAE,SAAA,CACG+e,GACC9e,EAAA,OAAA,CAAMF,MAAQ,WAAU+oB,EAAY,aAAe,EAAG,GAAE9oB,SACtDC,EAACG,EAAI,CAACC,KAAK,eAAe0D,IAAI,SAAA,CAAW,CAAA,CACrC,EAER9D,EAAC0I,GAAM,CACLzF,IAAK3B,EAAQM,KAAKQ,aAClB+G,KAAK,MACL4f,WAAY,SAAY,CACtB,GAAIF,EACE,GAAA,CACIjnB,MAAAA,EAAO,MAAMlD,EAAMyL,GAAGpI,SAASsS,MACnC/S,EAAQM,KAAKI,EACf,EACQ0F,EAAAA,OACRpG,EAAAA,MAAeM,QAAAA,WAAAA,CAAAA,EACT2S,GACC,MAAA,EAEX,CAAA,CACF,EAAAvU,EAAAgpB,GAAA,CAEFhpB,QAAS8e,EAAA,MAGD,KACE,KAAWld,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,WAAAA,EAAAA,IACD0B,KAGZ,SACQ1B,GAEdqnB,QAAQ,IAAA,GAENnnB,EAAe,YAAA,GAAAR,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,IAER8F,EAAA,QAAA,IAAA,iBAAA9F,EAAA,KAAA,EAAA,EACL8F,SAAc8hB,OAAAA,EAEhB,CAAA,CACF,CAAA,CAAA,CAAA,EACArpB,EAAA,MAAA,CAEJA,MAAAA,UAAKC,SAAM,CAAAgpB,GAAAhK,GAAAjf,EAAA6D,EAAA,UACKob,CAAAA,EAAAA,OAAAA,CACZ/e,MAAAA,MACQD,SAAM,SAAA,CAAA,EAAM,GAAA,CAAA,CAAO,IAAW6I,GAAA,CAGxC9I,MAAAA,MACEuO,WAAMpO,EAAA,SAAA,CACNiJ,KAAAA,SAEIhJ,MAAK,OACLV,MAAM,oBACNO,SAAME,EAAAG,EAAA,CAAmBJ,KAAAA,OAEnBK,KAAK,IAAO+I,IAAK,MAAA,CAAA,CAAQ,CAAA,EAAS,SAClC,CAAAtJ,EAAAmJ,GAAA,CACTjJ,QAEDF,IAACmJ,GACU9I,YAAM,GAAAoB,EAAA,KAAA,QAAA,IAAAA,EAAA,WAAA,EACbQ,EACF,SAAA,CAAA9B,EAAAG,EAAA,CAAEJ,KAAAA,MAEG,CAAA,EAAMC,EAAA,OAAA,CACXA,SAAA,eAAA,CAAA,CAAAD,CAAM,CAAA,EAAoBC,EAAAoJ,GAAA,CAAA,CAAA,EAAA0V,GAAAjf,EAAAmJ,GAAA,UAE3BI,EAGGnI,QAAU6nB,IAAAA,GACK,OAAA,EAAA,CAAA,EAEJzN,EAAAA,SAAW,EACpBtZ,EAAAA,cAAwB,WAAAA,CAAA,EAClBwS,EAAc,CAAA,CACpBoU,EACF,SAAA,CAAA3oB,EAAAG,EAAA,CAAEJ,KAAAA,cAEG,CAAA,EAAMC,EAAA,OAAA,CACXA,SAAA,gBAAA,CAAA,CAAAD,CAAM,CAAA,EAAqBF,EAAAmB,GAAA,CAG/BnB,QAAY,GACVspB,aAAOtpB,EAAA6D,EAAA,CACPqG,SAAAA,CAAAA,IACE,CAAAhK,KAAAA,MACO,CAAA,EAAMF,EAAA,OAAA,CACXA,SAAA,CAAA,YAAAyB,EAAA,KAAA,KAAA,GAAA,CAAA,CAAA,CAAAvB,CAAmC,CAAA,EAAO,SAC1C,CAAA8oB,EAEJ5nB,kBAAW4nB,SACX3e,QAAkB,IAAA,GACH,OAAA,EAAA,CAAA,EAGJmR,EAAAA,MAAAA,QAAW,WAAAtZ,CAAA,EACdwS,SAAAA,KAAc,GAEpBsM,EACF,SAAA,CAAA7gB,EAAAG,EAAA,CAAEJ,KAAAA,MAEG,CAAA,EAAMC,EAAA,OAAA,CACXA,SAAA,UAAA,CAAA,CAAAD,CAAM,CAAA,CAAQ,CAAO,CAAA,CAAA,CACT,CAAA,CAAA,CACT,EACJ,EAACuB,EAAA,EAAA,CAAA,CAAA,CACJ,CAAA,EAEPtB,EAAA,IAAA,CAEHA,SAAAH,EAAAiG,EAAA,CAAA/F,GAAAA,SACQiG,MAAG,gBAASlG,QAAMrB,EAAgByB,SAASzB,CAAAA,EAAAA,EAAAA,CAAQsB,KAAAA,MAClD,CAAA,EAAM,IAAAC,EAAA,OAAA,CAAQ,SAAEA,yBAAA,CAAA,CAAAD,CAAM,CAAA,CAA8B,CAAA,EACrD+e,GAAA9e,EAAA,IAAA,CACL,SAEDA,EAAAA,QAAAA,CAAAD,mBACEC,EAAA,IAAA,CAAA,SACQA,SAAA,CAAA,EAAG,iGAAA,CAAA,CAAO,CAElB,CAAA,CAAA,CAAO,CAAA,CAEV,CAAA,CAAA,CACM,CAAA,CACJ,CCrKb,MAAMomB,GAAQ,GAEd,SAASgD,IAAY,CACnBxB,GAAS,YAAa,IAAI,EACpB,KAAA,CAAElpB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1B0qB,EAAoBpqB,IAC1B,eAAeqqB,EAAe/G,EAAW,CACnCA,OAAAA,GAAa,CAAC8G,EAAkBhqB,WAClCgqB,EAAkBhqB,QAAUX,EAAMyL,GAAGsJ,UAAUjV,KAAK,CAAEiJ,MAAO2e,EAAAA,CAAO,GAE/D,MAAMiD,EAAkBhqB,QAAQ8nB,MACzC,CAEA,OACEnnB,EAACihB,GAAQ,CACP1hB,MAAM,YACNyC,GAAG,YACHmf,UAAU,2CACVC,UAAU,2BACV3f,SAAAA,EACA8f,WAAY+H,CAAAA,CACb,CAEL,CCvBA,MAAMlD,GAAQ,GAEd,SAASmD,IAAa,CACpB3B,GAAS,aAAc,IAAI,EACrB,KAAA,CAAElpB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1B6qB,EAAqBvqB,IAC3B,eAAewqB,EAAgBlH,EAAW,CACpCA,OAAAA,GAAa,CAACiH,EAAmBnqB,WACnCmqB,EAAmBnqB,QAAUX,EAAMyL,GAAGuJ,WAAWlV,KAAK,CAAEiJ,MAAO2e,EAAAA,CAAO,GAEjE,MAAMoD,EAAmBnqB,QAAQ8nB,MAC1C,CAEA,OACEnnB,EAACihB,GAAQ,CACP1hB,MAAM,aACNyC,GAAG,aACHmf,UAAU,6CACVC,UAAU,4BACV3f,SAAAA,EACA8f,WAAYkI,CAAAA,CACb,CAEL,CCpBA,MAAMrD,GAAQ,IAEd,SAASsD,IAAmB,CACpB,KAAA,CAAEhrB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAChCipB,GAAU,oBAAqB,KAAI,EACnC,KAAM,CAAChpB,EAASC,CAAU,EAAIC,EAAS,SAAS,EAE1C,CAACiW,EAAkBC,CAAmB,EAAIlW,EAAS,CAAE,CAAA,EAC3DM,OAAAA,EAAU,IAAM,CACdP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMwW,EAAW3W,EAAMyL,GAAGwf,aAAanrB,KAAK,CAC1CiJ,MAAO2e,EAAAA,CACR,EACK9Q,EAAO,CAAA,EACV,EAAA,CACK,KAAA,CAAEhW,MAAAA,EAAOiW,KAAAA,CAAAA,EAAS,MAAMF,EAAS8R,OACnC5R,GAAAA,IAAQjW,GAAAA,YAAAA,EAAO0F,UAAW,EAAG,MAC5BwQ,EAAAA,KAAK,GAAGlW,CAAK,CACX,OAAA,IACJmO,EAAAA,KAAK,CAACxI,EAAGJ,IAAMI,EAAEQ,KAAKmkB,cAAc/kB,EAAEY,IAAI,CAAC,EAChD7E,EAAgB0U,CAAA,EAChBN,EAAAA,SAAoBM,CACpBzW,MAAAA,GACU,OAAA,CACV+B,CACA/B,IACF,EAAA,CAAA,CAAA,EACCmB,EAAA,MAAA,CACL,GAAK,yBAEL,uBACOgC,SAAG,KAAyBlC,SAAMD,EAAA,MAAA,CAA0B,MAAA,qBAAIE,YACnE,SAAA,CAAW,SAAAF,EAAA,MAAA,CAAoBE,MAC7BC,cAAAD,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBF,CAAAA,EAAA8e,GAAA,CAAA,CAAA,EAAA3e,EAAA8F,EAAA,CAAW,GAAA,IAAa/F,MAAAA,eAEhBiG,SAAGhG,EAAAG,EAAA,CAAU,KAAA,OAAcJ,KAAAA,GAC1B,CAAA,CAAM,CAAA,CAAA,CAAY,CAAA,EAAGC,EAAE,KAAA,CAAC,SACxB,mBAAA,CACJ,EACLA,EAAA,MAAA,CAAAD,MAAI,aAAA,CAAqB,CACzBC,CAAA,CAAA,CAAW,CAAA,EAAaA,EAAG,OAAA,CAAA,SACxB+U,EAAA,OAAA,EAAA/U,EAAA,KAAA,CAEPA,MAAA,YACG+U,SAAAA,EAA0B,IAAAiC,KACzB,KAAA,CAAU,SAAAnX,EAAAiG,EAAA,CACPiP,GAAAA,EAAAA,IAAAA,CAAsBiC,MAAAA,MACrB,GAAA,MAAAA,EAAA,IAAA,GAAAjX,YACOI,EAAA,CACH6F,KACc,SAA6C,CAC1DjG,EAAAA,IAAAA,EAEDC,OAAK,CAACI,SAAK4W,EAAA,IAAA,CAAW,CAAA,CAAE,CAAA,CAAWvR,CAAAA,CAAAA,CAAY,CAAA,EAC3C7G,IAAA,UAAAoB,EAAA,IAAA,CAAC,MAEV,WACC,SACUA,EAAAiK,GAAA,CACL,OAAA,EAAA,CAAUlK,CACV,CAAA,EAAOnB,IAAA,QAAAoB,EAAA,IAAA,CAAA,MAAE,WACf,SACW,mCACd,CAAA,EAASA,EAAA,IAAA,CAAUD,MAAC,WAEpBC,SAAA,2BAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAA,CAA4B,CAAA,CAE7C,CC9EC6pB,SAAAA,GAAa5P,EAAM6P,EAAeC,EAAkB,OAC5D,KAAA,CAAE9B,SAAAA,CAAahO,EAAAA,EAGjB9R,GAFA,EAAC8f,GAAAA,MAAAA,EAAUjjB,SACA+kB,KAAoB9P,EAAAA,EAAK3Y,UAAL2Y,YAAAA,EAAcjY,MAAO+nB,EACrC,MAAA,GACbC,MAAAA,EAAiB/B,EAAS5a,OAAc4c,GAAA,CACtC,KAAA,CAAE5c,OAAAA,CAAW4c,EAAAA,EACbC,EAAa7c,EAAOiO,QAAQ6O,SAASL,CAAa,EACxD,OAAKI,EACA7c,EAAO+c,UACL,IAAI1c,KAAKL,EAAO+c,SAAS,MAAQ1c,KADVwc,EADN,EAEqB,CAC9C,EACD,GAAI,CAACF,EAAehlB,OAAe,MAAA,GAEnCpE,GADiBopB,EAAepe,QAAYqe,EAAE5c,OAAOgd,eAAiB,MAAM,EAC9DC,MAAAA,GAAUrC,MAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,OAAAA,eAAAA,MAAAA,EAAU+B,GAAAA,EAAAA,CAAgB/P,MAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,KAAAA,EAAMA,EAAA,UAAA,CACpDqQ,OAAAA,EAAiB,UAAAC,EAAA,KAAA,KAAA,CACrB,CACA,CACE,OAAAC,CACAvQ,CACUsQ,SAAAA,GAAAA,EAAAA,EAAAA,CACRE,GAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QACF,MAAA,GACF,GAAA,CAAAX,EACOU,OAAAA,EACT,MAAAT,EAAA3iB,EAAA,QAAA,IAAA,gBAAA,EACgBsT,OAAAA,EAAAA,OAAAA,MAAoCT,EAAA6P,EAAAC,CAAA,CAAA,CAClD,CClBF,MAAM3D,GAAQ,GAEd,SAASsE,GAAU,CAAEnrB,MAAAA,EAAOoL,KAAAA,EAAM3I,GAAAA,EAAI,GAAGyX,CAAM,EAAG,CACvCla,GAAAA,GAAS,YAAaoL,GAAQ,YAAY,EAC7C,KAAA,CAAEjM,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1BiW,EAAaC,GAAY/S,CAAM,EAC/B6oB,EAAe1rB,IACf2rB,EAAa3rB,IAEXqjB,eAA0B/iB,EAAAA,EAAAA,EAElCgjB,MAAoC,WAC9BA,EAAAA,QAAcoI,EAAatrB,GAAS,UAAA,SAAA,CACtCsrB,MAAAA,EAAmD,CAAA,GACrD,MAAAnjB,EAAA,MAAAmjB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAArrB,CAAEA,EAAAA,EAAM,OAAIkI,GAAAA,MAAAA,EAAAA,aAEdojB,EAAe,QAAAtrB,EAAA,CAAA,EAAA,IAELoI,EAAAA,GAAkBkjB,EAAAA,MAAAA,EAC5BtrB,EAAA,QAAA2a,GAAA,CAEQS,GAAAA,EAAAA,EACRpb,CAAAA,EACE8nB,EAAAA,GAAyB9nB,EAAAmC,CAAA,EAC3BnC,EAAC,KAAA,CAAA2F,EAAA,IAAA,CACOuV,MAAAA,EAAAA,IAAAA,gBAA4B,EAIlC,OADmB,IAAA,KAAA,EAAA,SAAA,EACLoB,CACd,CAAA,GAED,CACH,GAAApU,EACO,MAAAlI,CAAA,CAELA,CACF,eAAAkiB,GAAA,CACF,GAAA,CAEA,MAAAha,EAAiC,MAAA9I,EAAA,GAAA,UAAA,SAAA,CAC3B,MAAA,EACF,SAAgBksB,EAAYzgB,OAChB,CAAA,EACD,KAAA,EAAA,WAIP,EAAA3C,EAAElI,MAAAA,GAAAA,GAAAA,MAAAA,EAAAA,SAAUkI,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GAChB5G,EAAY4Z,GAAAlb,EAAAmC,CAA8BpC,EAC1CC,KAAmBA,EAAA,MAAA,EACND,EAAAA,KAAAA,GAAgB,CAAA4a,EAAGjY,MAAAA,GAK9B,MAAA,CACF,MAAA,EACO,CAAA,CAEA,MAAA6oB,EAAA5rB,IACT6rB,EAAA,SAAA,CACF,GAAAD,EAAA,UAAAA,EAAA,QAAA,aAAA,UAAA,YAAAA,EAAA,QAAA,aAAA,UAAA,MAEA,OAEUnjB,MAAAA,EAA+BmjB,MAAAA,EAAAA,GAAAA,OAAAA,WAAU,EAE/CA,OAAAA,EAAAA,QACCA,EAAAA,GAGDjqB,EAAAA,aAA4C,KAAA,OAAA,EAC5CmqB,EAAA,GAAA,gBAAAtc,GAAA,CACF2Y,GAAA3Y,EAAAhN,CAAA,CACA,CAAA,EACAopB,cAAoBA,GAAAA,CACjBxrB,MAAAA,EAAeuL,GAAAA,EAAYnJ,CAAA,EACtBiG,IAEDsjB,EAAAA,YACLpqB,CAAAA,EACAwmB,EAAAA,GAAAA,YAA2B,GAC5B2D,CAEDA,EACUrjB,OAAAA,EAAAA,IAAK,CAEPqQ,IAAAA,EACFA,OAAAA,SAAGA,EAAa,MAAA+S,OAGfD,KACLjqB,IACFmqB,EAAA,GAAA,QAEOA,EAAAA,QAAAA,KAET3rB,CACM2rB,EAAAA,CAAAA,CAAAA,EACS/qB,EAAAihB,GAAA,CACX8J,MAAAA,eACF,GAAG/oB,GAAA,YACH,UAAa,uBACX,UAAY,wBACV+oB,SAAAA,EACAF,WAAaI,EACf,gBAAAzJ,EACF,UAAA,GACF,eAAK5M,EAAA,SAAA,eAEL,GAAA6E,EAEIla,aAAgB,EAAA,CAAA,CACN,CC3GhB,MAAM6mB,GAAQ,GAKR8E,GAAsB,EACtBC,GAAmBD,GAAsB,EAE/C,SAASE,GAAS,CAAEC,WAAAA,EAAY,GAAG5R,CAAM,EAAG,CAEtC,GAAA,CAAE9F,QAAAA,EAAS,GAAG2S,CAAAA,EAAW+E,EAAa,GAAK9E,KAC3C9M,EAAM9F,UAASA,EAAU8F,EAAM9F,SACnC,IAAI2X,EAAW3X,EAAQ4X,KAAK,EAAE7W,MAAM,QAAQ,EAC5C4W,EAAS7d,KAAK,EACdkG,EAAU2X,EAAS,CAAC,EAEd,KAAA,CAAE5sB,MAAAA,EAAO+C,SAAAA,EAAUC,cAAAA,GAAkB/C,EAAI,CAC7C8C,UAAUgY,GAAAA,YAAAA,EAAOhY,WAAY6kB,EAAO7kB,QAAAA,CACrC,EACK,CAAEC,cAAe4E,GAAyB3H,EAAI,EAC9C6sB,EAAeF,EAASnmB,IAAK8V,GAAO,IAAGA,CAAE,EAAC,EAAEtJ,KAAK,GAAG,EACpDpS,EAAQkC,EAAY,GAAE+pB,CAAa,OAAM/pB,CAAS,GAAI+pB,EAC5D5D,GAASroB,EAAQ,wBAAuB,EACxC,MAAMqrB,EAAa3rB,IAGbwsB,EAAQxsB,EAAO8X,MAAS,EAC9B,eAAe2U,EAAcnJ,EAAW,CAUtC,MAAM/a,EAAU,MAAM9I,EAAMyL,GAAGwhB,UAC5BC,YAAYjY,EAAS,CACpBlM,MAAO2e,GACPyF,IAAKP,EAAS/Q,MAAM,CAAC,EACrBuR,MAAOvJ,EAAYxL,OAAY0U,EAAMpsB,OAAAA,CACtC,EACA8nB,KAAK,EACF,CAAE7nB,MAAAA,CAAUkI,EAAAA,EAClB,OAAIlI,GAAAA,MAAAA,EAAO0F,SACLud,IACSljB,EAAAA,QAAUC,EAAM,CAAC,EAAE0C,IAGhC1C,EAAMoX,QAAkBuD,GAAA,CACtBmN,GAAWnN,EAAMxY,CAAQ,CAAA,CAC1B,EAEDgqB,EAAMpsB,QAAUC,EAAMA,EAAM0F,OAAS,CAAC,EAAEhD,IAEnC,CACL,GAAGwF,EACHlI,MAAAA,CAAAA,CAEJ,CAEA,eAAekiB,GAAkB,CAC3B,GAAA,CACF,MAAMha,EAAU,MAAM9I,EAAMyL,GAAGwhB,UAC5BC,YAAYjY,EAAS,CACpBlM,MAAO,EACPokB,IAAKP,EAAS/Q,MAAM,CAAC,EACrBwR,SAAUnB,EAAWvrB,OAAAA,CACtB,EACA8nB,KAAK,EACF,CAAE7nB,MAAAA,CAAUkI,EAAAA,EAClB,MAAIlI,GAAAA,GAAAA,MAAAA,EAAO0F,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACgnB,EAAeC,CAAgB,EAAIntB,EAAS,SAAS,EACtD,CAAC8C,EAAMC,CAAO,EAAI/C,EAAS,EAEjCM,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAMwC,EAAO,MAAMlD,EAAMyL,GAAGmL,KAAKjB,MAAMV,CAAO,EAC9C/S,EAAQ8G,CAAQ,CAChB7F,MAAY,CAAA,CAAA,IAEZjB,EAAAA,CAAAA,CAAAA,CAAAA,EACF,MAAAsrB,EAAAZ,EAAA,QAAAH,GAAA,OACCnrB,EAAAihB,GAAA,CACL,MAAA1hB,EAEM2sB,eAAAA,CAAaZ,IAAmBH,EAAAA,KAAAA,CAEtC,uBAGI5rB,SAAAA,CAAAA,EAAAA,IAAAA,CAEE,SAAAisB,CACE,CAAU,EAAAxrB,EAAA,MAAA,CAAgBD,SACxBC,CAAA,CAAA,CAAAD,CAAIyrB,CAAY,EAChB,GAAAzrB,UAAM0B,SAAAA,EAAe,UACnB,gDAGRO,UAAG,qCACHP,WAAAA,EACA0f,gBAAAA,EACAC,UAAU,GACVG,UAAYmK,EAAAA,GAAAA,CACZlK,OAAAA,GACS,gBAAA,GACTG,gBAEIrB,WAAM,QACN6L,SAAe,SACfpjB,WAAS/I,EAAA,SAAA,CACE,KAAA,SACF,MAAA,QACTiJ,SACEjJ,EAAAG,EAAA,CAAa,KAAA,OAAe,KAAA,GAAA,CAAOJ,CAC5B,CAAA,EAAM,SAAY,CAAA,CAAA,CAAA6B,GAAA0pB,EAAA,SAAA,GAAAzrB,EAAA6D,EAAA,CAAG,SAAE,CAAA1D,EAAAgB,GAAA,CACtB,QAAA,GACTjB,QAEE6B,YACD7B,aACGiB,aAAW2S,CAAA,IACVwV,SAAO6C,IAAA,WAAA,CAAAtqB,EACPkf,QAAShf,IAAK6E,CACdsD,WAAmC,EACnC9I,EAA4B,YACb,GAAA,KAAA,SAAA0S,CAAA,EAAA,KAAA,IAAA,CACbsY,EAAAA,IACSxlB,EAMP/H,UACG0tB,EAECvqB,CAAQ,EAAA0H,GAAK3H,eAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAiBtB,GAAA,CAAM,MAACA,CAAA,CACrCiJ,CAAW,EAAA,QAAA,IAAA,CAEZ8iB,EAAa,SAAA,CACZnrB,CAAAA,EAEFxC,EACC4tB,GAAAA,KAAc,OAAA3Y,CAAA,EAAA,KAAA,IAAA,CACbsY,EAAAA,CACD,GAAArqB,EACE,UAAA,EACLlD,CAAAA,EAGY6K,GAAA,aAAAoK,CAAA,EAAA,CAAA,CAAA,EAAA,MAAK/R,GAAAA,CAAAA,MAAiBtB,CAAA,CAAA,CAAA,EAAM,QAAA,IAAA,CACzB2rB,EAAA,UAAqB,CACjC,CAGCrrB,EACF,SACC0rB,EAAQ,UAAMzsB,EAAA6D,EAAA,CACbuoB,SAAAA,CAAAA,EAAAA,EAA0B,CAC5B,KAAC,cAAA,CACL,EAAA,IAAAjsB,EAAA,OAAA,CACF,SAAA,YAAA,CAEC4B,CAAAA,CACC,CAAA7B,EAAAA,EAAAA,EACO,CAAA,SAAM,CAAAC,EAAAG,EAAA,CAAgB,KAAEH,MAAA,CAAA,EAAM,IAAAA,EAAA,OAAA,CAAiB,SAAA,QAAA,CAGtDH,CAAAA,CAAA,CAAAE,CACO,CAAA,EAAAC,EAAMoJ,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAApJ,EAAQusB,GAAE,CAAA,UAAM,aAAA,SAAaL,EAAA,SACxC,CAAA,CAGNlsB,IAAAA,CAAe,IAGnBA,EAAc,OAAA,CAAW,SAAAM,GAAA,SAAuB4rB,EAAAA,eAAAA,QAC7CnsB,GAAC6I,GAAAC,EAAAvI,EAAA,OAAA,CAAA,EAAA,QAAA,YAAAuI,EAAA,OAAA,YAAAD,EAAA,KAAAC,GAAE9H,GAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,YAAAA,IAAAA,EAAAA,YAAAA,CAAAA,IACFlB,EAAA,KAAA2sB,CAAA,IACmB,KAAA,EACbjsB,SAAe,KAAAkB,EAAA,IAAAA,CAAA,MAAA6pB,EAAA,KAAA,GAAA,CAAA,GAAA,MAAAA,EAAA,KAAA,GAAA,CAAA,GAIfkB,EAKAlB,SAAAA,CAAAA,IAAwB,CACxBA,KAAAA,SAMAzK,CAAAA,EAAAA,EAAAA,QAAgBpf,CAGlB,IAAAV,EACF,KAAA,OAAEhB,YAEFC,EAAK,OAAAmrB,EAAA,QAAA,cAAC/qB,SAAK,GACXJ,YAAA,MACEe,eAAAA,MACAd,WAAK,GACL8T,QACEmY,mBAEFrV,SAAQqV,CAAA,CAAA,CACRO,CAAY,CAAA,CACG,CAAA,EAAAzsB,EACH0sB,GAAA,CAAA,aAEJ,GAAA,SACER,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA,CAAW,SACrBZ,EAAA,SAAA,EACE,QAAAhrB,GAAA,CAGVN,EAAU,OAAA8E,EAAA,CAAA,EAAawmB,EAAA,KAAA,WACXnmB,EAAK8V,IAAGnW,OACPwmB,EAAA,KAAA,GAAA,CAAA,GAAA,MAAAA,EAAA,KAAA,GAAA,CAAA,EAAA,CAEPrqB,EACAf,SAAgB,CAAAF,EAAAG,EAAA,CACLkb,KAAAA,IACTiQ,IAAAA,iBACA1S,MAAAA,aAIA,CACF,EAAA/Y,EAAA,OAAA,CAAEE,SAEFC,CAAAA,EAAK,OAAA,CAAM,MAAA,qBAAQ,SAAA,GAAuB,CAAA,EAAAib,CAAA,CAAA,CAAe,CACzDpb,CAAAE,EAAAA,CAAAA,CAAAA,CACE,CAAA,EAAAC,EAAYoJ,GAAA,CAAA,CAAA,EAAAvJ,EAAAmJ,GAAA,CAAA,SAAqB,CAAA1C,EAAC,QAChC,IAAA,CAAA,MACGuP,EAAA,CACC,KACX,UAEFzM,QAAAA,EAAa,oBAED9C,EAEQxE,EAAA,UAAA,KAAAiW,GAAAA,EAAA,OAAAlC,EAAA,MAAAkC,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAAlC,EAAA,QAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,GAAA,IAAAkC,EAAA,SAAAA,EAAA,WAAAlC,EAAA,SAAA,GAAA,EAEflC,MAAAA,8BAA0B,GAE5B7R,EAAA,UAAA,KAAA+T,CAAA,EAEAtM,GAAezH,wBAAiB8J,EAc9B1K,EAAoC,SAC/B,CAAAlB,EAAAG,EAAA,CACE2U,KAAAA,UACPvL,CAAAA,EAAAA,IAAAA,EAAW,OAAuB,CACpC,SAAA,iBAAA,CACF,CAAA,CAAA,CAAExJ,EAAAA,EAAAA,GAEG,CAAA,QAAM,IAAA,CAAY,IAAEC,EAAA,OAAA,6CAAA,EAAAD,GAAM,CAAA,KAAA,KAAA4sB,CAAA,EAAA,CAAsBA,GAEvD9sB,MAAS,kBAAA,QAED8sB,CAGAA,IACEA,EAAAA,EAAAA,YAAAA,EAAAA,KAAAA,EAAazrB,SAAwB,IAAAyrB,CAAA,MAAArB,EAAA,KAAA,GAAA,CAAA,EAAA,EAE3C,EACA,SAAiB,CAAAtrB,EAAAG,EAAA,CACDwsB,KAAAA,KACd/T,CAAAA,EAAAA,IAAAA,SAAyB,CAC3B,SAAA,yBAAA,CACF,CAAA,CAAA,CAAE7Y,CAAAA,CAEG,CAAA,CAAM,EAAA0B,EAASzB,CAAA,CAAA,CC9ShC,MAAMomB,GAAQ,GAEd,SAASwG,GAAKnT,EAAO,OACb7E,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAAEpD,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1BqD,GAAKyX,GAAAA,YAAAA,EAAOzX,OAAMukB,EAAAA,GAAAA,IAAAA,YAAAA,EAAavkB,IAE/B4oB,EAAa3rB,IAGb4tB,EAAe5tB,IACrB,eAAe6tB,EAAUvK,EAAW,EAC9BA,GAAa,CAACsK,EAAaxtB,WAC7BwtB,EAAaxtB,QAAUX,EAAMyL,GAAGwhB,UAAUoB,SAAS/qB,EAAI,CACrDyF,MAAO2e,EAAAA,CACR,GAEH,MAAM5e,EAAU,MAAMqlB,EAAaxtB,QAAQ8nB,KAAK,EAC5C,GAAA,CAAE7nB,MAAAA,CAAUkI,EAAAA,EAChB,OAAIlI,GAAAA,MAAAA,EAAO0F,SACLud,IACSljB,EAAAA,QAAUC,EAAM,CAAC,EAAE0C,IAGxB0Y,EAAAA,GAAcpb,EAAO,MAAM,EACnCA,EAAMoX,QAAkBuD,GAAA,CACtBmN,GAAWnN,EAAMxY,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAG+F,EACHlI,MAAAA,CAAAA,CAEJ,CAEA,eAAekiB,GAAkB,CAC3B,GAAA,CACF,MAAMha,EAAU,MAAM9I,EAAMyL,GAAGwhB,UAAUoB,SAAS/qB,EAAI,CACpDyF,MAAO,EACPskB,SAAUnB,EAAWvrB,OAAAA,CACtB,EACG,GAAA,CAAEC,MAAAA,CAAUkI,EAAAA,EAEhB,OADQkT,EAAAA,GAAcpb,EAAO,MAAM,EAC/BA,GAAAA,GAAAA,MAAAA,EAAO0F,aAID,CACH,MAAA,EACT,CACF,CAEA,KAAM,CAACxG,EAAMwuB,CAAO,EAAIluB,EAAS,CAAES,MAAO,MAAA,CAAQ,EAEzCf,GAAAA,EAAKe,MAAQ,QAAO,EAC7BH,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CACF,MAAMZ,EAAO,MAAME,EAAMyL,GAAGa,MAAMqJ,MAAMrS,CAAE,EAC1CgrB,EAAQxuB,CAAI,CAAA,MAEF,CAAA,CACVoC,IAAe,EACjB,CAAAoB,CAAA,CAAA,EAAA,KACC,CAAA2J,EAAAI,CAAA,EAAAjN,EAAA,EAAA,EACC,CAACmuB,EAAAC,CAAA,EAAApuB,EAAA,EAAA,EAEP,OAAO6M,EAAAA,EAAAA,CACP,SAAOshB,CAAAA,EAAAA,GAAAA,CAEP,QACE,MAAAltB,GAAAA,OAGIR,UAAYA,eACZyC,UAAG,wBACHmf,SAAAA,EACAC,WAAU0L,EACVrrB,gBAAAA,EACA8f,UAAYuL,GACZtL,eAAAA,EAAAA,SAAAA,eACAH,aAAS,GACTC,YAAAA,KACY,GAAA,KAEZI,MAAAA,eACQ1b,SAAGhG,EAAAG,EAAA,CAAW,KAAA,OAAcJ,KAAAA,GAC3B,CAAA,CAAM,CAAA,EAAY,UAAKF,EAAA2Z,GAAA,CACxB,OAAA,GAERmI,gBACQ,GACJrB,SAAM,OACN6L,WAAe,QACfpjB,SAAS,SACTwQ,WAAWvZ,EAAA,SAAA,CACF,KAAA,SACTiJ,MAAAA,QACUhJ,SAAKD,EAAAG,EAAA,CAAe,KAAA,OAAOJ,KAAAA,GAC5B,CAAA,CAAM,CAAA,EAAY,SAAK,CAAAF,EAAAmJ,GAAA,CACtB,QAAA,IAAA+C,EAAA,CACThM,KAAAA,CAEQ,CACPG,EAEI1B,SAAAA,CAAAA,EAAAA,EAAAA,CACD,KAAA,SACFuB,KAAAA,GAEI,CAAA,EAAMC,EAAA,OAAA,CAASmJ,SAAK,MAAA,CAAK,CAC9BnJ,CAAA,CAAA,EAAAD,EAAMiJ,GAAA,CAAI,QAAO,IAAAkkB,EAAA,EAAA,EAEnBrtB,SAAS,CAAAG,EAAAG,EAAA,CAACD,KAAAA,QAA+CH,KAAAA,GAClD,CAAA,EAAMC,EAAA,OAAA,CAAQmJ,SAAK,gBAAA,CAAK,CAC7BnJ,CAAA,CAAA,CAAA,CAAM,CAAA,CAAqB,EAAAgC,CACnB,EAAC2J,GAAA3L,EAAAoK,GAAA,CAAA,MACN,QA5CJpI,QA+CN2J,GAAAA,CAESrL,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZyL,EACF,SAAA/L,EAAAzB,GAAA,CACF,KAAAoN,GAAA,YAAAA,EAAA,KAAE5L,WAEU,CACJ4L,EAAsBnN,QAAAA,WAAAA,EAAAA,OACPwN,EAAA,IAAA,EACRgU,EAAAA,QAAuBhU,YAChCghB,cAAmB,MAInBnM,EAAgB,EAAA,CAClB,CACA9U,CAAAA,CAA6B,CAC/B,EAAAkhB,GAAAjtB,EAAAoK,GAAA,CAAE,MACH,QACI,QAGPpK,GAAAA,CACQM,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZ4sB,EACF,SAAAltB,EAAAmtB,GAAA,CACF,OAAAnrB,EAAEjC,YAEgBmtB,EAAA,EAAA,CAAA,CAAA,CACRlrB,CACRvD,CAAAA,CAA8C,CAAA,CAC/C,CAEJ,MACD2uB,GAAA,GAEN,SAAAD,GAAA,CAEA,OAAAE,EACA,QAAA5uB,CAA2B,EAAE4uB,CAAQ5uB,KAAAA,CAAW,MAAAC,EAIxC,SAAA+C,CAAE/C,EAAAA,EAAAA,EAAO+C,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAiB,CAAA7C,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAC1B,CAACwuB,EAASC,CAAczuB,EAAAA,EAAW,EAAA,EACnC0uB,EAAoBvuB,IAC1B,eAAO+iB,EAAqBO,GAE5BN,MAEApjB,EAAA,YACEojB,SAAiB,CACjBpjB,GAAAA,EACa0jB,GAAA,CAAAiL,EAAA,WACPA,EAAA,QAAA9uB,EAAA,GAAA,MAAA,aAAA2uB,EAAA,CACE9K,MAAAA,EACFiL,CAAAA,GACSJ,MACR5lB,EAAA,MAAAgmB,EAAA,QAAA,KAAA,EACH,GAAA,CACA,KAAAjY,EACI,MAAAjW,CAAEiW,EAAAA,EAAMjW,GAAAA,MAAAA,EAAAA,QACRA,EADkBkI,EACHlI,EAEJA,EAAK,OAAAA,CAAA,CAFD,EAIJguB,EAAAA,CAAAA,CAAAA,GAEbrL,EAAY,EAAK,EAEjBA,EAAAA,SAAiB,CACnB,MAAA,CACApjB,EAAW,OAAS,EAEpBA,IACF,CAAAO,OAAAA,EACC,IAAA,CACLquB,EAAA,EAAA,CAEAruB,EAAAA,CAAAA,CAAAA,EACEquB,EAAAA,MAAiB,CACnB,MAAK,QAEL,GAAA,gCACO3tB,SAAM,CAAA,CAAA,CAAArB,GAAAuB,EAAA,SAAA,CAAW,KAAA,6BAEVC,QAAKxB,EAASqB,SAAME,EAAAG,EAAA,CAAuB1B,KAAAA,GAAAA,CAAQsB,CACpD,CAAA,EAACK,EAAK,SAAA,CAAG,SAAEJ,EAAA,KAAA,CAGpBA,SAAA,gBAAA,CAAAD,CACE,CAAA,EAAAA,EAAI,OAAA,CAAc,SAAIF,EAAA,KAAA,CAExBG,SAAA,CAAAstB,EAAA,IAAAI,GAAA7tB,EAAA,KAAA,CAAAE,YACE4D,GAAA,SACG2pB,EACCvtB,SAAAA,CACe,CAAA,EAAU2tB,EAAAA,GAAAA,CAAQjsB,QAAAA,EAC/BzB,OAAAA,CAAgB,CAAA,CAACsB,CAASosB,EAAQL,EAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,WAAAA,EAAAA,GAAAA,CAAe,GAAG,KAAA,SAEvDvH,GACYlnB,GAAAA,EACXoB,EAAQ2tB,SAAG3tB,EAAA,SAAA,CAAK2V,KAAAA,SAA+C5V,MAAAA,cACrDE,QAAKwtB,EAAS3tB,SAAM,YAAA,CAAA,CAAuB2tB,CAAAA,CAAAA,CAAc,CAAA,CAEzD,CAAA,CAAA,CAEX,CAAA,CACC,CACC,SACJG,GAAA,CAET,QAAAtsB,EAEA,OAAA+rB,CAAyB,EAAE/rB,CAAS+rB,KAAAA,CAAU,MAAA3uB,CACtC,EAAAC,EAAA,EAAED,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAc,CAAAmvB,EAAAC,CAAA,EAAAhvB,EAAA,EAAA,EACtB,OAAOF,EAAAA,GAAmB,CAC1B,QAAOivB,CAAAA,EAEP,aACchuB,EAAA,OAAA,UACAguB,CAAAA,WAAAA,EAAAA,SAAAA,aAAAA,CAAAA,CACV9jB,EAAc,YAA2C,kBAAM,SAC/DqE,QAAM,IAAA,CACYyf,KACH,SAAA,GACb,SAAa,CACXhvB,GAAAA,CACa,MAAAH,EAAA,GAAA,MAAA,WAAA2uB,EAAA,CACP,WAAA,CAAA/rB,EAAA,EAAA,CACF,CAAA,EACEwK,EAAAA,SAAaxK,EACfwsB,EAAC,EAAA,CACDjvB,MAAAA,CACAivB,EAAW,OAAK,EAEhBjvB,OAEJA,EAAG,SAAA,GACE,SAAA,CAGLA,GAAAA,CAEa,MAAAH,EAAA,GAAA,MAAA,cAAA2uB,EAAA,CACP,WAAA,CAAA/rB,EAAA,EAAA,CACF,CAAA,EACEwK,EAAAA,SAAaxK,EACfwsB,EAAC,EAAA,CACDjvB,MAAAA,CACAivB,EAAW,OAAI,EAEfjvB,KACF,EAEJ,SAAAmB,EAAA,SAAA,CACF,KAAA,SAAED,MAAAA,SAEF8tB,EAAA,GAAA,QAAA,GACE5tB,SAAKrB,IAAA,UACLkB,SAAQ+tB,EAAkB,MAAA,SAAc,CAAA,CAClB,CAAU9tB,CAEb,CC5S3B,MAAMqmB,GAAQ,GACR2H,GAAoB,IAAIC,gBAE9B,SAASC,GAAS,CAAE5C,WAAAA,EAAY,GAAG5R,CAAM,EAAG,CAC1CmO,GAAS,WAAY,WAAW,EAC1B,KAAA,CAAElpB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1B,CAAC6nB,CAAY,EAAI6E,EAAa,CAAC0C,EAAiB,EAAIrH,KACpD,CAACwH,EAAWC,CAAY,EAAIrvB,EAAS,IAAI,EACzCmB,GAAOwZ,GAAAA,YAAAA,EAAOxZ,OAAQumB,EAAa7lB,IAAI,MAAM,GAAKutB,EAElDE,EAAmBnvB,IACnB2rB,EAAa3rB,IAEnB,eAAeovB,EAAc9L,EAAW,EAClCA,GAAa,CAAC6L,EAAiB/uB,WACjC+uB,EAAiB/uB,QAAUX,EAAMyL,GAAGoJ,cAAc/U,KAAK,CACrDiJ,MAAO2e,GACPkI,MAAO,CAAC,SAAS,CAAA,CAClB,GAEH,MAAM9mB,EAAU,MAAM4mB,EAAiB/uB,QAAQ8nB,KAAK,EAChD,GAAA,CAAE7nB,MAAAA,CAAUkI,EAAAA,EAChB,OAAIlI,GAAAA,MAAAA,EAAO0F,SACLud,IACSljB,EAAAA,QAAUC,EAAM,CAAC,EAAE0C,IAEhC1C,EAAA,QAAA,CAAA,CAEAA,QAAe,IAAU2a,CAAWmN,GAAAnN,EAAAxY,CAAA,CAClC2lB,CAAAA,GAEJ,CACO,GAAA5f,EACL,MAAGA,GAAAA,YAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OAAAA,CAEL,CACF,MAAA+mB,EAAAtvB,IAEMsvB,EAA+BtvB,IACrC,iBAAsCsjB,EAAA,EACtCA,MAA6C,WACvCA,EAAcgM,QAAAA,EAAsBlvB,GAAS,cAAA,KAAA,CAC/CkvB,MAAAA,EAA4D,CAAA,GAG9D,MAAA/mB,EAAA,MAAA+mB,EAAA,QAAA,KAAA,EACA,GAAA,CACI,MAAAjvB,CAAEA,EAAAA,EAAM,OAAAA,EAAIkI,GAAAA,YAAAA,EAAAA,OAAAA,GAAAA,EAAAA,YAChBlI,GAAAA,MAAAA,EAAe+N,aAEbmhB,EAAe,QAAAlvB,EAAA,CAAA,EAAA,WAAA,IAELoI,EAAAA,QAAI,CAAc8mB,CAC5B,WAAAvU,CAEA3a,IAAMoX,CAAW+X,GAAYxU,EAAAA,CAAAA,CAAAA,CAAW,GAEvC,CACH,GAAAzS,EACQE,MAAAA,GAAAA,YAAAA,SAAsBuS,EAAA,WAC9B,CAAO,CACFzS,SACIlI,KAAY2a,EAAAA,CACrB,OAAAha,IAAA,UACFyuB,EAAA,GAAAC,CAAA,IAG0B,GAAAA,CAAA,CACfD,CACT,eAAAlN,GAAA,CACO6M,GAAAA,IAAAA,UACT,GAAA,CAEA,MAAA7mB,EAAiC,MAAA9I,EAAA,GAAA,cAAA,KAAA,OAClB,EACP,SAAA8vB,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACPzC,MAAAA,CACD,EACKvkB,EACJ,OAAAlI,GAAA,MAAAA,EAAA,QAAEA,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,WAAAA,GAAUkI,MAOdgnB,MAAAA,CACO,MAAA,EACT,KAEF,KACS,MAAAhnB,EAAA,MAAA9I,EAAA,GAAA,cAAA,KAAA,CACT,MAAA,EACK,MAAA,CAAA,SAAA,EACD,SAAAksB,EAAA,OACF,CAAA,EAAA,KAAgB,EACR,GACG,CACP0D,MAAAA,CAAiB,IAEnB,OACMhvB,GAAA,MAAAA,EAAA,QACJsrB,EAAA,QAAAtrB,EAAA,CAAA,EAAA,GAAEA,IACNsB,EACA,OACavB,MAAAA,EACJ,CAEF,CAAA,QACG8X,GAAA,IACHtX,EAAA,MAAA,CACT,MAAA,sBACF,SAAA,CAAAG,EAAA8F,EAAA,CACF,GAAA,YAEMiiB,MAAAA,EAA8B,GAA9BA,YACJ,QACEznB,GAAA,CAAW+qB,IAAqBtrB,EAAAA,eACzB,EACAouB,EAAA,IAAA,IAGD,SAAgB,KACd7tB,CAAAA,EAAAA,EAAiBwF,EAAA,CACjBqoB,GAAAA,yBACF,MAAAluB,IAAA,UAAA,YAAA,GACF,QAAAK,GAAA,CACD+qB,IAGDrrB,EAAAA,eAAK,EACAmuB,EAAA,SAAA,IAGD,SAAgB,SACd7tB,CAAAA,CAAAA,CACA6tB,CAAAA,EACF,CAAAluB,CAAA,CAAA,EACF,OAAAD,EAAAihB,GAAA,CAAA,MACD,WAAA,GAEM,WAAA,UACJ,0BAET,UAAS,2BAET,SAAAxf,EAEIlC,WAAAA,EACAyC,gBAAAA,EACAmf,UAAU,GACVC,cAAU2G,EACVtmB,QAAAA,CAAAA,CACA8f,CAAAA,CC9JN,SAASqN,GAAqB,CAAEroB,UAAAA,EAAWoP,SAAAA,CAAS,EAAG,CAC/C,KAAA,CAAEjX,MAAAA,GAAUC,EAAI,EAChB,CAACC,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C,CAAC+vB,EAAcC,CAAe,EAAIhwB,EAAS,IAAI,EAC/C,CAACqI,EAAcc,CAAe,EAAInJ,EAAS,IAAI,EAE/CiwB,EAAkB5nB,IAAiB,KAEzC,OACEtH,EAAA,IAAA,CAAGC,MAAM,yBAAwBC,UAC/BC,EAAA,SAAA,CACEC,KAAK,SACLgB,SAAUrC,IAAY,UACtBsB,QAASA,IAAM,CACbrB,EAAW,SAAS,EACpBiwB,EAAgB,QAAQ,GACvB,SAAY,CACP,GAAA,CACF,MAAME,EAAM,MAAMtwB,EAAMyL,GAAG8kB,eAAeC,UAAU3oB,CAAS,EACzD,GAAA,EAACyoB,GAAAA,MAAAA,EAAKpoB,YACF,MAAA,IAAIuoB,MAAM,6BAA6B,EAE/ClnB,EAAgB+mB,CAAG,EACVrZ,GAAA,MACC,CAAA,CACV/U,WAAe,CAAA,IAEjB/B,EAAoB,SACnB,QAAA,CACL,EAAA,IAAAmB,EAAA,SAAA,CAAED,KACH,SAEO,SACRC,IAAA,UACEC,MAAK,eACLgB,YAAsB,CAChBpC,EAAA,SAAA,IACS,QAAA,GACbA,SAAoB,CACpBiwB,GAAAA,CACa,MAAAE,EAAA,MAAAtwB,EAAA,GAAA,eAAA,OAAA6H,CAAA,EACP,GAAAyoB,GAAA,MAAAA,EAAA,WACF,UAAY,MAAMtwB,+BAEVuJ,GAAuC,EAC/C0N,GACA1N,MAAAA,CACSpJ,EAAA,SAAA,EAET+B,IACA/B,EACF,SAAA,QAAA,CAAA,EACFmB,EAAG,OAAA,CACL,MAAA,wBAAED,SACHgvB,GAAAF,EAAAA,IAAA,SAAA7uB,EAAAG,EAAA,CAGDH,KAAA,eAAY,IAAA,kCAGD,CAAA,EAAMA,EAAAG,EAAA,CAAe2D,KAAI,WAAWhE,IAAM,WAE/CE,MAAAA,iBAAK,CAAA,EAAMA,EAAAiK,GAAA,CAAWnG,OAAIlF,IAAA,SAAA,CAAA,CAAiB,CAAiB,CAAA,CAGvD,CAAA,CAAqB,CC7DtC,MAAMwwB,GAAqB,CACzBC,QAAS,UACT5gB,OAAQ,eACRyL,OAAQ,SACRoV,OAAQ,SACRC,eAAgB,aAChBC,UAAW,QACXhhB,KAAM,OACNihB,OAAQ,QACV,EAiBMC,GAAc,CAClBL,QAAS,+BACT5gB,OAAQ,oBACRyL,OAAQ,qBACR,iBAA8ByV,GAAA,WAAUA,CAAM,kBAC9CC,aAAc,sBACdN,OAAQ,gBACRC,eAAgB,2BAChBC,UAAW,wBACX,oBAAiCG,GAAA,cAAaA,CAAM,kBACpDE,gBAAiB,yBACjBrhB,KAAM,iDACN,YAAa,qCACb,aAAc,sCACdihB,OAAQ,8CACR,mBAAoB,kCACpB,2BACGE,GAAA,wBAAuBA,CAAM,kBAChC,yBAA0B,kCAC5B,EAEA,SAASG,GAAa,CAAEC,aAAAA,EAActuB,SAAAA,EAAU2J,OAAAA,CAAO,EAAG,eAClD,KAAA,CAAEpJ,GAAAA,EAAIyM,OAAAA,EAAQnN,QAAAA,EAAS0uB,UAAAA,EAAWC,UAAAA,CAAcF,EAAAA,EAClD,GAAA,CAAE9vB,KAAAA,CAAS8vB,EAAAA,EAGf,MAAMlL,IAAiBpW,EAAAA,GAAAA,YAAAA,EAAQyL,SAARzL,YAAAA,EAAgBzM,MAAMyM,GAAAA,YAAAA,EAAQzM,IAE/C4c,EAAiBxX,EAAM+X,QAAQxe,IAAI,gBAAgB,EACnDwH,EAASyW,KAAmBtd,GAAAA,YAAAA,EAASU,IACrCkuB,GAAUzhB,EAAAA,GAAAA,YAAAA,EAAQD,OAARC,YAAAA,EAAc0hB,MACxBC,EACJ,CAAC,EAAC3hB,GAAAA,MAAAA,EAAQ4hB,sBACV5hB,GAAAA,YAAAA,EAAQ4hB,sBAAuBzR,KAC/BnQ,EAAAA,GAAAA,YAAAA,EAAQnN,UAARmN,YAAAA,EAAiBzM,MAAO4c,EAE1B,IAAI0R,EAAY,EACZC,EAAe,EACnB,GAAItwB,IAAS,mBAAoB,CAC/B,UAAWqB,KAAW0uB,GAChB1uB,EAAAA,EAAQkvB,SAARlvB,MAAAA,EAAgB6oB,SAAS,cAC3BmG,KAEEhvB,EAAAA,EAAQkvB,SAARlvB,MAAAA,EAAgB6oB,SAAS,WAC3BoG,IAGA,CAACA,GAAgBD,IAAkBrwB,EAAA,aACnC,CAACqwB,GAAaC,IAAqBtwB,EAAA,SACzC,CAEI0F,IAAAA,EAsBA1F,OArBAA,IAAS,OACX0F,EAAO+pB,GAAYvnB,EAAS,YAAc+nB,EAAU,aAAe,MAAM,EAEzEjwB,IAAS,UACTA,IAAS,aACTA,IAAS,oBAELgwB,GAAAA,YAAAA,EAAWjrB,QAAS,EACf0qB,EAAAA,GAAa,GAAEzvB,CAAK,UAAS,EAC3BmwB,EACFV,EAAAA,GAAa,GAAEzvB,CAAK,QAAO,EAElC0F,EAAO+pB,GAAYzvB,CAAI,EAGzB0F,EAAO+pB,GAAYzvB,CAAI,EAErB,OAAO0F,GAAS,aAClBA,EAAOA,GAAKsqB,GAAAA,YAAAA,EAAWjrB,UAAUgrB,GAAAA,YAAAA,EAAWhrB,OAAM,GAGhD/E,IAAS,WAAa,CAACwO,EAElB,KAIP5O,EAAA,MAAA,CAAKC,MAAQ,6BAA4BG,CAAK,GAAGoR,SAAS,IAAGtR,UAC3DC,EAAA,MAAA,CACEF,MAAQ,kCAAiCG,CAAK,GAC9CV,MAAO,IAAImO,KAAKqiB,EAAaztB,SAAS,EAAEmuB,eAAe,EAAE1wB,SAExDE,IAAS,mBACRJ,EAAA6D,EAAA,CAAA3D,SAAA,CACEC,EAACG,EAAI,CAACC,KAAK,SAAS+I,KAAK,KAAKrF,IAAK7D,EAAMH,MAAM,aAAA,CAAe,EAC9DE,EAACG,EAAI,CAACC,KAAK,QAAQ+I,KAAK,KAAKrF,IAAK7D,EAAMH,MAAM,gBAAA,CAAkB,CAAC,CAAA,CACjE,EAEFE,EAACG,EAAI,CACHC,KAAMgvB,GAAmBnvB,CAAI,GAAK,eAClCkJ,KAAK,KACLrF,IAAK7D,CAAAA,CACN,CAAA,CAEA,EACLJ,EAAA,MAAA,CAAKC,MAAM,uBAAsBC,UAC9BE,IAAS,WACRJ,EAAA6D,EAAA,CAAA3D,UACEF,EAAA,IAAA,CAAAE,SAAA,CACG,CAAC,eAAeuD,KAAKrD,CAAI,GACxBD,EAAA0D,EAAA,CAAA3D,UACGiwB,GAAAA,YAAAA,EAAWhrB,QAAS,EACnBnF,EAAA6D,EAAA,CAAA3D,UACEF,EAAA,IAAA,CAAAE,SAAIiwB,CAAAA,EAAUhrB,OAAO,SAAO,CAAG,CAAA,EAAE,GAAG,CAAA,CACpC,EAEFnF,EAAA6D,EAAA,CAAA3D,SAAA,CACEC,EAACgpB,GAAQ,CAAC1nB,QAAAA,EAAkBovB,WAAU,EAAE,CAAA,EAAE,GAAG,CAAA,CAC7C,CAEJ,CAAA,EAEH/qB,EACA1F,IAAS,WACRJ,EAAA,OAAA,CAAMC,MAAM,gBAAeC,SAAA,CACxB,IAAI,IACH,IACFC,EAAC2wB,GAAY,CACXC,SAAUb,EAAaztB,UACvBuuB,OAAO,OAAA,CACR,CAAC,CAAA,CACE,CACP,CACA,CAAA,EACF5wB,IAAS,kBACRD,EAAC4uB,GAAoB,CACnBroB,UAAWjF,EAAQU,GACnB2T,SAAUA,IAAM,CACd,CAAA,CAEH,CACF,CACD,CAAA,GAEHqa,GAAAA,YAAAA,EAAWhrB,QAAS,GACnBhF,EAAA,IAAA,CAAGF,MAAM,gBAAeC,SACrBiwB,EAAU7qB,IAAI,CAAC7D,EAASwD,IACvBjF,EAAA6D,EAAA,CAAA3D,UACEF,EAAA,IAAA,CACE4D,KAAMnC,EAAQ2B,IACd+rB,IAAI,sBACJlvB,MAAM,uBACNI,QAAgBI,GAAA,CACdA,EAAEC,eAAe,EACjBuB,EAAOgvB,YAAcxvB,CACvB,EAAEvB,SAAA,CAEFC,EAAC0I,GAAM,CACLzF,IAAK3B,EAAQc,aACb+G,KACE6mB,EAAUhrB,QAAU,GAChB,MACAgrB,EAAUhrB,OAAS,IACnB,KACAgrB,EAAUhrB,OAAS,IACnB,IACAgrB,EAAUhrB,OAAS,IACnB,IACA,IAGNlB,IAAM,GAAExC,EAAQiB,WAAY,KAAIjB,EAAQY,IAAK,GAC7Cge,SAAU5e,GAAAA,YAAAA,EAASe,GAAAA,EAFdf,EAAQU,EAGd,EACA/B,IAAS,oBACRD,EAAA,MAAA,CAAKF,MAAM,oBAAmBC,SAC3BuB,EAAQkvB,OAAOrrB,IAAKlF,GACnBD,EAACG,EAAI,CACHC,KAAMgvB,GAAmBnvB,CAAI,EAC7BkJ,KAAK,IACLrJ,MAAQ,GAAEG,CAAK,OAAA,CAChB,CACF,CAAA,CACE,CACN,CACA,CAAA,EAAE,GAAG,CAAA,CACR,CACH,CACA,CAAA,GAEJgwB,GAAAA,YAAAA,EAAWjrB,QAAS,GACnBhF,EAAA,KAAA,CAAIF,MAAM,8BAA6BC,SACpCkwB,EAAU9qB,IAAKsJ,GACdzO,EAAA,KAAA,CAAAD,SACEC,EAAC8F,EAAI,CACHhG,MAAQ,2BAA0BG,CAAK,GACvC+F,GACEvE,EAAY,IAAGA,CAAS,MAAKgN,EAAOzM,EAAG,GAAK,MAAKyM,EAAOzM,EAAG,GAC5DjC,SAEDC,EAACslB,GAAM,CAAC7W,OAAQA,EAAQtF,KAAK,GAAA,CAAK,CAAA,CAC9B,CAAA,EARCsF,EAAOzM,EASZ,CACL,CAAA,CACC,EAELyM,IAAW,EAACwhB,GAAAA,MAAAA,EAAWjrB,UAAUirB,GAAAA,YAAAA,EAAWjrB,SAAU,IACrDhF,EAAC8F,EAAI,CACHhG,MAAQ,2BAA0BG,CAAK,GACvC+F,GACEvE,EACK,IAAGA,CAAS,MAAKojB,CAAe,GAChC,MAAKA,CAAe,GAC1B9kB,SAEDC,EAACslB,GAAM,CAAC9V,SAAUqV,EAAgB1b,KAAK,GAAA,CAAK,CAAA,CACxC,CACP,CAAA,CACE,CAAC,CAAA,CACH,CAET,CC1PA,SAAS4nB,GAAmBxd,EAAe,CAIzC,MAAMyd,EAAmB,CAAA,EACnBC,EAAqB,CAAA,EAC3B,QAASnsB,EAAI,EAAGqW,EAAI,EAAGrW,EAAIyO,EAAcvO,OAAQF,IAAK,CAC9CirB,MAAAA,EAAexc,EAAczO,CAAC,EAC9B,CAAE2J,OAAAA,EAAQnN,QAAAA,EAASrB,KAAAA,EAAMqC,UAAAA,CAAcytB,EAAAA,EACvCmB,EAAO,IAAIxjB,KAAKpL,CAAS,EAAE6uB,mBAAmB,EACpD,IAAIC,EAAcnxB,GACdA,IAAS,aAAeA,IAAS,YACrBmxB,EAAA,oBAEhB,MAAM9jB,EAAO,GAAEmB,GAAAA,YAAAA,EAAQzM,EAAG,IAAGovB,CAAY,IAAGF,CAAK,GAC3CG,EAAqBL,EAAiB1jB,CAAG,EAC/C,GAAI8jB,IAAgB,iBAClBH,EAAmB9V,GAAG,EAAI4U,UACjBsB,GAAAA,MAAAA,EAAoB/vB,QAAS,CAChCgwB,MAAAA,EAAgBD,EAAmBrB,UAAU9Q,QAC1Cja,EAAEjD,KAAOV,EAAQU,EAC1B,EACIsvB,GACYd,EAAAA,OAAOhb,KAAKvV,CAAI,EAChBuwB,EAAAA,OAAO/iB,KAAK,EAAE8jB,QAAQ,IAE5Bf,EAAAA,OAAS,CAACvwB,CAAI,EACH+vB,EAAAA,UAAUxa,KAAKlU,CAAO,EAC3C,KACK,CACGkvB,EAAAA,OAAS,CAACvwB,CAAI,EAClBuxB,IAAAA,EAAKR,EAAiB1jB,CAAG,EAAI,CAC/B,GAAGyiB,EACH9vB,KAAMmxB,EACNpB,UAAW,CAAC1uB,CAAO,CAAA,EAErB2vB,EAAmB9V,GAAG,EAAIqW,CAC5B,CACF,CAOA,MAAMC,EAAoB,CAAA,EACpBC,EAAsB,CAAA,EAC5B,QAAS5sB,EAAI,EAAGqW,EAAI,EAAGrW,EAAImsB,EAAmBjsB,OAAQF,IAAK,CACnDirB,MAAAA,EAAekB,EAAmBnsB,CAAC,EACnC,CAAExD,QAAAA,EAAS0uB,UAAAA,EAAW/vB,KAAAA,EAAMqC,UAAAA,CAAcytB,EAAAA,EAC1CmB,EAAO,IAAIxjB,KAAKpL,CAAS,EAAE6uB,mBAAmB,EACpD,GAAIlxB,IAAS,oBAAsBqB,GAAW0uB,EAAUhrB,SAAW,EAAG,CACpE,MAAMsI,EAAO,GAAEhM,GAAAA,YAAAA,EAASU,EAAG,IAAG/B,CAAK,IAAGixB,CAAK,GACrCG,EAAqBI,EAAkBnkB,CAAG,EAChD,GAAI+jB,EACiBpB,EAAAA,UAAUza,KAAKua,EAAathB,MAAM,MAChD,CACD+iB,IAAAA,EAAKC,EAAkBnkB,CAAG,EAAI,CAChC,GAAGyiB,EACH9vB,KAAAA,EACAgwB,UAAW,CAACF,EAAathB,MAAM,CAAA,EAEjCijB,EAAoBvW,GAAG,EAAIqW,CAC7B,CAAA,MAEAE,EAAoBvW,GAAG,EAAI4U,CAE/B,CAEAnvB,OAAAA,CAAY,CC5Cd,MAAMwlB,GAAQ,GAEd,SAASuL,IAAgB,CACvB/J,GAAS,gBAAiB,gBAAgB,EACpC,KAAA,CAAElpB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1BiW,EAAaC,GAAY/S,CAAM,EAC/B,CAAClD,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C,CAACkjB,EAAUC,CAAW,EAAInjB,EAAS,EAAK,EACxCwd,EAAgBrd,IAChB,CAAEue,aAAAA,EAAcR,gBAAAA,EAAiBE,WAAAA,EAAYI,eAAAA,GACjDjB,GAAU,CACRC,cAAAA,CAAAA,CACD,EACGqI,EAAW3H,IAAoB,OAAS,CAACM,EACzC,CAAC2R,EAAgB2C,CAAiB,EAAI9yB,EAAS,CAAE,CAAA,EACjD,CAAC+yB,EAAeC,CAAgB,EAAIhzB,EAAS,CAAE,CAAA,EAErD8B,EAAoC3B,IAEpC,iBAAqCsjB,EAAA,EACrCA,MAA6C,WACvCA,EAAcwP,QAAAA,EAAsB1yB,GAAS,cAAA,KAAA,CAE/C0yB,MAAAA,GACEtqB,aAAO2e,CAAAA,gBAAAA,CAAAA,CACP4L,GAEJ,MAAAC,EAAA,MAAAF,EAAA,QAAA,KAAA,EACME,EAAmBA,EAA4B5yB,MACrD,GAAAkU,GAAA,MAAAA,SAAuCjU,CAEvCiU,UAA2Bwc,IAAA,CACzBxc,GAAAA,GAAwC,OAAA9R,EAAA,CAC3BsuB,cAAAA,EAA+B,CAAA,CACzB,CAAA,EAEnB,MAACmC,GAAAnB,GAAAxd,CAAA,EAEK2e,GAENpwB,EAAe,kBAAAyR,EAAA,CAAA,EACN4e,EAAAA,cAAAA,IAEFrwB,EAAA,cAAA,KAAA,GAAAowB,EAAA,CAEP,CACF,OAAApwB,EAAA,qBAAA,GAEAA,EAAOgf,2BAAuB,KAAA,MACvBsR,CACAH,CACT,SAAAI,GAAA,CAEA,OAASA,EAAsB,GAAA,eAAA,KAAA,CAEtB3zB,MAAAA,EAA6B,CAAA,CAC3B,CAEX,MAAA4zB,EAAA,IAAA,CAEAzzB,cACEA,SAAoB,CACP,GAAA,CACP,MAAA0zB,EAAA,MAAAF,IACIE,GAAqC,EAC3CX,EAAAA,SAA0B,CAC1B/yB,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJ,SAAA2zB,GAAA,CAEA,OAASA,EAAqB,GAAA,cAAA,KAAA,CACrB9zB,CACT,MAAA+zB,EAAAlQ,GAAA,CAEA1jB,cACEA,SAAoB,CACP,GAAA,CACP,MAAA6zB,EAAAC,EAAApQ,CAAA,EACImQ,MACAE,OACN,GAAArQ,GAEA,MAAesQ,GAAA,MAAAC,GACbD,YAA4BC,KAAAA,CACdrlB,MAAAA,GAAAA,IAAK,KAAUxI,GAAA,WAAAA,GAAA,SAAA,EAG3B,OADc,IAAIyI,KAAKzI,GAAE0I,WAAa1I,GAAE3C,SAAS,EAC/BoL,EAClB,CAAA,EACFokB,EAACe,EAAA,EACDf,MAAAA,GAAiBD,MAAae,EAC9BhB,EAAuBgB,EAAAA,CACvBhB,CACF,KAAA,CAEM,KAAArc,EAAEA,EAAAA,MAAAA,EAAK0M,EAAUyQ,CAAAA,EAAAA,EACvBzQ,EAAAA,SAAiB,CAEjBpjB,MAAAA,GACU,OAAA,CACVA,CAAkB,IACpB,EAEJO,EAAA,IAAA,CAEAA,EAAgB,EAAA,CACdqzB,EAAAA,CAAAA,CAAAA,EACFrzB,EAAK,IAAA,CACLA,GACEqzB,EAAgB,EAAA,CACQ,EACxB,CAAAvV,CAAA,CAAA,EACF9d,EAAI8d,IAAW,CAEf9d,GAAgB4iB,GACdyQ,GACoB,EACpB,CAAAjV,EAAAwE,CAAA,CAAA,EACF,MAAkBA,EAAAA,EAAQ,EAAC,EAErB6B,EAAAA,QACAC,KAAmB,IAAA,OACjBxB,0BAAwBzZ,EAAAyT,EAAA,UAAA,YAAAzT,EAAA,aAAA,IAAA,CAAAgb,EAAA,SAAAC,IAAA,CAAAI,GAAA,GAAAtP,EAAA,sBAAAhW,IAAA,WAC1Bm0B,KAC0B,EAC5B3O,CAAAA,EAAAA,uBAAiCA,EAAAA,SAAAA,YAAAA,CAAAA,CAAAA,EACjCvG,EAAAA,EAAyBxe,CAAAA,EAAAA,oBAAuB,CAAA,EAAA,QACzBA,IAAAA,OACI,IAAA,KAAA2zB,EAAA,GAAA,GAAA,GAAA,GAAA,EAAA,IAC3BlS,EAAiCA,IAAAA,KACjCliB,MAAAA,EAAAA,CAAAA,EAAAA,cAAAA,KAAAA,GAAAA,IAAAA,KAAAA,EAAAA,SAAAA,EAAAA,aAAAA,IAAAA,EAAAA,aAAAA,CAAAA,EACDq0B,EAAAh0B,IACD,eACsBmlB,CAOpBqO,GAAAA,qBACF,MAAA,iBACF,IAEE7d,EAIFxV,SAAuB,KAEjB4zB,eAAY,KAClBnP,UAA0BnW,EACtBwlB,EACJ,eAAuB,IAACte,CAMxBiP,YAEA,EAEI7hB,SAAGnC,EAAA,MAAA,CACG,MAAA,sBAAA+U,EAAA,SAAA,aAAA,gBAAA,EAAA,GACD0H,SAAAA,CAAAA,EAAAA,SAAAA,CACI,OAAAqI,aACa,gBACU,QAAA,WAAA,IAC9Bd,EAAAA,EAAqB,UAArBA,MAAAA,EAAqB,SAAA,CACvB,IAAA,WACsB,QACpBjjB,EAEF,EAAEb,UAEF,UAAA,UAAA,YAEI6U,CAAAA,EAAAA,MAAAA,CACC7U,MAEHF,cACU8kB,SAAAA,CAAAA,EAAAA,MAAAA,OACQ,cACd,SAActY,CAAAA,EAAAA,SAAsBvG,EAAA,CAClCwW,GAAAA,IAAkCkH,MAAK,eAAGlT,SAAUtQ,EAAAG,EAAA,CAAU,KAAA,OAChE,KAAA,IACF,IAAA,MAAA,CACOvB,CAAoC,CAAGmB,CAAAA,CAE9C,CAAW,EAAAC,EAAA,KAAA,CAAaD,SACtBF,eAAA,CAAA,EAAWG,EAAA,MAAA,CAAaD,MAAAA,aAEjB,CAAA,CAAA,CAAI,CAAA,EAAA6U,EAAU,sBAAAhW,IAAA,WAAAiB,EAAA,SAAA,CAAcE,MAAAA,4BAC1B,KAACK,SAAK,QAAY,IAAA,OAAAqyB,EAAQ,EAAA,GAAA5pB,EAAAyT,EAAQ,UAAR,MAAAzT,EAAQ,SAAA,CAClC,IAAA,EAET7I,SAAA,QAAA,EAAqB,EACrB,SAAW,CAAAA,EAAAG,EAAA,CAEL,KAAA,UAEPyU,CAAAA,EAAAA,qBACC,CAAA,CACE9U,CAAM,CAAA,EACNG,EAAK,OAAA,GAAAD,EAAA,MAAA,CAAA,yBAEHyyB,SAAAA,EAAAA,MAAkB,CAClBnW,MAAAA,yBAAgC,SACzBzc,EAAA,UAAA,CAAA,MACK,gBACZ,SAAC,CAAAA,EAAA,UAAA,CACH,SAAA,CAAAA,EAAA,OAAA,CAAEE,SAEDI,CAAIH,EAAAG,EAAA,CAAM,KAAA,WACb,MAAA,oBACD,KAAA,GAAA,CAEF0xB,EAAAA,IAAuBhyB,EAAA,IAAA,CACX,SAAA,CAAA,eAAAgyB,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAkB9xB,MAC3BC,EAAA,QAAA,CAAW,MAAA,gBAAwBD,SACjC0B,CAAA,CAAe,CAAA,CAAe1B,CAAAA,EAAAA,EAC5B,OAAA,GAAAC,EAAA,OAAA,CAAAD,MAAAA,4BACEA,SAAA8xB,EACO,IAAA,CAAAsB,EAAA1jB,IAAAzP,EAAA,SAAA,CAACI,KAAK,SAAWN,MAAM,eAAoBqJ,QAAK,IAAA,QAAON,EAAAoqB,EAC5D,UAD4D,MAAApqB,EAC5D,SAAA4G,GAAA,eAAA,UAAG,SACHzP,MAAAA,SAAA,EAA8ByB,EAAiB,SAAAgO,EAAA,CAAA,CAEhDoiB,CAAAA,CACC,CAAA,CAAM/xB,CAAM,CAAA,EAA2BC,OACtBoF,CACb,MACO,sBAAA0sB,EAAA,OAAA,EAAA,WAAA,QAAA,GAAA,IACCoB,EAAA,WACS,IAAAE,GAAAnzB,EAAA,KAAA,CACbizB,SAAAA,EAAAA,GAA8BlzB,CAEb,aAAAozB,CACL,CAAA,CACH,CAAA,CAAA,CACR,CACH,CAAA,CAAA,CAAA,CAES,CAAA,CAEZ,CAAA,EAAAlE,EAEJ,OAAA,GAAApvB,EAAA,MAAA,CAAA,MAEHG,kBAAA,YAEI6xB,KAAAA,CACD,MACIoB,kBAAAA,SAEJpB,iBACC9xB,CAAAA,EAAAA,SACoB,EAAAF,EAAA,UAAA,CAACszB,SAAAA,CAAAA,EAAAA,UAAAA,CAAAA,SAA6B,CAAAlE,EAAA,OAAA,kBAAA,CAAA,CAAA,EAACjvB,EAEpD,KAAA,CAAC,SACCivB,EAAA,IAAA3tB,GAAAzB,EAAA,KAAA,CACE,SAAA,CAAAG,EAAA2D,GAAA,CACN,QAAArC,CAAA,CAGR2tB,EAAAA,EAAAA,GACC,CAAW,UAAA3tB,EAAA,GAAiBvB,SAC1B,IAAA,CAAU,CAAA,CAAkB,CAAA,CAAA,EAC3BkvB,EAAAA,EAAAA,CAAAA,CACC,CAAAlvB,CAAAA,CACE,CAAA,EAAUkvB,EAAAA,KAAejqB,CAAuB,SAChDiqB,EAAA,IAAA3tB,GAAAzB,EAAA,KAAA,CAAAE,SACGkvB,CAAAA,EAAAA,GAAoB3tB,CACnBvB,QAAAA,CACe,CAACuB,EAAAA,EAAAA,GAAAA,CAAiB,UACVA,EAAA,GAAA,aACAU,CAAAA,CACH,CAEd,CAAA,CAAA,EAAAV,EAEF,EAAA,CAAA,CAAA,CAAA,CAAA,CAEL,CAAA,EAACtB,EACC,MAAA,CAAA,GAGPA,kBAAA,SACGivB,EAAAA,QAAAA,CACClvB,SAAAA,CAAAA,EACEC,QAAa,CAACsB,KAAAA,WAAiB,QAC9BstB,EAAoB,SAAA,aAAA,YACA5sB,CACnB2T,WAAgB,aAAArV,EAAA,OAAA,OAEd,CAAA,CAAA,EAEF,IAAA,eAAA,CAAA,CAAA,CAEL,CAAA,EAEJN,EAAA,KAAA,CAGLA,MAAA,kBAAKgC,SAAG,OAAA,CAAiBjC,EAAAA,GACvB,CAAA,CAAA6U,EAAA,cAAA,QAAA5U,EAAA,IAAA,CAAAD,MAAAA,yBACE,SACOnB,IAAA,UAAA,wBAAAoB,EAAA0D,EAAA,CACLjE,SAAAA,GAA6B2zB,CAAAA,CAEpBxd,CAAAA,EAAAA,EAAAA,cAAwBtV,OAAAA,EAASb,EAAAA,CAC1C,SAAAmV,EAAA,cAAA,IAAAmb,GAAA,CAAE,GACDnb,EAEL,SAAA,cAAAmb,EAAA,OAAA,UAAO,OAAA,KAEC,MAAAsD,EAAA,IAAA,KAAAtD,EAAA,SAAA,EAAkBuD,EAAAD,EAAA,aAAA,IAAAH,EAAA,aAAA,EACTI,IACRJ,EAAAG,GAC4CtzB,MAAEwzB,GAAAF,EAAA,iBAAAG,EAAA,eAAA,YAAAvtB,GAAAitB,EAAA,CAAU,SAAA,EAAA,CAGlEte,EAEIA,OAAAA,EAAAA,EAAyBzP,CACxB,SACayQ,CAAAA,GACXma,EAAAA,KAAAA,CAEO,MAAA,kBACT,SAAAwD,EACA,CAAA,EAAMF,EAAkBvD,GAAA,CACxB,SAAAruB,EAEI6xB,aAAAA,EACWD,OAAAA,IAAAA,CACfZ,EAAA,EAAA,EAGMc,GAIY,CAAA,EACXxD,EAAA,EAAA,CAAA,CACP,CAAA,CACE,CAAA,CACmB,CAAA,EAAAlwB,EAAU6D,EAAA,CAAA,SAAmB6vB,CAAAA,IAAAA,WAAAA,EAAAA,EAAAA,CAAO,SACrDvzB,EAAa,KAAA,CACXyB,MAAAA,gBACAsuB,SAAAA,MAAAA,KAAAA,CAEA3kB,OAAQA,CACNqnB,CAAAA,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAsB,KAAA,CACH,MAAA,wBACrB,SAAA,CAAAzyB,EAAA,MAAA,CAJkBgC,MAAAA,oBAMpB,SAAAhC,EAAAG,EAAA,CAEL,KAAA,eAGH,KAAA,IAAA,EAEI,CAAAJ,EAAAA,QACE,CAAU,MAAA,uBAAeA,WACX,IAAA,CAAU,SAAA,kBAAA,CAAKoF,CACzB,CAAU,CAAA,CAAA,CAAuBpF,CAAAA,CAC/B,CAAA,CAA8BA,CAAAA,EAAAA,IAAAA,SACvBF,EAAA,IAAA,CAAA,MAAA,WAAM,SAAoB,CAAA,+BAAAG,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAA,KAAM,SAAC,QAExCA,IAAAyyB,EAAA,EAAA,EAAA,SAAW,WAAA,CAAsB1yB,CAAAA,CAC/B,CAAA,CAAA,CAAG,CAAA,EAAAiiB,GAAmBhiB,EAAA,SAAA,CAAA,KAAC,SACnB,MAET,cAAA,SACCpB,IAAA,UAAC,QAGI,IAAA6zB,EACX,EAAA,MAAS,CAAU1yB,eAEjBC,KAEA,EAAsBE,SAAAA,IAAeuyB,UAAAA,EAAsBxoB,GAAA,CAAA,OAAG,EAAA,CAAA,EAErDjK,EAAA0D,EAAA,CAEZ,SAAA,YAAA,CACD,CAGF,CAAA,CACEzD,CAAK,CAAA,CACC,CAAA,CACgB,CACW,SAC1BikB,IAAA,CAAA,MAAA,CAAEuP,CAAgB,SAAA,cAAA,sCAAA,CAAA,CAAM,SAE9B70B,GAAAA,CAA+B,aAAAu0B,CAAO,EAAA,CAAM,KAAA,CAAE,SAAA1xB,CAAmB,EAAC9C,EAEtE,EACE,CACF,QAAA+0B,CAET,EAAAC,GAAA,EAEAC,EAAwBF,GAAA,YAAAA,EAAA,QACtB,CACF,GAAA1xB,EAEA,QAAA6xB,EAA6BV,SAAAA,EAAgB,OAAAW,EACrC,UAAAC,EAAEtyB,OAAAA,gBACF,UAAAkM,EAAE+lB,KAAAA,aACR,SAAAM,EACM,KAAA1e,EACJtT,OAAAA,EACA6xB,UAAAA,CACAI,EAAAA,EACAH,EAAAA,IAAAA,KAAAA,CAAAA,EACAC,EAAAA,GAAAA,CAAAA,EACAG,EAAAA,IAAAA,KAAAA,CAAAA,EACAC,EAAAA,GAAAA,CAAAA,EACAxmB,OAAAA,EAAAA,MAAAA,CACAymB,MAAAA,qBACAvgB,SAAAA,CAAAA,EAAAA,GAAAA,CACAmgB,QAAAA,CAAAA,CACA1e,EAAAA,EAAAA,MAAAA,CACA9S,MAAAA,uBACA6xB,QAAAA,GAAAA,CACElB,SAAAA,EAEEmB,SAAAA,CACN,CAAMC,EACApmB,wBAAoBT,CACpB8mB,OAAAA,KAA0C,SAG9C,CAAW,CAAoBz0B,CAChB,CAAA,EAAU6zB,EAAAA,IAAAA,CACvB5zB,MAAA,gBACEF,SAAM,CAAAE,EAAA,OAAA,UACsBs0B,EAAA,YAAA,EAAEzgB,SAAAA,GAAAA,CAAAA,CAAUpS,CAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,CAAU,SAAA,CAAA,IAAA,IAAA,IAAA5B,EAAA,OAAA,CACzB,MAAA,KACvB2F,oBAAgC,IAAAxF,EAAA,OAAA,CAC9BwC,SAAAA,EAAAA,YAAAA,EACD,SAAAyD,GAAAkI,CAAA,CAAA,CACH,CAAA,CAAA,CAEFtO,CAAAA,CAAA,CAAS,CAAA,CAAA,CAAeE,EAAAA,EAAAA,MACtBC,CAAM4wB,MAAAA,yBAAwC7wB,OAAAA,GACd,SAE/B4N,EAA+B4mB,IAAAA,GAAAA,CAC9Bx0B,MAGQD,KAAAA,EAAUC,MAAAA,EAER6wB,GAAAA,EAAsC7wB,UAAAA,EACd,IAAAkD,CAE1B,EAACwxB,EAEV,OAAA50B,EAAA,SAAA,CAEHG,KAAA,SAAW,MAAA,gBAAA00B,EAAA,UAAA,EAAA,GAA+B,SAAA,CAAAzxB,GAAA0xB,EAAA30B,EAAA,MAAA,CAAAD,IAC7BoF,GAAAA,EACH,IAAAM,EAAEA,MAAAA,KAAMkqB,OAAAA,IAAAA,CAAO+E,EAAAA,EAAAA,OAAAA,CAAIC,SAAAA,CAAAA,CAAW1xB,EAAAA,IAAAA,EAAAA,OAAAA,CAAQwxB,MAAAA,QAC5C,SACE5uB,GAAA8pB,CAAA,CAAA,CAAa,CAAA,CAAA,CAAA,CAAoD,CAAA,CAE7D,CAAA,CAAA,CAAiBgF,CAAAA,CAAgBlvB,CAAY,MAAYmvB,GAAAA,GAAAjD,EAAA,ECtenEvL,GAAQ,GAEd,SAASyO,GAAO,CAAEtgB,MAAAA,EAAO8W,WAAAA,EAAY,GAAG5R,CAAM,EAAG,CACzC7E,MAAAA,EAAaC,GAAY/S,CAAM,EAC/BgzB,EAAU,CAAC,CAACvgB,EACZ+R,EAAS+E,EAAa,CAAC,EAAI9E,GAAU,EACrC,CAAE7nB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,CAC9B8C,UAAUgY,GAAAA,YAAAA,EAAOhY,WAAY6kB,EAAO7kB,QAAAA,CACrC,EACKlC,EAAS,GAAEu1B,EAAU,QAAU,WAAY,cAAarzB,CAAS,IAC9DlC,GAAAA,EAAOu1B,EAAW,kBAAoB,eAAc,EAE7D,MAAMlK,EAAa3rB,IAEb81B,EAAiB91B,IACvB,eAAe+1B,EAAYzS,EAAW,EAChCA,GAAa,CAACwS,EAAe11B,WAC/B01B,EAAe11B,QAAUX,EAAMyL,GAAGwhB,UAAUsJ,WAAW,CACrDxtB,MAAO2e,GACP7R,MAAOugB,CAAAA,CACR,GAEH,MAAMttB,EAAU,MAAMutB,EAAe11B,QAAQ8nB,KAAK,EAC9C,GAAA,CAAE7nB,MAAAA,CAAUkI,EAAAA,EAChB,OAAIlI,GAAAA,MAAAA,EAAO0F,SACLud,IACSljB,EAAAA,QAAUC,EAAM,CAAC,EAAE0C,IAGxB0Y,EAAAA,GAAcpb,EAAO,QAAQ,EACrCA,EAAMoX,QAAkBuD,GAAA,CACtBmN,GAAWnN,EAAMxY,CAAQ,CAAA,CAC1B,GAEI,CACL,GAAG+F,EACHlI,MAAAA,CAAAA,CAEJ,CAEA,eAAekiB,GAAkB,CAC3B,GAAA,CACF,MAAMha,EAAU,MAAM9I,EAAMyL,GAAGwhB,UAC5BsJ,WAAW,CACVxtB,MAAO,EACP8M,MAAOugB,EACP/I,SAAUnB,EAAWvrB,OAAAA,CACtB,EACA8nB,KAAK,EACJ,GAAA,CAAE7nB,MAAAA,CAAUkI,EAAAA,EAEhB,OADQkT,EAAAA,GAAcpb,EAAO,QAAQ,EACjCA,GAAAA,GAAAA,MAAAA,EAAO0F,aAID,CACH,MAAA,EACT,CACF,CAEA,OACEhF,EAACihB,GAAQ,CAEP1hB,MAAAA,EACA2hB,eACErhB,EAAA,KAAA,CAAIC,MAAM,iBAAgBC,UACxBC,EAAA,IAAA,CAAAD,SAAI+0B,EAAU,iBAAmB,oBAAA,CAAwB,EACzD90B,EAAA,MAAA,CAAAD,SAAM0B,CAAAA,CAAc,CAAC,CAAA,CACnB,EAENO,GAAG,SACHP,SAAAA,EACA0f,UAAU,kCACVC,UAAU,uBACVG,WAAYyT,EACZxT,gBAAAA,EACAH,UAAS,GACTK,YAAa1hB,EAAA0D,IAAI,EACjB4d,eAAgB1M,EAAWgB,SAAS0L,eACpCO,aAAY,GACZF,UACE9hB,EAAC2Z,GAAK,CACJ8G,OAAM,GAENvX,SAAS,OACTwQ,WAAW,QACXrH,SAAS,SACTjJ,WACEjJ,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,QAAOC,SACjCC,EAACG,EAAI,CAACC,KAAK,OAAO+I,KAAK,GAAA,CAAK,CAAA,CACtB,EACTpJ,SAAA,CAEDC,EAACgJ,GAAQ,CAACvF,KAAMqxB,EAAW,MAAKrzB,CAAS,KAAO,MAAKA,CAAS,OAAM1B,SACjE+0B,EACCj1B,EAAA6D,EAAA,CAAA3D,SAAA,CACEC,EAACG,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAJ,EAAA,OAAA,CAAAD,SAAM,qBAAA,CAAyB,CAAC,CAAA,CACzD,EAEFF,EAAA6D,EAAA,CAAA3D,SAAA,CACEC,EAACG,EAAI,CAACC,KAAK,UAAA,CAAY,EAAE,IAAAJ,EAAA,OAAA,CAAAD,SAAM,iBAAA,CAAqB,CAAC,CAAA,CACrD,CAAA,CAEI,EACVC,EAACoJ,IAAa,CAAA,EACdvJ,EAACmJ,GAAQ,CACP9I,QAASA,IAAM,CACTysB,IAAAA,EAAcuI,OAChB,6CACF,EACA,GAAI,CAAC,KAAK5xB,KAAKqpB,CAAW,EAAG,CACvBA,GAAazrB,MAAM,kBAAkB,EACzC,MACF,CACIyrB,IACYA,EAAAA,EAAYwI,YAAY,EAAE5J,KAAK,EAE7C1K,SAASuU,KAAON,EACX,IAAGnI,CAAY,OACf,IAAGA,CAAY,KAExB,EAAE5sB,SAAA,CAEFC,EAACG,EAAI,CAACC,KAAK,KAAA,CAAO,EAAE,IAAAJ,EAAA,OAAA,CAAAD,SAAM,yBAAA,CAA6B,CAAC,CAAA,CAChD,CAAC,CAAA,CACN,CAAA,EA/DJ0B,EAAWqzB,CAiEjB,CAEL,CChIA,MAAM1O,GAAQ,GAEd,SAASiP,GAAS,CAAEhK,WAAAA,EAAY,GAAG5R,CAAM,EAAG,CACpC7E,MAAAA,EAAaC,GAAY/S,CAAM,EAC/BwkB,EAAS+E,EAAa,CAAC,EAAI9E,GAAU,EACrC,CAAE7nB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,CAC9B8C,UAAUgY,GAAAA,YAAAA,EAAOhY,WAAY6kB,EAAO7kB,QAAAA,CACrC,EACKlC,EAAS,aAAYkC,CAAS,IACpCmmB,GAASroB,EAAQ,sBAAqB,EAEtC,MAAMqrB,EAAa3rB,IAEb,CAACqsB,EAAUgK,CAAW,EAAIx2B,EAAS,CAAE,CAAA,EACrCy2B,EAAgBt2B,IACtB,eAAeu2B,EAAWjT,EAAW,CAC/BA,GAAAA,GAAa,CAACgT,EAAcl2B,QAAS,CACvCk2B,EAAcl2B,QAAUX,EAAMyL,GAAGsrB,OAAOxO,aAAa,CACnDxf,MAAO2e,EAAAA,CACR,EAGG,GAAA,CACF,MAAM/Q,EAAW3W,EAAMyL,GAAGsrB,OAAOC,SAAS,EACpC,CAAEp2B,MAAOgW,CAAAA,EAAS,MAAMD,EAAS8R,OACvCvmB,EAAY0U,CAAI,CAChBggB,MAAAA,CAAYhgB,CAAI,CAEhB1U,MAAAA,QAAe20B,EAAA,QAAA,KAAA,EACjB,GAAA,CACF,MAAAj2B,CACA,EAAAkI,EACI,OAAAlI,GAAA,MAAAA,EAAA,SAAEA,IAAUkI,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,IAEdlI,EAAeob,GAAApb,EAAA,QAAA,EACFD,EAAAA,QAAAA,GAAgB,CAC7B+nB,GAAAnN,EAAAxY,CAAA,CAEAnC,CAAQob,GAEN0M,CACF,GAAC5f,EACH,MAAAlI,CACA,CAAO,CAELA,eAAAA,GAAAA,CACF,GAAA,CACF,MAAAkI,EAAA,MAAA9I,EAAA,GAAA,OAAA,aAAA,CAEA,MAAA,CAGoB,CAAA,EACL,KAAA,EAAA,GAAA,CAAA,MAAAY,CAGR,EACKkI,EACFlI,OAAFA,EAAAob,GAAApb,EAAA,QAAA,EAAEA,GAAAA,MAAAA,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,SAAUkI,EAAAA,QAAAA,EAAAA,CAAAA,EAAAA,GACRkT,IAEKrb,EACJ,MAAA,CACT,MAAA,EACO,CAAA,CAEA,MAAA0oB,EAAA5Q,GAAA,IACTmU,EAAA,OAGIvD,EAAAA,MAAgB5Q,CACpB,MAAcnS,aAAe,SAAA,CAAAhF,EAAAG,EAAA,CAC7B,aACa,MAAA,gBAAYJ,KAAAA,GAChB,CAAA,EAAMurB,EAAA,IAAA,CAAAtU,EAAAlS,IAAA,CAAQhF,KAAM,CAAqB,KAAA2F,EAC7C6lB,QAAAA,CACO,EAAAtU,EAAEvR,EAAAA,EAAAA,OAAAA,CAAAA,EAAAA,IAAAA,GAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAMkwB,OAAAA,EAAAA,EAAAA,CAAY3e,GAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GACpB4e,SAAAA,CAAAA,EAAgBC,OAAAA,CACtB,SACO,CAAA71B,EAAA,OAAA,CAAM,MAAY,qBAAYD,SACjCF,GAAAE,CAAAA,EAAAA,CAAAA,CACE,CAAA,EAAMD,EAAM,OAAA,CAAA,MAAqB,eAAC,SAC7B81B,EAAA,eAAA,CAAA,CACD,CACN51B,CAAA,CAAA,CAAY,CAAcD,CAAAA,CAAuB,CAAA,EAhB7D,KAgBsE,CAAAurB,CACtD,CAAA,EAAA,OAERtrB,EAAAihB,GAAA,CAAA,MAAA1hB,EAGR,eAAaM,EAAA,KAAA,CAEb,uBAGIN,SAAAA,CAAAA,EAAAA,IAAAA,CACA2hB,SAAAA,UACE,CAAU,EAAAlhB,EAAA,MAAA,CAAgBD,SACxBC,CAAA,CAAA,CAAAD,CAAG,CAAQ,EACX,GAAAA,WAAM0B,SAAAA,EAAe,UACnB,qBAENO,UAAG,uBACHP,WAAAA,EACA0f,gBAAAA,EACAC,wBAAU,EAAA,GAAA,IACVG,UAAYiU,GACZhU,YAAAA,EAAAA,EAAAA,EAAAA,EACAC,eAAAA,WAAkC,eAClCJ,aAAS,GACTK,cAAa1hB,EACbshB,UAAAA,EAAgB1M,IACJ,OAAA,GACGmT,SAAAA,OACfpG,mBAEIrB,SAAM,SAENvX,WAAS/I,EAAA,SAAA,CACE,KAAA,SACF,MAAA,QACTiJ,SACEjJ,EAAAG,EAAA,CAAa,KAAA,OAAe,KAAA,GAAA,CAAOJ,CAC5B,CAAA,EAAM,SAAYF,EAAAmJ,GAAA,CAAG,QAAE,IAAA,CACtB,IAAA2jB,EAAA,OAAA,6CAAA,EACT5sB,GAAAA,CAAAA,UAEQ4sB,CAAA,EAAA,IAEDA,MAAAA,kBAEJ,EACA,MACMA,CAAazrB,IACjByrB,EAAAA,EAAA,YAAA,EAAA,KAAA,EACF,SAAA,KAAA,IAAAA,CAAA,YAEgBA,EAELyI,SAAAA,CAAAA,EAAAA,GACX,KAAA,KAAA,CACF,EAAA,IAAAp1B,EAAA,OAAA,CAAED,SAEFC,yBAAK,CAAA,CAACI,CAAK,CAAA,CAAS,CAAA,CAAM,EAAAqB,CAA8B,CAAA,CC/IpE,SAASq0B,IAAU,CACjBlO,GAAS,OAAQ,GAAG,EACdhT,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAAEgT,UAAAA,CAAcF,EAAAA,EAEd0N,QAAiCzM,GAAA,CAEnCkgB,GAAAA,CAAAA,EACJ,OAAKlgB,KAAiB,KAAA,CAChB,KAAA5V,EAAEA,GAAAA,CAAAA,EAASqmB,EAAWzQ,EAAAA,CAC5B,UAAkB6U,GAChBjkB,cAAWikB,GACXnX,KAAeoe,GACfnzB,OAAMouB,GACNpZ,UAAQqhB,GACRphB,WAAW2V,GACX1V,QAAY6V,GACZ5V,SAASqiB,GACTniB,SAAUoa,EAAAA,EACVra,CAAUyhB,EACZ,OAAMY,EACiBj2B,EAAAi2B,EAAA,CACvB,GAAA3P,EACY,WAAyCA,EAAAA,EAAkBrmB,EAAA,KAAA,UAAAqmB,CAAA,CAAA,EAFlE2P,IAEkE,CAAA,EAEzE,OAAA7pB,GAAC,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,EAAA,CAAA9L,EAAAwY,IAAA,CAED1M,GAAAA,CACM,MAAAqD,EAAA,SAAAqJ,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EACF,0BAAuBA,cAAiB,EAAErJ,CAAI,EAAA,MAAA,CAC9C0J,MAA0B,CAAA,CAA6B,CAAA,EAEvDvY,EAAQqB,MAAO,CACjB,GAAA,UACD,SAAA8zB,CAED,CAAA,CAAO,CC9BT,SAASG,IAAO,OACRthB,MAAAA,EAAaC,GAAY/S,CAAM,EACrC1C,OAAAA,EAAU,IAAM,EACb,SAAY,CACX,MAAM4N,EAAO,MAAMC,GAAGJ,OAAOG,KAAK,EAClC,GAAIA,EAAKhI,OAAQ,CACf,MAAMkI,EAAKC,KACKH,EAAKK,UAAgBC,EAAIC,WAAWL,CAAE,CAAC,EAC3ClI,SACVlD,EAAOq0B,WAAa,GAExB,CAAA,IAEJ,EAAG,CAAE,CAAA,EAGHn2B,EAAA0D,EAAA,CAAA3D,UACI6U,EAAWgB,SAASyJ,sBACpBzK,EAAWgB,SAASqD,oBAAsB,mBAC1CrE,EAAAA,EAAWE,YAAXF,MAAAA,EAAsB5P,QACtBhF,EAAC81B,GAAS,EAAA,EAEV91B,EAAC0qB,GAAS,CACRnrB,MAAM,OACNoL,KAAK,IACL3I,GAAG,OACH0f,YAAa,GACbC,UAAW3hB,EAACo2B,GAAmB,EAAA,CAAA,CAChC,CAAA,CAoBH,CAEN,CAEA,SAASA,IAAoB,CACrBxhB,MAAAA,EAAaC,GAAY/S,CAAM,EAC/Bu0B,EAAsBp3B,IACtB,CAAC4gB,EAAWC,CAAY,EAAIhhB,EAASiY,MAAS,EACpD,OACElX,EAAA6D,EAAA,CAAA3D,SAAA,CACEC,EAAC8F,EAAI,CACH/E,IAAKs1B,EACLrwB,GAAG,iBACHlG,MAAQ,qCACN8U,EAAWkM,qBAAuB,YAAc,EACjD,IAAGjB,CAAU,GACd3f,QAAgBI,GAAA,CACdA,EAAE2R,gBAAgB,EACd3D,OAAOkE,WAAW,yBAAyB,EAAEC,UAC/CnS,EAAEC,eAAe,EACjBuf,EAAyBE,GAACA,EAAiBjJ,OAAT,MAAmB,EAEzD,EAAEhX,SAEFC,EAACG,EAAI,CAACC,KAAK,eAAe+I,KAAK,IAAIrF,IAAI,eAAA,CAAiB,CAAA,CACpD,EACN9D,EAACs2B,GAAiB,CAChBtW,MAAOH,EACPO,UAAWiW,EACX53B,QAASA,IAAMqhB,EAAa/I,MAAS,CAAA,CACtC,CAAC,CAAA,CACF,CAEN,CAEA,MAAMwf,GAAsB,GACtBC,GAA8B,EACpC,SAASF,GAAkB,CAAElW,UAAAA,EAAWJ,MAAAA,EAAOvhB,QAAAA,CAAQ,EAAG,CAClD,KAAA,CAAEC,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,EAC1BiW,EAAaC,GAAY/S,CAAM,EAC/B,CAAClD,EAASC,CAAU,EAAIC,EAAS,SAAS,EAE1CizB,EAAwBrzB,EAAMyL,GAAGoJ,cAAc/U,KAAK,CACxDiJ,MAAO8uB,EAAAA,CACR,EAED,eAAe5D,GAAqB,CAC5BV,MAAAA,EAAmB,MAAMF,EAAsB5K,OAC/C5T,EAAgB0e,EAAiB3yB,MAEvC,GAAIiU,GAAAA,MAAAA,EAAevO,OAAQ,CACzBuO,EAAcmD,QAA0BqZ,GAAA,CAC3BA,GAAAA,EAAathB,OAAQhN,EAAU,CACxCg1B,cAAe,EAAA,CAChB,CAAA,CACF,EAEKvE,MAAAA,EAAuBnB,GAAmBxd,CAAa,EAEtD4e,EAAAA,kBAAoB5e,EAAc,CAAC,EAC1CzR,EAAOyR,cAAgB2e,CACzB,CAEApwB,OAAAA,EAAOgf,qBAAuB,GACvBsR,EAAAA,2BAA6B1kB,KAAKgpB,MAClCzE,CACT,CAEA,KAAM,CAAC0E,EAAmBC,CAAoB,EAAI93B,EAAS,EAAK,EAChE,SAASuzB,GAAsB,CACtB3zB,OAAAA,EAAMyL,GAAG8kB,eAAezwB,KAAK,CAClCiJ,MAAO,CAAA,CACR,CACH,CAEA,SAASgrB,GAAoB,CAC3B5zB,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAM8zB,EAAmB,EACnB1D,MAAAA,EAAiB,MAAMoD,IACRuE,EAAA,CAAC,EAAC3H,GAAAA,MAAAA,EAAgBjqB,OAAM,EAC7CnG,EAAW,SAAS,OACV,CACVA,EAAW,OAAO,CACpB,CAAA,IAEJ,CAEAO,OAAAA,EAAU,IAAM,CACV4gB,IAAU,QAA0ByS,GAAA,EACvC,CAACzS,CAAK,CAAC,EAGRngB,EAACsgB,GAAc,CACb9N,cAAc,qBACd2N,MAAAA,EACAI,UAAAA,EACA3hB,QAAAA,EACA6hB,OAAQ,CACN5f,OAAQyY,SAASoH,IACnB,EACAxX,SAAS,OACTwQ,WAAW,QACXrH,SAAS,SACT9D,MAAM,SACN+D,mBAAmB,UAASpS,UAE5BC,EAAA,SAAA,CAAAD,SACEC,EAAA,KAAA,CAAAD,SAAI,eAAA,CAAiB,CAAA,CACf,EACRC,EAAA,OAAA,CAAAD,SACG6U,EAAWrB,cAAcvO,OACxBhF,EAAA0D,EAAA,CAAA3D,SACG6U,EAAWrB,cACTgH,MAAM,EAAGic,EAA2B,EACpCnpB,OACCuH,GAAAA,EAAWgB,SAASwd,aAChBrD,EAAa9vB,OAAS,UACtB,EACN,EACCkF,IAAK4qB,GACJ/vB,EAAC8vB,GAAY,CAEXruB,SAAAA,EACAsuB,aAAAA,CAAAA,EAFKA,EAAa/tB,EAGnB,CACF,CACH,CAAA,EACApD,IAAY,UACdoB,EAAA,MAAA,CAAKF,MAAM,WAAUC,SACnBC,EAACiK,GAAM,CAAC6D,OAAM,EAAA,CAAE,CACb,CAAA,EAELlP,IAAY,SACViB,EAAA,MAAA,CAAKC,MAAM,WAAUC,UACnBC,EAAA,IAAA,CAAAD,SAAG,gCAAA,CAAiC,EACpCC,EAAA,IAAA,CAAAD,SACEC,EAAA,SAAA,CAAQC,KAAK,SAASC,QAASuyB,EAAkB1yB,SAAC,WAAA,CAE1C,CAAA,CACP,CAAC,CAAA,CACD,CAAA,CAGL,EACNF,EAAA,SAAA,CAAAE,SAAA,CACEF,EAACiG,EAAI,CAACE,GAAG,YAAYlG,MAAM,eAAcC,SAAA,CACvCC,EAACG,EAAI,CAACC,KAAK,IAAA,CAAM,EAAE,IAAAJ,EAAA,OAAA,CAAAD,SAAM,UAAA,CAAc,CAAC,CAAA,CACpC,EACNF,EAACiG,EAAI,CAACE,GAAG,iBAAiBlG,MAAM,gBAAeC,SAC5C42B,CAAAA,EACC92B,EAAA6D,EAAA,CAAA3D,UACEC,EAAA,OAAA,CAAMF,MAAM,gBAAeC,SAAC,KAAA,CAAS,EAAE,IACvCC,EAAA,OAAA,CAAAD,SAAM,iBAAA,CAAqB,CAAC,CAAA,CAC5B,EAEFC,EAAA,IAAA,CAAAD,SAAG,SAAA,CAAU,EACZ,IACHC,EAACG,EAAI,CAACC,KAAK,aAAA,CAAe,CAAC,CAAA,CACvB,CAAC,CAAA,CACD,CAAC,CAAA,CACK,CAEpB,CAEA,MAAew0B,GAAAA,GAAKsB,EAAI,EC3OXW,GAAc,yCACdC,GAAkB,yBAC/B,SAASC,GAAqB9zB,EAAK,CAEjC,KAAM,CAAE+zB,SAAAA,EAAUvsB,SAAAA,CAAS,EAAI,IAAIwsB,IAAIh0B,CAAG,EACpC,CAAGC,CAAAA,EAAUolB,EAAQtmB,CAAE,EAAIyI,EAASysB,MAAML,EAAW,GAAK,GAEhE,GAAI70B,EACF,MAAQ,IAAGg1B,CAAS,MAAKh1B,CAAG,GAG9B,KAAM,CAAA,CAAGm1B,CAAM,EAAI1sB,EAASysB,MAAMJ,EAAe,GAAK,GAEtD,GAAIK,EACF,MAAQ,IAAGH,CAAS,MAAKG,CAAO,EAEpC,CCVA,SAAwBC,IAAY,CAElC,MAAMn0B,EADWo0B,KACI5sB,SAAS6sB,QAAQ,MAAO,EAAE,EACzCC,EAAYR,GAAqB9zB,CAAG,EAE1C6M,OAAAA,GAAgB,IAAM,CAChBynB,GACFpmB,WAAW,IAAM,CACR0P,OAAAA,SAASuU,KAAOmC,EAAY,cAClC,GAAG,CACR,EACC,CAACA,CAAS,CAAC,EAGZ13B,EAAA,MAAA,CAAKC,MAAM,WAAWuR,SAAS,KAAItR,SAChCw3B,CAAAA,EACC13B,EAAA6D,EAAA,CAAA3D,UACEC,EAAA,KAAA,CAAAD,SAAI,cAAA,CAAgB,EACpBC,EAAA,IAAA,CAAAD,SACEC,EAAA,IAAA,CAAGyD,KAAO,IAAG8zB,CAAU,aAAYx3B,SAAEw3B,CAAAA,CAAa,CAAA,CACjD,CAAC,CAAA,CACJ,EAEF13B,EAAA6D,EAAA,CAAA3D,UACEC,EAAA,KAAA,CAAAD,SAAI,uBAAA,CAAyB,EAC7BC,EAAA,IAAA,CAAAD,SACEC,EAAA,IAAA,CAAGyD,KAAMR,EAAKvC,OAAO,SAAQX,SAC1BkD,CAAAA,CACA,CAAA,CACF,CAAC,CAAA,CACJ,EAEJjD,EAAK,KAAA,CAAA,CAAA,EACLA,EAAA,IAAA,CAAAD,SACEC,EAAC8F,EAAI,CAACE,GAAG,IAAGjG,SAAC,SAAA,CAAa,CAAA,CACzB,CAAC,CAAA,CACD,CAET,CC/BA,SAASy3B,IAAQ,CACT,KAAA,CAAE94B,MAAAA,GAAUC,EAAI,EACtBipB,GAAU,QAAS,IAAG,EACtB,KAAM,CAAChpB,EAASC,CAAU,EAAIC,EAAS,SAAS,EAE1C,CAACiO,EAAa3B,CAAM,EAAIC,GAAkBC,GAAAA,EAAI,EAAG,CAAC,EAClD,CAACN,EAAOC,CAAQ,EAAInM,EAAS,CAAE,CAAA,EACrCM,EAAU,IAAM,CACdP,EAAW,SAAS,GACnB,SAAY,CACP,GAAA,CACF,MAAMmM,EAAQ,MAAMtM,EAAMyL,GAAGa,MAAMxM,KAAK,EACxCoC,GAAiB,EACjBqK,EAAc,SAAA,CACdpM,MAAAA,GACU,OAAA,CACV+B,CACA/B,IAAkB,EACpB,CAAAkO,CAAA,CAAA,EAAA,KACC,CAAApB,EAAAI,CAAA,EAAAjN,EAAA,EAAA,EACL,OAAIiO,EAAAA,MAAY,CAEhB,GAAM,aAEN,uBACO/K,SAAG,KAAalC,SAAM,CAAAD,EAAA,MAAA,CAA0B,MAAA,qBAAIE,SACvDF,CAAAA,EAAA,SAAA,CAAW,SAAAA,EAAA,MAAA,CAAoBE,MAC7BC,cAAAD,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBF,CAAAA,EAAA8e,GAAA,CAAA,CAAA,EAAA3e,EAAA8F,EAAA,CAAW,GAAA,IAAa/F,MAAAA,eAEhBiG,SAAGhG,EAAAG,EAAA,CAAU,KAAA,OAAcJ,KAAAA,GAC1B,CAAA,CAAM,CAAA,CAAA,CAAY,CAAA,EAAGC,EAAE,KAAA,CAAC,SACxB,OAAA,CACJ,EACLA,EAAA,MAAA,CAAAD,MAAI,cACJC,SAAAA,EAAA,SAAA,CAAW,KAAA,SAAaD,MAAAA,QAEpBE,QAAK,IAAA8L,EAAA,EAAA,EACLjM,SAAME,EAAAG,EAAA,CACND,KAAAA,OAA6CH,KAAAA,IAEvCK,IAAK,UAAA,CAAA,CAAY,CAAA,CAAQ,CAAA,CAAA,CAAY,CAAA,CACrC,CAAA,EAACJ,EACL,OAAA,CAAA,SACHgL,EAAA,OAAA,EAAAhL,EAAA,KAAA,CAEPA,MAAA,YACGgL,SAAAA,EAAe,IAAAxM,KACd,KAAA,CAAU,SAAAwB,EAAA8F,EAAA,CACPkF,GAAAA,MAAAA,EAAWxM,EAAAA,GACVuB,WACO,OAAA,CAACiG,SAAUxH,CAAAA,EAAQ2B,EAAA,CAAEJ,KACxBF,MAAA,CAAAE,EAAAA,IAAAA,EACEC,OAAK,CAACI,SAAK5B,EAAA,KAAA,CAAQ,CAAA,CAAE,CAAA,CAAYe,CAAAA,CAAa,CAAA,CAAA,CAC1C,CAAA,EAcFX,IAAA,UAAAoB,EAAA,IAAA,CAAC,MAEV,WACC,SACUA,EAAAiK,GAAA,EAAA,CACd,CAAA,EAASrL,IAAA,QAAAoB,EAAA,IAAA,CAAUD,MACjBC,WACC,SACW,uBACd,CAAA,EAASA,EAAA,IAAA,CAAUD,MAAC,WAEpBC,SAAA,eAAA,CAAA,CAAS,CAAA,CAAA,CAAW,CAAA,EAAa2L,GAAG3L,EAAAoK,GAAA,CACrC,MACI,QACJ,QAEHpK,GAAAA,CACQM,EAAA,SAAAA,EAAA,iBACU,EAAA,CAEZyL,EACF,SAAA/L,EAAAzB,GAAA,CACF,KAAAoN,GAAA,YAAAA,EAAA,KAAE5L,WAEU,CACJ4L,EAAsBnN,QAAAA,eAGjBuN,EAAA,EAAA,CACT,CACAA,CAAAA,CAA6B,CAC/B,CAAA,CAAA,CAAA,CACD,CClHX,MAAe0rB,GAAA,yCCAT,CAAEC,iBAAkBC,GAAaC,aAAcC,EAAQ,EAAIC,CAAAA,iBAAAA,SAAAA,eAAAA,gBAAAA,aAAAA,wBAAAA,aAAAA,aAAAA,SAAAA,WAAAA,KAAAA,aAAAA,IAAAA,GAAAA,KAAAA,GAAAA,IAAAA,EAAAA,EAG1D,eAAeC,GAAoB,CAAEC,YAAAA,CAAY,EAAG,CACzD,MAAMC,EAAqB,IAAIjK,gBAAgB,CAC7CkK,YAAaP,GACbQ,cAAetX,SAASuX,OAASvX,SAASpW,SAC1C4tB,OAAQ,oBACRC,QAAST,EACX,CAAC,EAYDj3B,OADyB,MAVI,MAAMyT,MAChC,WAAU2jB,CAAY,eACvB,CACEO,OAAQ,OACRC,QAAS,CACP,eAAgB,mCACjB,EACDjY,KAAM0X,EAAmBQ,SAAS,CACpC,CACF,GACoDC,MACtCC,CAAmB,eAAAC,GAAA,CACjC,YAAAZ,EACF,UAAAa,CAEA,EAAA,CAA4Cb,QAAW,IAAA,gBAAA,CAAEa,UAAAA,EAAa,MAAA,oBACpE,aAAyB,SAAA,OAAsB,SAAA,SAE7CC,cAA0B,MAC1BC,CAAAA,EAEAC,iBADAhB,CAAA,oBAAAiB,EAAA,SAAA,CAAA,EAEF,CACMC,eAAAA,GAAoB,CAC1B,YAAAlB,EACF,UAAAa,EAEA,cAAAM,EACEnB,KAAAA,IAEAmB,QAAa,IAAA,gBAAA,CACbC,UAAAA,EACC,cAAAD,EACD,aAAmBnL,SAAe,OAAA,SAAC,SACjC6K,WAAS,qBACTM,KAAAA,EACAJ,MAAAA,mBACAM,CAAAA,EASA9Y,OADC,MAPG,MAAA,MAAA,WAAAyX,CAAA,eAAA,CACJc,OAAO,OACP,QAAA,CACIQ,kDACJf,EACAC,KAAOlS,EAAE,SAAA,CACP,CAAA,GACD,MAEH,CC9CF,SAASiT,IAAQ,CACf3R,GAAS,QAAQ,EACjB,MAAM4R,EAAiBv6B,IACjBw6B,EAAoBryB,EAAMmN,MAAM5T,IAAI,aAAa,EACjD,CAAC/B,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C,CAAC46B,EAAcC,CAAe,EAAI76B,GACtC26B,GAAAA,YAAAA,EAAmBtE,gBAAiB,EACtC,EAEM,CAACyE,EAAeC,CAAgB,EAAI/6B,EAAS,CAAE,CAAA,EACrDM,EAAU,IAAM,EACb,SAAY,CACP,GAAA,CAEIqF,MAAAA,EAAO,MADD,MAAM4P,MAAMojB,EAAgB,GACjBiB,OACvBmB,EAAiBp1B,CAAI,CAAA,MACX,CAAA,CAEV7D,IACF,EAAA,CAAA,CAAA,EAAA,MACCk5B,EAAA9B,GAAA,CACL5wB,EAAK,MAAA,IAAA,cAAA4wB,CAAA,GAQL,UACQzjB,EAAU,SAAA,EAEH,GAAA,CACX1V,KAAAA,CACI,UAAAg6B,EACI,cAAAM,CAAEN,EAAAA,MAAAA,GAAAA,CAAWM,YAAAA,CAAAA,CAAc,EAC/BnB,GAAAA,GACD5wB,EAAA,QAAA,IAAA,WAAAyxB,CAAA,EAEDzxB,cAAgC,eAAA+xB,CAAA,EACxBha,SAAAA,KAAY,MAAAyZ,GAAqB,CACjCzZ,YAAAA,EAEG1b,UAAAA,CAAiC,CACxCu0B,GAEF,MAAC,gCAAA,EAED92B,EAAsC,SAAA,CACxC,MAAA,CACArC,EAAW,OAAS,EAEpB+B,IACA/B,EACFwB,EAAAC,GAAA,CACFA,EAAG,eAAA,EACL,KAAA,CAEA,SAAAy5B,CACEz5B,EAAiBA,EAAA,OACX,IAAA03B,EAAA+B,EAAA,YAAA,MAAA,YAAA,EAAEA,EAAAA,EAAAA,QAAAA,eAAAA,EAAAA,EAAAA,QAAAA,OAAAA,EAAAA,EAAS/B,EAAMt3B,EAAAA,QAAAA,YAAAA,EAAAA,EACLq5B,KAAAA,KAAAA,CAAAA,IAElB/B,IAAkC,KAAAv2B,GAAAA,EAAoB61B,UAAkB,CAAA,GAGxEwC,EAAe9B,CAAW,CACxBA,EAGFgC,EAAAN,EAAAE,EAAA,OAAAn4B,GAAAA,EAAA,SAAAi4B,CAAA,CAAA,EAAA,KAAA,CAAAz0B,EAAAJ,IAAA,CACAi1B,MAAAA,EAA0B70B,EAAA,YAAA,EAAA,WAAAy0B,EAAA,YAAA,CAAA,EAC5BO,EAAAp1B,EAAA,YAAA,EAAA,WAAA60B,EAAA,YAAA,CAAA,EAEA,OAAMM,GAAuBN,CAAAA,KAQrB,CAAAQ,GAAoBr1B,IAGoB,CACxC,CAAA,EAAA,MAAoBo1B,EAAAA,EAAAA,EAAAA,CAAAA,EAAoB,OAAAj6B,EAAA,OAAA,CACjC,GAAA,QAERua,MAAM,CAGb,UACE,QAAS,EAAQjL,SAAOzP,EAAA,OAAA,CAAEs6B,SAAAA,EAAoB,SAAA,CAAAn6B,EAAA,KAAA,CAAED,iBAC9C,CAAMM,EAAAA,EAAAA,QAAAA,CAAmBN,SACvBC,CAAAA,EAAA,IAAA,CAAI,SAAA,UAAA,CACJH,EAAAA,EAAA,QAAA,CAAAE,MAAAA,EACEA,SAAG,GACHC,KAAAA,OACEV,MAAOo6B,QACP7iB,GAAQ,cACR5W,IAAKu5B,EACL15B,SAAMlB,IAAA,UACNoD,YAAG,MACHjB,eAAKy4B,MACLv4B,aAAsB,MAEtBwrB,WAAY,GACZ2N,YAAe,kBACfC,QAAa/5B,GAAA,CACDq5B,EAAAr5B,EAAA,OAAA,KAAA,CACA,CAAA,CAAA,oBACI,QAAA,EAAAN,EAAA,KAAA,CACEM,GAAAA,wBAClB,SAAA05B,EAAA,IAAAv4B,GAAAzB,EAAA,KAAA,CAEDg6B,SAAAA,EAAAA,SAA+B,CACvB,KAAA,SACJA,MAAAA,SACCj6B,YACE,CACO+5B,EAAAr4B,CAAA,CACC,EACNvB,SAAeuB,CACbq4B,CAAAA,CAAuB,CACzB,CAAA,CAAA,CAAA,EAAA95B,EAECyB,MAAAA,CAAAA,GACK,eAAC,SAEZ,wBAAA,CACC,CAEJzB,CAAA,CAAA,EAAKgC,IAAG,SAAAhC,EAAA,IAAA,CAAA,MAAe,QAAkC,SAC1D,yDAAA,CAMI,EACNpB,EAAY,MAAA,CACRkB,SAAM,CAAAE,EAAA,SAAA,CAAQ,MAAA,QAInBH,SAAAjB,IAAA,UAAAmB,SACEC,QAAA,CAAA,EAAc,GAAA,CAAA,CAAA,EAAQiB,KAAsB,CAAA,OAAWrC,IAAA,SAAA,CAEvD,IAAa,KAAA,CAAA,CAAA,EAAAoB,EAAA,IAAA,CAEfA,SAAOA,EAAA,IAAA,MAASpB,mCAChBoB,OAAK,SACLD,6CACE,CAAA,CAAQ,CAAA,EAAmCW,EAAO,IAAA,CAAA,SAASV,EAAA8F,EAAA,CAExD,GAAA,IAEL9F,SAAA,SAAA,CAAAD,CACO,CAAA,CAAA,CAAI,CAAA,CAAI,CAAA,CAAa,CCpJpC,MAAMu6B,GAAc,EACdlU,GAAQ,GAEd,SAASmU,GAAO9gB,EAAO,CACrB,MAAM6M,EAASC,KACT,CAAE7nB,MAAAA,EAAO+C,SAAAA,EAAUC,cAAAA,GAAkB/C,EAAI,CAC7C8C,SAAU6kB,EAAO7kB,QAAAA,CAClB,EACK,CAAC7C,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C,CAAC0nB,CAAY,EAAIE,KACjB8T,EAAgBv7B,IAChBsI,GAAIkS,GAAAA,YAAAA,EAAOhF,QAAS+R,EAAa7lB,IAAI,GAAG,EACxCV,GAAOwZ,GAAAA,YAAAA,EAAOxZ,OAAQumB,EAAa7lB,IAAI,MAAM,EACnDinB,GACErgB,EACK,WAAUA,CAAE,GACXtH,EACK,KACC,CACE+zB,SAAU,QACVjyB,SAAU,WACVupB,SAAU,UAAA,EACVrrB,CAAI,CACP,IACD,EACL,GACD,SACH,SACH,EAEA,KAAM,CAAC+hB,EAAUC,CAAW,EAAInjB,EAAS,EAAK,EACxC27B,EAAYx7B,EAAO,CAAC,EAC1BG,EAAU,IAAM,CACdq7B,EAAUp7B,QAAU,CAAA,EACnB,CAACkI,EAAGtH,CAAI,CAAC,EAEZ,MAAMqc,EAAgBrd,IACtB6Q,GAAgB,IAAM,UACNzQ,GAAAA,EAAAA,EAAAA,UAAAA,YAAAA,EAAS+Q,WAAT/Q,MAAAA,EAAAA,KAAAA,EAAoB,EAAG,EAAC,EACrC,CAACkI,EAAGtH,CAAI,CAAC,EAEZ,KAAM,CAACy6B,EAAeC,CAAgB,EAAI77B,EAAS,CAAE,CAAA,EAC/C,CAAC87B,EAAgBC,CAAiB,EAAI/7B,EAAS,CAAE,CAAA,EACjD,CAACg8B,EAAgBC,CAAiB,EAAIj8B,EAAS,CAAE,CAAA,EACvDM,EAAU,IAAM,CACdu7B,EAAiB,CAAE,CAAA,EACnBE,EAAkB,CAAE,CAAA,EACpBE,EAAkB,CAAE,CAAA,CAAA,EACnB,CAACxzB,CAAC,CAAC,EACN,MAAMyzB,EAAqB,CACzBhH,SAAU2G,EACV54B,SAAU84B,EACVvP,SAAUyP,CAAAA,EAGZ,SAASE,EAAY1Y,EAAW,CAC9B1jB,EAAW,SAAS,EAChB0jB,GAAa,CAACtiB,IAChB06B,EAAiBD,EAAcngB,MAAM,EAAG+f,EAAW,CAAC,EACpDO,EAAkBD,EAAergB,MAAM,EAAG+f,EAAW,CAAC,EACtDS,EAAkBD,EAAevgB,MAAM,EAAG+f,EAAW,CAAC,IAGvD,SAAY,SACX,MAAMhU,EAAS,CACb/e,EAAAA,EACAoF,QAASjL,EACT+F,MAAO6yB,EAAAA,EAELr6B,IACFqmB,EAAO7e,MAAQ2e,GACfE,EAAOrmB,KAAOA,EACdqmB,EAAO4U,OAAST,EAAUp7B,SAExB,GAAA,CACF,MAAMmI,EAAU,MAAM9I,EAAM+N,GAAGC,OAAO4Z,CAAM,EAC5C1lB,GAAAA,EACA,GAAU2hB,EAAA,CACRyY,EAAe/6B,CAAA,EAAAuH,EAAAvH,CAAA,CAAA,EACb+6B,MAAAA,GAAAA,EAAAA,EAAuB/6B,CAAUA,IAAjC+6B,YAAAA,EAAiC/6B,OAC3B+E,EAAAA,QAAiB/E,GACvBw6B,EAAoBrU,CAAAA,CAAAA,CAAAA,CACpBnE,KAAY,CACP+Y,EAAA/6B,CAAA,EAAAk7B,GAAA,CAAA,GAAAA,EAAA,GAAA3zB,EAAAvH,CAAA,CAAA,CAAA,EACcA,MAAAA,GAAAA,EAAAA,EAAIA,CAAGk7B,IAAPl7B,YAAAA,EAAOk7B,OACpBn2B,EAAAA,QAAiB/E,EAAO+E,QAAAA,GACpB3F,EAAAA,CAAAA,CAAAA,CAAUo7B,CACR,MAETE,EAAAnzB,EAAA,QAAA,EACLmzB,IAAiC,QAAA,EACjCE,EAAkBrzB,EAAQzF,QAAQ,EAClCg5B,EAAAA,UACAN,EAAoB,EAAA,EAEtB57B,EAAA,SAAA,CACAA,MAAoB,GACR,OAAA,CACZ+B,CACA/B,IACF,CAAAO,OAAAA,EACC,IAAA,SACLmI,KAEAnI,GAAAA,EAAAA,EAAgB,UAAhBA,YAAAA,EAAgB,WAAhBA,MAAAA,EAAAA,KAAAA,EAAgBmI,GAGd0zB,EAAO,EAAA,EAGLA,EAAAA,CAAAA,EAAAA,EAAAA,CAAgB,CAAA,EAClBj7B,EAAA,MAAA,CACC,GAAIC,cAEP,uBACO+B,IAAGsa,EAAcxc,SAAMD,EAAA,MAAA,CAAsByc,MAAAA,qBAAcvc,YAC9D,SAAA,CAAW,SAAAF,EAAA,MAAA,CAAoBE,MAC7BC,cAAAD,YACE,MAAA,CAAW,MAAA,cAAaA,SACtBC,EAAA2e,GAAA,EAAA,CAAA,CAAA,EAAW3e,EAAAo7B,GAAA,CAAar7B,IACtBC,CAAU,CACP,EACLA,EAACo7B,MAAU,CAACr6B,MAAKy5B,cACjBx6B,SAAA,GAAA,CAAA,CAAKF,CAAM,CAAA,CAAc,CAAA,EAAMD,EAAM,OAAA,CAAA,SAClC,CAAA,CAAA,CAAA0H,GAAA1H,EAAA,MAAA,CAEPA,MAAA,sBACI,CAAC0H,CAAAA,CAAAA,KACDzB,EAAA,CAAW,GAAA,UAAAyB,EAAA,MAAAA,CAAA,GAAA,EAAA,YACP,OAAc,CAAA,IAAoCxH,MAAC,gBAEnD,WACE8J,GAAO,aAAAtC,CAAA,gBAAA,EACD,CACNvB,iBAEF,KAAA,WACE6D,GAAO,aAAAtC,CAAA,gBAAA,EACD,CACNvB,cAEF,KAAA,WACE6D,GAAO,aAAAtC,CAAA,gBAAA,CAAA,EACD,KAAA,CAAAtC,EAAAJ,IACDI,cAIDA,EAAEhF,OAASA,EAAa,EACbA,CAAa,EAAA,IAAAo7B,GAAAr7B,EAAA8F,EAAA,CACrB,GAAAu1B,EAAA,GACR,SACKA,EACJr7B,KAAK,CAAA,CAACgG,EAASA,CAAAA,MAAU6D,EAAAA,CAAK,SAC9B,EAAA,CAAA5J,GAAAA,IAAA,aAAAJ,EAAA6D,EAAA,CAGP,cACC,YAAA1D,EAAA,KAAA,OACI,kBAEGC,SAAS,UACR,CAAA,EAAU26B,EAAA,OAAA,EAAA/6B,EAAA6D,EAAA,CAAiB3D,SAAC,CAAAC,EAAA,KAAA,CAE7B46B,MAAAA,8BACC76B,SACEC,EAAA,IAAAsB,GAAAtB,EAAA,KAAA,CAAU,SAAAA,EAAA2D,GAAA,CACPi3B,QAAAA,EACC76B,SAAAA,EAEIuB,UAAAA,EAAAA,CACAG,CAAAA,EAAAA,EACS,EAAA,CAAA,CAAA,CAAA,EAAAxB,IACV,YAAAD,EAAA,MAAA,CAAC,MALagC,WAQjB,SACMnC,EAAAiG,EAAA,CACG,MAAA,eAAU/F,GAAAA,aACdwH,CAAA,iBACHzH,SAAM,CAAA,qBAAAE,EAAAG,EAAA,CACN6F,kBAAmB,CACpB,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAA/F,IAAArB,IAAA,UAAAoB,EAAA,IAAA,CAAC,MAEV,WAGH,WACaiK,GAAA,CACF,OAAA,EAAA,CAAUlK,CACV,CAAA,EAAOC,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAJ,EAAA6D,EAAA,CAAkB,SAEzC,CAAAzD,IAAA,YAAAD,EAAA,KAAA,CAGH,wBAEGC,SAAS,UACR,CAAA,EAAU66B,EAAA,OAAA,EAAAj7B,EAAA6D,EAAA,CAAiB3D,SAAC,CAAAC,EAAA,KAAA,CAE7B86B,MAAAA,yBACC/6B,SACEC,EAAA,IAAA2T,GAAA3T,EAAA,KAAA,CAAU,SAAAH,EAAAiG,EAAA,CACPg1B,GAAAA,EAAAA,IAAAA,CAAoBnnB,MAAAA,MACnB,GAAA,MAAAA,EAAA,IAAA,GAAA5T,YACOI,EAAA,CACH6F,KAEO,SACkB,CACxBjG,EAAAA,EAAAA,OAEI,CAACK,SAAKuT,EAAA,IAAA,CAAW,CACtB3T,CAAA,CAAA,CAAeyF,EAAAA,EAAY,IAAA,CAAA,CAAA,CAAA,EAAAxF,IACvB,YAAAD,EAAA,MAAA,CAAC,MAVQyF,WAajB,SACM5F,EAAAiG,EAAA,CACG,MAAA,eAAU/F,GAAAA,aACdwH,CAAA,iBACHzH,SAAM,CAAA,qBAAAE,EAAAG,EAAA,CACN6F,kBAAmB,CACpB,CAAA,CACwB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACzC,CAAA/F,IAAArB,IAAA,UAAAoB,EAAA,IAAA,CAAC,MAEV,WAGH,WACaiK,GAAA,CACF,OAAA,EAAA,CAAUlK,CACV,CAAA,EAAOC,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,oBAAA,CAAA,EAAS,CAAA,CAAA,GAAW,CAAAC,GAAAA,IAAA,aAAAJ,EAAA6D,EAAA,CAAkB,SAEzC,CAAAzD,IAAA,YAAAD,EAAA,KAAA,CAGH,wBAEGC,SAAS,OACR,CAAA,EAAUy6B,EAAA,OAAA,EAAA76B,EAAA6D,EAAA,CAAiB3D,SAAC,CAAAC,EAAA,KAAA,CAE7B06B,MAAAA,WACC36B,SACEC,EAAA,IAAAyO,GAAAzO,EAAA,KAAA,CAAU,SAAAA,EAAA8F,EAAA,CACP40B,MAAAA,cACC36B,GAAAA,EACO,IAAA0B,CAAA,MAAAgN,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACH3O,SAAME,EAAAslB,GAAA,CACNtf,OAAAA,CAGsB,CACrBjG,CAEM,CAAC0O,CAAAA,EAAAA,EAAiB,EAAA,CAAA,CAAA,CAAA,EAACxO,IACtB,YAAAD,EAAA,MAAA,CAAC,MAVOgC,WAahB,SACMnC,EAAAiG,EAAA,CACG,MAAA,eAAU/F,GAAAA,aACdwH,CAAA,iBACHzH,SAAM,CAAA,kBAAAE,EAAAG,EAAA,CACN6F,kBAAmB,CACpB,CAAA,CACqB,CAAA,CAAM,CAAA,CAAA,CAAgB,CAAA,EACtC,CAAA/F,IAAArB,IAAA,UAAAoB,EAAA,IAAA,CAAC,MAEV,WAGH,WACaiK,GAAA,CACF,OAAA,EAAA,CAAUlK,CACV,CAAA,EAAOC,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,iBAAA,CAAA,EAAS,CAAA,CAAA,EAAUD,CAAC,CAAAE,IAAArB,IAAA,UAAAojB,EAAAhiB,EAAA6lB,GAAA,CAAe,SAEtCC,GAAA,OASmB,EACd,SAAA9lB,EAAA,SAAA,CACF,KAAA,SAAED,MAAAA,cAGAE,QAAK,IAAAg7B,EAAA,EACLn7B,MAAM,CACNI,eAA2B,KACpB,EAAA,SAAkB,YAAA,CAAM,CAAA,CAAA,EAChCF,EAAA,IAAA,CAED,MAAQ,yBAGVA,SAAA,UAAA,CAAA,EAASpB,IAAA,WAAAoB,EAAA,IAAA,CAAwBD,MAAC,WAAW,SAGnCC,EAAAiK,GAAA,CACD,OAAA,EAAA,CAAUlK,CACV,CAAA,EAAA,CAAO,CAAA,EAAEnB,IAAA,UAAAoB,EAAA,IAAA,CAAC,MAGrB,WACJ,SACYA,EAAAiK,GAAA,CACL,OAAA,EAAA,CAAUlK,CACV,CAAA,EAAOC,EAAA,IAAA,CAAA,MAAE,WAGlBA,SAAA,6DAAA,CAAA,CAAGF,CAAM,CAAA,CAAA,CAAW,CAAA,CAGrB,CAAA,CACI,CAIf,MAAAs7B,GAAAE,GAAA,CAAA7hB,EAAA1Y,IAAA,CAEew5B,KAAAA,CAEf,SAAA94B,CACQ,EAAA9C,EAAA,EAAE8C,CAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAiB,CAAA85B,EAAAC,CAAA,EAAA18B,EAAA,EAAA,EACnB,CAAC0nB,EAAAA,CAA6B,EAAA1nB,EAAA0nB,EAAoB,IAAA,GAAA,GAAA,EAAA,EAClDvmB,EAACs7B,EAAiC,IAAA,MAAA,EAClChlB,EAAgBtX,EAAA,MAChBgB,EAAoBU,EAAI,IAAM,EAC9B4V,OAAAA,KAAqB,KAAA,CAErBklB,SAAAA,GAAiBx8B,CACvBy8B,EAAAA,CAAAA,GAEIC,MAAAA,IAAc,CAChBF,EAAA,QAAA,QAEEA,EAAAA,EACF57B,EAAA,OAAA,CACA,IAAA0W,EAEF,iCAEIxV,SAAKwV,GAAAA,IACCjW,EAAA,eAAA,IACW,CACbC,MAAe+lB,EAAA,CAEb7R,EAAOA,CACT,EACKA,IACL6R,EAAA,KAAArmB,GACIA,EAAAA,CAAAA,CAAMqmB,MACVG,EAAgBH,CAAM,CAAA,CAEtBG,EACF,SAAA,CAAAzmB,EAAA,QAAA,CACF,IAAAy7B,EAAE17B,MAAAA,EAGAgB,KAAK06B,IACLn8B,KAAOmV,SACPhP,YAAK,SACLxF,IAAK,OAEL8T,SAAYzT,GAAA,CACRA,EAAA,OAAA,SACa,CAAA,CAAA,CAEbmmB,EACF,QAAAnmB,GAAA,CACFq7B,EAAAr7B,EAAA,OAAA,KAAA,IACgB,EAAA,CACLA,EACTk7B,QAAAA,IAAAA,CACFA,EAAA,EAAA,GAEEA,OAAAA,IAAAA,SACF,WAAA,IAAA,GACc,EAAA,CACZrqB,EAAAA,GAAAA,GACEqqB,GAAAA,EAAAA,EAAAA,UAAAA,YAAAA,EAAAA,cAAuB,gCAAvBA,MAAAA,EAAuB,UAAA,OAAA,QAAA,EAEzBjlB,cAGF,KAAA,MAEQ,EAAAjW,EAAEgN,OAAAA,EAAAA,CAAQhN,IAAAA,SAChBk7B,EAAW,EAAA,EACJ,MACHA,IAAAA,OACA,IAAA,YAEG,GADAl7B,EAAA,eAAA,EACAi7B,EAAA,CACDh7B,MAAeq7B,EAAArlB,EAAA,QAAA,cAAA,4BAAA,EACjB,GAAoBqlB,EAAA,CAClB,IAAMA,EAAYrlB,EAAgB6R,mBAGlC,KAAe/E,GAAAA,EAAA,QACbA,IAAyBwY,mBAEvBxY,IACFA,EAAA,UAAA,IAAA,OAAA,EACc,MAAA,KAAAA,EAAA,cAAA,QAAA,EAAA,OAAAyY,GAAAA,IAAAzY,CAAA,EACH/R,QAAAA,GAAqB,CACxByqB,EAAAA,UAAAA,OAAiB9Y,OACZ+Y,CAEXD,CAAAA,EAC6B,KAC5B,CACH,MAAAE,EAAA1lB,EAAA,QAAA,cAAA,sBAAA,EACK0lB,GACLA,EAAkB1lB,UAAAA,IAAQlX,OAAQ+oB,CAItB9W,CACZ,CACF,MACF,IAAA,KACA,IAAA,UAEG,GADAhR,EAAA,eAAA,EACAi7B,EAAA,CACDh7B,MAAeq7B,EAAA,SAAA,cAAA,4BAAA,EACjB,GAAoBA,EAAA,CACZA,IAAAA,EAAAA,EAAqBxT,uBAG3B,KAAe1E,GAAAA,EAAA,QACbA,IAAyBwY,uBAEvBxY,IACFA,EAAA,UAAA,IAAA,OAAA,EACc,MAAA,KAAAA,EAAA,cAAA,QAAA,EAAA,OAAAoY,GAAAA,IAAApY,CAAA,EACHpS,QAAAA,GAAqB,CACxByqB,EAAAA,UAAAA,OAAiB9Y,OACZ+Y,CAEXD,CAAAA,EAC6B,KAC5B,CACH,MAAAI,EAAA,SAAA,cAAA,iCAAA,EACKA,GACCA,EAAAA,UAAoB/T,IAAAA,OAAAA,CAIf9W,CACX,CACF,MACF,IAAA,QACA,GAAAiqB,EAAA,CACG,MAAAK,EAAA,SAAA,cAAA,4BAAA,EACiBA,IACZA,EAAAA,eAAYziB,EAGlByiB,EAAe,MAAA,GAEbA,EAAgB,EAAA,CAClB,CACAJ,KACF,CACA,CAAA,CACJ,EAAAx7B,EAAA,MAAA,CACF,MAAA,iBAEFA,OAAA,CAAAu7B,GAAA,CAAA9mB,EAAK3U,SAAM,CAAA,CAAA2U,GAAA,CAAA,CAAiB1G,MAASwtB,EAAAA,EAAAA,CAClC,SAAE9mB,CAAAA,cAECzU,EAAA,IAAA,CACE6J,SACE4K,CAAA,CAAA,CAAA,CACa,CAAA,EAAIA,GAAU,aAAA,mBAAAA,CAAA,CAAA,iBAAA,OACzB,WAAA,KAAAA,CAAA,CAAA,EAEC,CACL1G,MAAAA,EAAmBzK,EAAKmR,CAE1B,SAAA,CAAA,qBAAA5U,EAAA,OAAA,CACEgK,SACE,CAAA,IAAA4K,EAAA,QAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CACoB,CAAA,EAA+B,GAAQ,IAAAhT,CAAA,MAAAgT,EAAA,QAAA,KAAA,EAAA,CAAA,GAAA,OACzD,KAAA,KAAAA,CAAA,GAAA,WAAA,KAAAA,CAAA,GAAA,KAAA,KAAAA,CAAA,EAEJzO,SAAiB,KAAAyO,CAAA,EACjB1G,KAAAA,MAC+D,EAC/DyV,CACAvjB,MAAMJ,EAAA6D,EAAA,CAER,SAAA,CAAA,WAAA1D,EAAA,OAAA,CACE6J,SACE4K,CAAA,CAAA,CAAA,CACU,CAAA,EAAOA,GAAa,IAAAA,CAAA,GAAA,OAC5B,CAAA,WAAA,KAAAA,CAAA,EAEJzO,eAAc,KAAAyO,CAAA,EACd1G,KAAQ,MAAsB,EAC9ByV,CACAvjB,MAAMJ,EAAA6D,EAAA,CAER,SAAA,CAAA,iBAAA1D,EAAA,IAAA,CACE6J,SACE4K,CAAA,CAAA,CAAA,CACgB,CAAA,EAAIA,GAAU,aAAA,mBAAAA,CAAA,CAAA,gBAAA,CAAA,EAC5B,KAAA,CAAAxP,EAAAJ,IAECI,EAAA,KAAA,CAAAJ,EAAA,OAIDI,CAAAA,EAAS,KAACJ,EAAE2e,IAAY,EACrBA,CAAqB,EAAA,IAAA,CAAA,CACrB,MAAA3Z,EAER1E,GAAAA,EAAO0E,OAAAA,EAAO7D,KAAAA,CAAAA,IAAI+H,EAAAA,EAAAA,CAAQ9N,GAAAA,EAAK,4BACxB+F,OAAAA,EAAQlG,SAAM,CAAAE,EAAAG,EAAA,CAAsB4N,KAAAA,IAAAA,OAAAA,cAAAA,SAAehO,MAAAA,oBAClD,CACHK,EAAAA,EAAe,OAAA,CACfN,SAAM+J,CACP,CAAA,EACD7J,GAAAA,CAAA,CAAA,CAAA,CAAO6J,CAAK,CAAA,CAAY,CAAA,CAE3B,CAAA,ECrjBb,MAAeuyB,GAAA,mCCeTC,GAAoB,GACpBC,GAAa,CAAC,GAAI,GAAI,GAAI,GAAI,EAAE,EAEtC,SAASC,GAAS,CAAE99B,QAAAA,CAAQ,EAAG,CACvBmW,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B06B,EAAep1B,EAAMmN,MAAM5T,IAAI,OAAO,GAAK,OAC3C87B,EAAex9B,IACfy9B,EACJ9nB,EAAWgB,SAAS+mB,kCAAoC,KACpDC,EAAuBC,KACvBC,EAA2BC,GAAgBH,CAAoB,EAC/DI,EAAkB51B,EAAMmN,MAAM5T,IAAI,UAAU,GAAK07B,GAEjD,CAACY,EAAOC,CAAQ,EAAIp+B,EAASsI,EAAM9F,QAAQX,IAAI,aAAa,GAAK,CAAA,CAAE,EAiBzE,OACEd,EAAA,MAAA,CAAKmC,GAAG,qBAAqBlC,MAAM,QAAQuR,SAAS,KAAItR,SACrD,CAAA,CAAC,CAACtB,GACDuB,EAAA,SAAA,CAAQC,KAAK,SAASH,MAAM,cAAcI,QAASzB,EAAQsB,SACzDC,EAACG,EAAI,CAACC,KAAK,GAAA,CAAK,CAAA,CACV,EAEVJ,EAAA,SAAA,CAAAD,SACEC,EAAA,KAAA,CAAAD,SAAI,UAAA,CAAY,CAAA,CACV,EACRF,EAAA,OAAA,CAAAE,UACEC,EAAA,UAAA,CAAAD,SACEF,EAAA,KAAA,CAAAE,UACEF,EAAA,KAAA,CAAAE,UACEC,EAAA,MAAA,CAAAD,SACEC,EAAA,QAAA,CAAAD,SAAO,YAAA,CAAiB,CAAA,CACrB,EACLC,EAAA,MAAA,CAAAD,SACEC,EAAA,OAAA,CACEe,IAAK07B,EACLU,QAAgB78B,GAAA,CACdM,EAAAA,eAAa,EAEb,MAAMJ,EADW,IAAA,SAAAi8B,EAAA,OAAA,EACIh8B,IAAAA,OAASg8B,EACxBW,EAAAA,SAAiBz8B,gBACvBy8B,IAAajkB,OAEbkkB,EAAID,UAAkB,OAAA,WAAA,SAAA,GAEfC,EAAA,UAAA,OAAA,WAAAD,IAAA,OAAA,EACLC,EAAK/rB,UAAUgsB,OAAO,UAAYF,IAAAA,MAAiB,GAErD,SAAA,cAAA,2BAAA,EAAA,aAAA,UAAAA,IAAA,OAAA,aAAAA,CAAA,EAEGhV,IAAAA,OAMHhhB,EAAIg2B,MAAU,IAAQ,OAAA,EAEfh2B,EAAA,MAAA,IAAA,QAAAg2B,CAAA,CAEP,EACF,SAAAv9B,EAAA,MAAA,CAAEE,MAAAA,cAEGD,SAAM,CAAAD,EAAA,QAAA,CAAaE,SACtBF,CAAAA,EAAA,QAAA,CAAAE,KAAAA,QAEIE,KAAK,QACLwF,MAAK,QACLnG,eAAMk9B,IAAA,OAAA,CAAA,EACNe,EAAAA,QAEFv9B,SAAA,OAAA,CAAA,CAAAD,CAAM,CAAA,EAAYF,EAAA,QAAA,CAEpBA,SAAA,CAAAG,EAAA,QAAA,CAAAD,KAAAA,QAEIE,KAAK,QACLwF,MAAK,OACLnG,eAAMk9B,IAAA,MAAA,CAAA,EACNe,EAAAA,QAEFv9B,SAAA,MAAA,CAAA,CAAAD,CAAM,CAAA,EAAWF,EAAA,QAAA,CAEnBA,SAAA,CAAAG,EAAA,QAAA,CAAAD,KAAAA,QAEIE,KAAK,QACLwF,MAAK,OACLnG,eAAMk9B,IAAA,SAAAA,IAAA,MAAA,CACNe,EAAAA,EAAAA,OAAAA,CAIFv9B,SAAA,MAAA,CAAA,CAAAD,CAAM,CAAA,CAAI,CAAO,CAAA,CACX,CAAA,CACL,CAAA,CAAC,CACF,CAAA,EACFF,EAAA,KAAA,CAERA,UAAAG,EAAA,MAAA,UACEA,EAAA,QAAA,CAAAD,oBACE,CAAA,CAAO,CAAA,EAAgBF,EAAA,MAAA,CAEzBA,MAAAA,cAAKC,SAAM,CAAAE,EAAA,OAAA,CAAaD,MAAAA,CACT,SAAAu8B,GAAA,CAAA,CAAEkB,EAAwB,SAAA,GAAA,CAAA,EAAEz9B,IAAAA,EAAC,QAAA,CAAO,KACjDC,QACEC,IAAKq8B,GAAA,CAAA,EACL/d,IAAK+d,GAAWA,GAAC,OAAA,CAAA,EACjBmB,KAAKnB,IACLoB,MAAKV,EACL19B,KAAO09B,QACPx+B,SAAK8B,GAAA,SACY,SAAAA,EAAA,OAAA,MAAA,EAAA,EACDyY,SAAAA,gBACd,kBAAsB4kB,cAAAA,GAAAA,CAAAA,IAAAA,EAEtBN,IAAWO,GAEXx2B,QAAci1B,IAAmB,UAAA,EAE1Bj1B,EAAA,MAAA,IAAA,WAAA9G,EAAA,OAAA,KAAA,CAEP,CAAA,CACF,EAAA,IAAAN,EAAA,OAAA,CACD,MACDA,CAAa,SAAAs8B,GAAAA,GAAA,OAAA,CAAA,CAAA,EAA8C,SAAA,GAAA,CAAA,EAAEv8B,EAAAA,WAAC,CAG9DC,GAAAA,QAAUgC,SAAGs6B,GAAA,IAAAnzB,GAAAnJ,EAAA,SAAA,OACVs8B,CACC,CAAA,CAAQh9B,CAAO6J,CAAAA,CAAK,CACrB,CAAA,CAAC,CACO,CAAA,CAAA,CACP,CAAA,CACH,CAAA,EACHnJ,EAAA,KAAA,CAENA,SAAA,SAAA,CAAA,EAAAD,EAAAA,UAAI,CACJC,SAAAA,EAAA,KAAA,CAAAD,WACE,KAAA,mBACE,UACEC,EAAA,QAAA,CAAAD,IAAAA,wBACS89B,SAAI,oBAAA,CAAA,CAAwB,CAAA,EAAyB79B,EAAA,MAAA,CAE9DA,SAAAH,EAAA,SAAA,CAAAE,GAAAA,wBAEIiC,MAAGi7B,EAAA,4BAAA,GAAA,SACH39B,SAAO29B,GAAM,OAEL,MAAA39B,CAAA,EAAEA,EAAAA,OAAYoB,CACd,MAAAhC,CAAEA,EAAAA,EAAAA,YAAc,CACT,GAAA,CACP,MAAAA,EAAA,GAAA,SAAA,kBAAA,QACIA,CACJo/B,QAAQx+B,CAAA,CACGA,CACX,EACF49B,EAAC,CACQ,GAAAD,EACP,6BAAGA,CAAAA,CAAAA,EAEL71B,EAAC,QAAA,IAAA,cAAA,CACK9F,GAAAA,EACJ,6BAAG27B,CAAAA,CAAAA,CAC2B39B,MAC/B,yCACS,CACV4B,CACAN,IACF,EAAA,SACC,CAAAZ,EAAA,SAAA,CACL,MAAA,SAAED,SAEFC,QAAA,CAAA,EAAQV,EAAM,SAAA,CAAQS,iBACtBC,SAAA,UAAA,CAAA,EAAQV,EAAM,SAAA,CAAUS,gBACxBC,SAAA,gBAAA,CAAA,CAAQV,CAAM,CAAA,CAAU,CAAA,CAAA,CAAuB,CAAA,CACzC,CAAA,CACJ,CAAA,EAAAU,EACJ,KAAA,CAAC,SACH,aAAA,CACG,EACTA,EAAA,UAAA,CAAAD,SAAIF,EAAA,KAAA,CACJG,SAAA,CAAAA,EAAA,KAAA,CAAAD,WACE,QAAA,CAAAA,UACEC,EAAA,QAAA,CAAAD,KACEF,WAAAE,QACEC,EAAA,SAAA,YACEC,SAAKK,GAAA,CACLb,EAASmV,qBAAoBwP,EAAAA,OAAAA,QAE3BtiB,CAAO8T,EAAAA,IAAAA,6BAAgCnW,CAAAA,CACzC,CAAA,CAAE,EAAAO,EACD,KAEL,CAAA,SAAOH,EAAA,QAAA,CAETG,SAAA,CAAAA,EAAA,QAAA,CAAAD,KACEF,WAAAE,QACEC,EAAA,SAAA,eACEC,SAAKK,GAAA,CACLb,EAASmV,wBAAoB0M,EAAAA,OAAAA,QAE3Bxf,CAAO8T,EAAAA,IAAAA,iBAA0BtV,CAASb,CAC5C,CAAA,CAAE,EAAAI,EACD,KAEL,CAAA,SAAO,CAAAA,EAAA,QAAA,CAETA,SAAA,CAAAG,EAAA,QAAA,iBACED,QACEC,EAAA,SAAA,mBACEC,SAAKK,GAAA,CACLb,KAAAA,UAEE,EAAMa,EAAA,OAAEb,EAAAA,SAAAA,mBAAAA,EAAciB,IACtBoB,EAAO8T,SAASmoB,iCAAqBt+B,KAEnCqC,CAAmD,CACrD,EAAA,IAAA,kBAAA,CAAA,CACF,EAAAjC,EAAA,MAAA,CAAE,MACD,eAEL+U,EAAA,SAAA,mBAAA,GAAA,oBAAA,GACA/U,SAAA,CAAAG,EAAA,MAAA,UAEIH,UAAC+U,CAGA7U,SAEHC,CAAAA,eAAA,IAAAH,EAAA,SAAA,CAAAE,MACEF,GAAA,YACe,GAAA,4BAEXP,SAAyBgB,GAAA,CACzBW,EAAAA,SAAW2T,iCAAoBmpB,EAAAA,OAAAA,OAAAA,IAC/BpoB,EACE7T,SAAO8T,CAAAA,EAAS+mB,SAAAA,CAElB,MAAA,GAAE58B,SAEFF,CAAAA,oBAAAi9B,EAAA,GAAA,CAAA,CAAA,EAAQx9B,EAAM,SAAA,CAAES,SAAC,GAGjBC,SAAA,YAAA,CAAA,EAAgBg+B,GAAA,IAAAC,GAAAj+B,EAAA,SAAA,CAAAD,MAAAA,EAAC,KAChBi+B,SAAAA,EAAAA,IACC,CAAA,CAAQ1+B,EAAY85B,CAAAA,CAAAA,CAAY3zB,CAAI,CACpC,CAAA,EAAAzF,EACK,KAAA,CAAA,CAAA,EAAAH,EAAA,IAAA,CAAA,MACJ,6BAEJ,CAAA,8BACL+U,EAAA,SAAA,gCAAA,OAAA,GAAA/U,EAAA6D,EAAA,CAAG5D,SAAM,CAAA,IAAA,IAAA8U,EAAA,SAAA,gCAAA,OAAA,GAAA,CAAA,CAAmB7U,EAAAA,IAAAA,EAEzB6U,MAAAA,CAEC7U,MAAAA,kBAQE,SAGJC,GAAA,IAAAi+B,GAAAp+B,EAAA,QAAA,CAAW,SAAA,CAAAG,EAAA,QAAA,CACRg+B,KAAAA,WACCj+B,QACEC,EAAA,SAAA,gCAAA,SAAAi+B,EAAA,IAAA,EACEh+B,SAAKK,GAAA,gBAKH,EAAMA,EAAA,OAAEb,aAAciB,gCAAAA,KAAAA,EAAAA,IAAAA,EAEpBoB,EAAO8T,SAASsoB,gCACdD,EAAK7E,SACP,gCAAA,OAAAA,GAAAA,IAAA6E,EAAA,IAAA,CAEOroB,CAGL,CACJ,EAAA,IAAAqoB,EAAA,IAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAEQ,CAAA,EAAAj+B,EAEb,IAAA,CAAC,MACE,gBAERA,SAAAH,EAAA,QAAA,CAAGC,SAAM,CAAA,mEAAA,IAAAE,EAAA,IAAA,CAAeD,KACtBF,oDAAAE,OAAO,SAIH0D,SAAK,kBAAA,CAAA,EACE,GAAA,CAAA,CAAA,CACR,CAED,EAAAzD,EAEF,KAAA,CAAA,CAAA,EAAAH,EAAA,MAAA,CAAA,SAAO,CAAAA,EAAA,QAAA,CAETG,SAAK,CAAAA,EACLH,QAAA,CAAAE,gBACEA,QACEC,EAAA,SAAA,6BACEC,SAAK,CAAA2U,EAAA,SAAA,mBACLnV,SAASmV,GAAAA,CACT3T,EAAAA,SAAW2T,6BAAoBmpB,EAAAA,OAAAA,OAC/BpoB,CACE7T,CAAO8T,EAAAA,IAAAA,yBAASuoB,CACL1+B,CACb,EAAAO,EAAA,IAAA,CAAE,MACD,gBAGLA,SAAAH,EAAA,QAAA,CAAGC,SAAM,CAAA,wEAAAE,EAAA,IAAA,CAAeD,SACtBF,OAAA,CAAA,EAAA,iDAEYG,CAAA,CAAA,CAAG,CAAK,CAAA,CAEpB,CAAA,CAAA,CAAO,CAAA,CAAA,CACL,CAAA,EAAAH,EACA,KAAA,CAAA,SACF,CAAAA,EAAA,QAAA,CAERA,SAAA,CAAAG,EAAA,QAAA,iBACED,QACEC,EAAA,SAAA,UACEC,SAAKK,GAAA,CACLb,EAASmV,mBAAoBwpB,EAAAA,OAAAA,QAEpBxoB,CAAAA,EAAAA,IAAAA,aAAqBtV,IAAAA,EAAEI,QAChC,MAAA,gBACC,SACQ,CAAA,MAAA,QACLZ,SAAM,MAAA,CAAe,EAAA,MAACE,EACzBA,OAAA,CAAAD,SAAM,MAAU,CAAA,EAAI,GAAAC,CAAA,CAAA,CAAA,CAAM,CAAI,EAAAA,EACjC,MAAA,CAAA,MAAO,4BAETA,SAAAA,EAAA,QAAA,CAAKF,SAAM,8EAAA,CAA2BC,CACpC,CAAA,CAAA,CAAO,CAAA,EAGPC,EAAO,KAAA,CAAC,SACJA,EAAA,SAAA,CAERA,KAAA,SAAAD,MAAAA,QAEIE,QAAK,IAAA,CACC6B,EAAA,WAAA,GACN5B,EAASA,aAAM,EACb4B,EACAA,wBAAsB,CACxB,CAAA,CAAA,CAAA,CACD,CAAA,CAEO,CAAA,EAAC9B,EACN,KAAA,CAAA,SACH,OAAA,CACG,EACTA,EAAA,UAAA,CAAAD,SAAI,CAAAF,EAAA,MAAA,CACJA,MAAA,CAAAE,eAEIuP,IAAO,EACL+uB,WAAS,KACTjsB,WAAK,SACLksB,UAAY,CAAA,EACA,SACD,CAAAt+B,EAAA,MAAA,CACb,IAAAo8B,GAAEr8B,IAAAA,GAGA8D,WACAC,OAAI,KACJO,MAAM,CACC,YAAA,MACA,cAAA,SACLk6B,WAAa,UACbC,aAAe,EAAA,CACH,CAAA,EACZC,EAAc,MAAA,CAChB,SAAA,CAAAz+B,EAAA,IAAA,CAEFH,SAAA,QAAA,OAAAE,EACEC,IAAA,CAAAD,KAAAA,+BAAY,QACZC,GAAA,CACEyD,EAAK,eAAA,EAELvD,EAAUI,YAAM,qBACdA,EACAwB,SAAOgvB,SAAc,CACvB,EAAA9wB,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,IAAA,CAAED,KACH,2CAGI,SACF0D,SAAK,OAAA,CAAA,EAA2C,IAAA,KAAA,IAAAzD,EAAA,IAAA,CAAQD,KAAAA,mCAEtD,QACFO,GAAA,CAEDmD,EAAK,eAAA,EAELvD,EAAUI,YAAM,yBACdA,EACAwB,SAAOgvB,UAAc,CACvB,CAAA,CAAA,CAAA,CAAA,CACD,CAAA,EAED9wB,EAAI,IAAA,CAAA,SACAA,EAAA,IAAA,CAERA,KAAA,gEACEA,SACEyD,SAAK,gBAAA,CAAA,CACE,CAAA,EACR5D,EAAA,IAAA,CAED,SAAG,CAAAG,EAAA,OAAA,CAEJ0+B,sBACC3+B,sBACE,CAAA,EAAY,IAAAC,EAAA2wB,GAAA,CAAe5wB,SAAC,SAAA,0BAAA,CAAiB,CAAA,EAAE,IAC9C4wB,EAAYjtB,EAAA,CAACktB,SAAU,CAAA,IAAIljB,OAAyB,KACpDiT,mDACC,OAAA,SAGIld,mBACO,SAAA,SAAA,CAAQ1D,CAEf,CAAA,EAAAA,GAAO4gB,CAAAA,CAAAA,CAAAA,CAAsB,CAAC,CAAA,CAGlC,CAAA,CAAA,CACD,CAAA,CAAA,CAEJ,CAAA,CACO,CC3alB,MAAMyF,GAAQ,GACRuY,GAA6B,GAC7BC,GAAa,EAEnB,IAAIC,GAAsB,CAAA,EACtBC,GAAoB,CAAA,EACxB,SAASC,GAAoB/8B,EAAI,CAC/B,OAAO88B,GAAkB98B,CAAE,EACpBF,OAAAA,EAAOk9B,gBAAgBh9B,CAAE,CAClC,CAEA,SAASi9B,GAAW3Y,EAAQ,CACpB,KAAA,CAAEtkB,GAAAA,CAAOskB,EAAAA,EACT,CAAE5nB,MAAAA,EAAO+C,SAAAA,GAAa9C,EAAI,CAAE8C,SAAU6kB,EAAO7kB,QAAAA,CAAU,EACvDmT,EAAaC,GAAY/S,CAAM,EAC/B,CAAC0kB,EAAcC,CAAe,EAAIC,GAAgB,EAClDwY,EAAa1Y,EAAa7lB,IAAI,OAAO,EACrCw+B,EAAiB3Y,EAAa7lB,IAAI,YAAY,EAC9Cy+B,EAAarmB,SAASmmB,GAAcC,EAAgB,EAAE,EAC5D,IAAIE,EAAYD,EAAa,EACvBE,MAAAA,EAAgB9Y,EAAa7lB,IAAI,eAAe,EAChD4+B,EAAcC,GAAUF,EAAe79B,CAAQ,EACjD69B,GAAiB,CAACC,IACRF,EAAA,IAERI,MAAAA,EAAgBJ,GAAa,CAAC,CAACF,EAE/BlZ,EAAOtL,GAAU3Y,EAAIP,CAAQ,EAC7B,CAACi+B,EAAYC,CAAa,EAAI7gC,EAASgD,EAAOkyB,SAAS/N,CAAI,CAAC,EAClE7mB,EAAU,IAAM,CACV0C,EAAOkyB,SAAS/N,CAAI,GACRnkB,EAAAA,EAAOkyB,SAAS/N,CAAI,CAAC,CACrC,EACC,CAACA,CAAI,CAAC,EAEH2Z,MAAAA,EAAYzoB,GAAQ,IAAM,CACxB,KAAA,CAAE0oB,aAAAA,CAAiB/9B,EAAAA,EACnB2I,IACHo1B,GAAAA,YAAAA,EAAcp1B,WAAY,MAAOo1B,GAAAA,YAAAA,EAAcnzB,SAAU,IACtDozB,EACJC,GAAU,mBAAoBt1B,CAAQ,GAAKs1B,GAAU,SAAUt1B,CAAQ,EACrE,MAAA,CAACA,GAAYq1B,EACR,IAEFr1B,CACT,EAAG,CAAE,CAAA,EAELrL,EAAU,IAAM,CACV,CAACsgC,GAAcL,IAChB,SAAY,CACP,GAAA,CACF,MAAM5wB,EAAS,MAAM/P,EAAMyL,GAAG6pB,SAAS3f,MAAMrS,CAAE,EAC/ColB,GAAW3Y,EAAQhN,CAAQ,EAC3Bk+B,EAAclxB,CAAM,OACR,CACZ7N,MAAAA,sBAAiB,EACjBM,SAA4B,KAAA0+B,CAC5B/e,CAAgB+e,IAEjB,EACL,CAAAP,CAAA,CAAA,EACF,MAAIA,EAAUC,EAAAC,GAAA,YAAAA,EAAA,iBAAAG,GAAA,YAAAA,EAAA,iBAEd,OAAyBJ,EAAAA,MAAAA,CAIzB,sBACOx/B,SAAM,CAAAu/B,EAAA1wB,GAAA,MAAAA,EAAA,OAAA3O,EAAAuP,GAAA,oBAIHZ,SAAAA,GAAAA,EACAa,SAAAA,EACA/N,MAAAA,EAAAA,EACAgO,QAAoB,IAAA,SACL,WAAA,iCAAA,EAAA,SAAAmF,EAAA,aACb,QACUpC,KAAAA,EAIHitB,EACL,SAAmB,KAAAG,GAEZpZ,EAAA,OAAA,OAAA,EACLA,EAAawZ,OAAO,eAAO,EAC3BxZ,GAAmC,EAGvC,CAAA,CACF,EAAAxmB,EAAA,MAAA,CAGFA,MAAAA,gCAAKF,SAAME,EAAAiK,GAAA,CAA+BlK,OACxCC,EAAO,CAAA,CAAO,CAAA,EAAEA,EAAA8F,EAAA,CAIpB9F,GAAAA,CAAK,CAAA,EAAK4/B,CAAAA,GAAAA,EAAAA,GAAAA,CAAY,GAAA59B,EAIpBA,SAAAA,EAAAA,SACAP,UAAAA,CAAiBA,CACjBm+B,CAAAA,CAAAA,CAAAA,CAEH,CAGP,SAAAK,GAAA,CAEA,GAAAj+B,EAAwBA,UAAAA,EAAAA,IAAI49B,SAAY1zB,CAAA,EAAeA,OAAgB,KAAA,CAAAsa,EAAAC,CAAA,EAAAC,GAAA,EAC/DwY,EAAC1Y,EAA6B,IAAA,OAAoB,EAClD0Y,EAAAA,SAA0Bv+B,EAAW,EAAA,EAAA,EACrC0+B,CAAYtmB,EAAAA,CAAqB,EAAAja,EAAE0nB,EAAI,IAAA,MAAA,CAAA,EACvC0Z,EAAsB,CAAA,CAAA,SAAA1Z,EAA0B7lB,IAAAA,WAAAA,CAAI,EACpDu/B,CACA,MAAAxhC,EAAEA,SAAAA,CAAO+C,EAAAA,EAAAA,UAAiByK,CAAA,CAAA,EAA0B,CACpD,MAAA7F,EACJ3H,SAAO2H,EACP5E,cAAAA,CACAC,EAAAA,EAAAA,EACM0E,EAAA3E,IAAA0E,EACFC,KAA4BD,CAAAA,EAC5ByO,CAAAA,EAAAA,GAA+B9V,EAAA,CAAA,CAAA,EAC/B,CAACk1B,EAAUmM,CAAAA,EAAerhC,EAAAA,SAAW,EACrCshC,EAAoBnhC,IACpBmhC,KAAuBp+B,EAAAP,CAAA,EACvBwkB,EAAiBjkB,EAAY,CAAA,EAC7Bq+B,EAAAA,IAENjhC,cACAA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,OACdkd,EAAAA,CAAAA,CAAAA,EACFld,EAAK,IAAA,OACLA,MAAAA,EAAgBkhC,GAAA,IAAA,CACRxiB,GAAAA,CAAAA,UAEJ,OAA4B,KAAA,CACtB,UAAAD,CAAA,EAAEA,EAAAA,QAAcvB,IAAcjd,YACpCyC,kBAA2BE,CAAA,EAAA6b,EAE3B,EAAA,EAAA,EACF,OAAAhV,EAAAyT,EAAK,UAAL,MAAAzT,EAAK,iBAAA,SAAAiV,EAAA,CACSze,QAAAA,EAA8C,GAE5Dye,IACS,IAAA,OACTA,EAAa,OAAA,GACXA,EAAAA,EAAgB,UAAhBA,MAAAA,EAAgB,oBAAA,SAAAA,EAChBxB,CACF,EAAA,CAAAta,EAAApD,IAAA,SAAA,CAAA,EACF,MAAQA,MAEF2hC,IACN,WAAAC,CAAuBA,EAAAA,KAAAA,CAAW3hC,EAAW,SAAA,EACnCyjB,IAAAA,EACRzjB,MAAAA,EAAoBigC,GAAA98B,CAAA,EAChBy+B,GAAAA,EAAAA,CAEEC,MAAAA,IAAqC,OACvB3oB,GAAAjW,EAAA,SAAAmkB,CAAA,CAE0B5Y,EACf8yB,EAAAQ,CAAA,CAAA,MAG7BR,EAAYQ,CAAoB,CAC3B,GAAA3+B,CAQLm+B,CAAAA,CAAAA,EAAen+B,OAAAA,SAAK,WAEtB,MAAA4+B,EAAA,IAAAC,GAAA,IAAAniC,EAAA,GAAA,SAAA,MAAAsD,CAAA,EAAA,CAEa,QAAA,CACX,CAAM4+B,EAEOE,EAAAD,GAAA,IAAAniC,EAAA,GAAA,SAAA,aAAAsD,CAAA,EAAA,CACV,QAAA,CACH,CAAM8+B,EACKC,EAAA,CAAA,CAAAnsB,EAAA,SAAAqR,CAAA,EACX,IAAC+a,EAAApsB,EAAA,SAAAqR,CAAA,EAED,GAAA,EAAA8a,GAAkB,CAAAP,GACdd,GAAAA,CACAqB,EAAcP,MAAYI,IAC5BhgC,KAAqCa,CAAA,EAChC,MAAA,IAAA,QAAAkL,IAAA,CACD,WAAAA,GAAA,GAAA,CACF+yB,CAAAA,CACAtY,MAAAA,CAEMvoB,SAAa8N,EACjBwE,MAAuB,CAGzBvQ,GAAAA,CACA/B,IAAAA,GAAkB,SAAAoiC,EAAA,CAClB,OAAAA,GAAA,YAAAA,EAAA,IAAAC,KAAA,CACF,GAAAA,GAAA,GACF,QAAAA,GAAA,QAEI,aAAAA,GAAA,aAoEOC,QAAAA,GAAAA,QACAF,OAAAA,GAAuBC,EAAA,EAC5Bl/B,QAAOA,GAAAA,GAAAA,SAAAA,CAAAA,GACKV,EACK8/B,SACLvN,MAAAA,EACZwN,CACAC,UAASH,GACX,YAAAI,EACF,EAAAjmB,GA5EA+kB,EAAsBS,SAAAA,IAAAA,YAAAA,GAAAA,SAAAA,EAChB,MAAAU,GAAA,IAAA,IAAAC,GAAEC,QAAAA,GAAAA,CAAWH,GAAAA,EAAAA,EAAAA,CAAgBjmB,cAAAA,EAEnC+kB,CAAiBhhC,EAEXmiC,EAAAA,sBAA0BzpB,IAAAA,GAAA,KAAAtJ,EAAA,WAAA,GAChCizB,GAA8B,IAAAjzB,EAAA,WAAA,CACC,CAAA,EACZ,MAChBkzB,GAAAF,GAAA,MAAA1pB,GAAAA,EAAA,QAAA,KAAAipB,EAAA,QAAA,EAAA,EAECvyB,GACA,CAAA,EAEgBmzB,GAAAA,QAAAA,GAAsB,CAQX,GAP7Bxa,GAAA3Y,EAAAhN,EAAA,CACD,cAAA,EACD,CAAMkgC,EAGAE,eAAsB,CAAAN,GAAA,KAAAxpB,IAAAA,GAAA,KAAAtJ,EAAA,WAAA,GAAAA,EAAA,cAAAuyB,EAAA,IAC5BO,GAAqB9yB,IAAWA,EAAA,WAAA,EAEbA,EAAA,qBAAAA,EAAA,QAAA,GAChBozB,GAAA,KAAApzB,CAAA,UAGQ8M,EAAAA,cACNgmB,EAAwBxpB,GAGT6pB,GAAAA,MAAsB,UACxC,CAAAnzB,EAAA,oBAAAozB,GAAA,KAAA9pB,IAAAA,GAAA,KAAAtJ,EAAA,WAAA,GAAAA,EAAA,QAAA,KAAAuyB,EAAA,QAAA,GAEAa,GAAWxR,KAAAA,CAAAA,MAETwR,CACSpzB,MAAAA,GAAAA,GAAuBixB,KAAAA,IAAAA,GAAAA,KAAejxB,EAAA,WAAA,EAE/CozB,QAECpzB,YAKDozB,GAAAA,UAAuBpzB,IAGvBqzB,aAA2B5iB,KAAAA,CAAAA,EAErB,CACF4iB,CAAAA,EACFN,GAAA,KACOO,MAAAA,GAAAA,CAAAA,MAAqB,IAAAhqB,IAAA,CAAA,GACvBA,EAAA,GAEG8C,SAAAA,GACV,SAAA8mB,GACF,UAAA5pB,EAAA,QAAA,GACD,QAAAA,EAAA,QAEDnX,aAAYmX,EAAA,aAAE2pB,OAAAA,GAAAA,CAAAA,CAAWH,EAAAA,EAAAA,CAAaM,GAAAA,EAAmB,UAAAb,EAAA,QAAA,GACzD,UAA0BA,CAAA,CACxBpgC,EAAAA,GAAAA,GAAc,IAAAmX,IAAoB,CACpC,GAAAA,EAAA,GAaA,QAAoBA,EAAA,QAEhB/V,UAAMA,EAAAA,QAAAA,GACNggC,WAAU,GACVC,OAAUN,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,GACVp7B,OAAAA,GAAqBvE,CAAAA,EACrBV,QAASyW,GAAEzW,EAAAA,SAAAA,CAAAA,EACX8/B,GACAC,aACFd,EACA,QAAA,CACEv+B,WAAAA,GAAAA,EAAAA,UAAAA,YAAAA,GAAAA,UACAuE,WAAWm5B,GAAAA,EAAmB19B,UAAnB09B,YAAAA,GAAmB19B,SAAAA,EAEhC,MACG6/B,GAAkB18B,GAAY,UAAA4S,GAAAA,EAAA,KAAA/V,CAAA,MACzBA,GACNV,EAASyW,GAAEzW,CAAAA,EACUU,EACTkgC,EAAA,EAAApD,GACM98B,CAAAA,EAAAA,GAClBq/B,KAA0B5/B,CAAA,CAC1B6/B,MAAAA,CACFziC,EAAG,OAAA,CAGLA,CACA0hC,KACE4B,IAAAA,CACAtkB,aAAAA,EAAkCA,CAIpC,EACAze,EAAIgjC,EAAa36B,CAAOzF,EAAAtD,CAAA,CAAA,EACtB2jC,EAAAA,IAAAA,SACF,GAAA,CAAArO,EAAA,OAEApzB,OAAcshC,MAAAA,EAAAA,EAAAA,gBAAAA,CAAAA,EAAAA,GAAaI,EAC3BnC,EAAY+B,QAAW,UAAAI,UACvBxD,EAAwBoD,QAAAA,CAKxBK,MAAAA,cACU15B,EAAAu3B,EAAA,UAAA,YAAAv3B,EAAA,UACVjI,eAAe,wBAAA,SACf/B,EACF2jC,EAAAC,EAAA,UAAAlC,EAAA,QAAA,UAAAkC,EAAA,UACCnmB,EAAA,QAAA,UAAAkmB,CAEH,MAAaxO,EAAA,SAAA,IACX5iB,EAAsB,QAAA,UAAA,GAE1BmvB,EAAA,QAAA,IAEAnhC,EAAAA,CAAAA,CAAuB,CAAA,EACvBA,EAAU,IAAM,CACVwV,EAAU5P,kBAAAA,IACNsd,SAAAA,CACFggB,GAAAA,CACEhgB,KAAAA,CACFggB,YAAAA,CACJ1hC,EAAAA,GAAwB,EACtBoB,EAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,WAED,aADCsgC,MAAAA,OAAAA,KAAAA,KAAAA,GACD,OAAAI,EAAA,CACDpmB,aAAkCgmB,CACpC,EAC2BK,EAAA,CACvBR,aAAkCA,CAClCtkB,CAAkCA,MACpC,CAAA,CACA,IAIAjd,EAAAA,CAAAA,kBAAwB,CAAA,EAAAxB,MAEtBqjC,IAAAA,CACAD,EAAAA,gBAAAA,GACAxO,EAAAA,iBAAsB,EACxB8K,GAAC,CAAA,EACDxiB,GAAsBuB,CAAAA,EACxB+kB,GAAoB59B,MAAAA,CAClBpE,EACEoB,CAAAA,CAAAA,EAAAA,MACD09B,EAAA9qB,EAAA,SAAAqR,CAAA,GAAArR,EAAA,SAAA5S,CAAA,EACDsa,KAAkC,IAAA,CACpC,GAAA,CAAAojB,EAGAa,MAAAA,GACF,KAAIvM,CAEJ50B,QAAAA,CACE,EAAIwV,EAAkCiuB,EAAA,SAAA,cAAA,KAAA,EAEtC,OAAAA,EAAa,UAAAvhC,EAAA,YACPuhC,EAAA,UAAA,MACF,EAAM,CAAAnD,CAAA,CAAA,EAAE1H,EAAAA,GAAAA,IAAAA,CAAAA,GAAY,GACpB,MAAA,GACQtwB,IAAAA,EAAAA,IAA6B,EACrC,OAAA/B,EAAA,OAAiB,KACXm9B,EAAAA,EAAAA,YAA4B,KAAoBn9B,CAEtD,EAAA,CAAA+5B,CAAmB,CAAA,EAAA9X,GACLmb,GAAAC,EAAA,GAAAD,CAAA,MAAAC,CAAA,IAAA,SAAA,mBAAA,EAAA,MACdC,EAAC9rB,GAAA,IAAA,CAAA,MAEDvW,OACF,KAAA,CACC,IAAAqC,CACF,EAAYigC,EAEf9jC,GAAAA,EAGI0C,OAAAA,mBACAA,EAAAA,CAAAA,CAA0B,CAAA,EAC1Bg9B,EAAqB3nB,GAAA,IAAA,CACrB0nB,GAAAA,EAEF,OAAAoE,IAAAxhC,CAAA,EACC,GAAEA,CAAA,CAAA,EAECi+B,IAAwB1L,EAAAA,EAAAA,IACxB+O,GAAAA,OAECrD,EAAAA,OAAAA,EAAmB,CAAA1L,EAAA,OAAAvsB,CAAA,CAAA,EAClB07B,GAAAnP,EAAA,KAAAjc,GAAAA,EAAA,UAAA,EAAEzW,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,QAAAA,EAAYo+B,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACdmD,GAAe3+B,GAAAA,GAAmB,GAAA,EACpCk/B,GAAoB7gC,GAAAA,IAAAA,CACjBsgC,GAAAA,CAAAA,WAAmBQ,GACxB3D,OAAAA,KACEsD,KAAAA,CACJ,IAAAxf,CAAiB,EAAO4c,EAAA,QAAA,wBACpBz6B,OAAAA,WAA4B,IAChC,EAAIA,CAAAA,KAGFA,GAAOA,MAAK4U,IAAS,CACvB,SAAA,KAAAqlB,CACA,EAAOj6B,CASHs9B,QAAAA,CAAAA,CACJ,CAAA,EAAiB72B,GAAA,YAAA,IAAA,CACX,SAAA,KAAAwzB,CAAA,CAAE38B,EAAAA,GAAQy8B,IAAAA,IAAAA,SAChB,MAAKz8B,EAAAA,SAAAA,cAAAA,QAAAA,6BAAAA,EAAKqgC,EAAAC,GAAA,YAAAA,EAAA,wBACHC,EAAaxM,MAAAA,KAGD1a,EAAA,QAAA,iBAAA,qLAAA,CACnB,EACC,GAAe7a,GAAAA,EAAS,IAAA6a,EAAA,QAAA,cAAAgnB,EAAA,OAAA,EAAA,CAE3B,MAAO77B,IAAiC,QAAA87B,CAAA,EAClCvhB,IAAAA,IAAyByhB,EAAA,CAAA,EAE7BC,IACW1+B,EAAAA,SAEPm+B,EAAAA,EAAiBnP,yBAAjBmP,MAAAA,EAAAA,KAAAA,GAGN,KAAOE,CACDM,MAAAA,EAA8BC,EAAAA,KAAeC,GAAG,CAChDC,MAAAA,GAA4BD,EAAA,wBAE5B,UAA0BR,KAAAA,IAAAA,GAAAA,MAAAA,CAAY,CAAO,EAC3CU,IAAEvgB,EAAAA,MAAAA,GAAQ4c,EAAAA,EAAc/gC,yBAAd+gC,MAAAA,EAAAA,KAAAA,GAEf,CAEHh0B,CAAAA,EAGIyU,GAASuU,IAAOwK,IAAAA,SAElB,MAAA2D,EAAA,SAAA,cAAA,QAAA,6BAAA,EAAAD,EAAAC,GAAA,YAAAA,EAAA,wBAAAC,EAAA,MAAA,KAAAlnB,EAAA,QAAA,iBAAA,qLAAA,CAAA,EAGE0nB,MAAU3E,EAAAA,IAAAA,EAAAA,QAAAA,cAAAA,EAAAA,OAAAA,EAAAA,CAEd,MAAAoE,EAAAD,EAAA,QAAAD,CAAA,EAEAn3B,IAAAA,IAA8Bq3B,EAAA,CAAA,EAC5B5iB,IACDojB,EAAA,MAAA,GAED73B,EAAAA,EAAsB,yBAAtBA,MAAAA,EAAAA,KAAAA,GAIE,KAAMk3B,CACN,QAA6BrgB,EAAAA,KAAAA,GAAAA,CAAAA,MAAAA,GAAAA,EAAAA,wBAAAA,OAAAA,GAAAA,KAAAA,IAAAA,GAAAA,MAAAA,CAAAA,CAAAA,EAI3B3G,IAGFynB,EAAA,MAAA,GACAnjC,EAAAA,EAAY,yBAAZA,MAAAA,EAAAA,KAAAA,GAA8B,CAC9B,CACE2iC,EAIME,GAAAA,IAAAA,IAAAA,CACFC,MAAAA,EAA4BD,SAAAA,cAAAA,QAAAA,6BAAqB,EACrD,GAAAF,EAAgB,CACdG,MAAAA,EAAiBH,EAAA,mBACjBG,GAAoCQ,EAAA,QAAA,YAAA,IAAA,YACtCA,EAAA,KAAA,CAAAA,EAAA,KAGMH,CACJ,CAAMI,EACN,KAAA,CAA0D,eAAA7mB,EAE5D,EAAAjB,GAAuB,CACrB0nB,cAAAA,EACAA,oBAAAA,EAA2C,CAC7C,EACFK,GAAAnlC,EAAAogC,EAAA,eAAA,QAAA,EACDgF,EAAArgB,GAAA,CAAA1jB,EAAAwE,EAAAkK,EAAAP,IAAA,CAEDrC,EAAAA,eAAsB,EACpB9L,EAAA,gBAAqB6Y,EAGfmqB,EAAAA,CACN,UAMEC,cAAAA,IAIA,CAAME,CACN,EAAIQ,CAAAA,CAAAA,CAAAA,EACJ,OAAApkC,EAAgB,MAAA,CACdokC,SAAAA,KACAA,IAAAA,EACF,MAAA,8BAAAjQ,EAAA,OAAA,EAAA,gBAAA,EAAA,IAAAoQ,GAAA,UAAA,SAAA,WAAA,EAAA,IAAAE,EAAA,aAAAA,CAAA,GAAA,EAAA,GACF,eAAOhkC,GAAA,CAECyjC,GAAAA,UAAmC7kB,WACjCilB,GAAAA,aACoD,EAE5D,SAAuB,CAAAnkC,EAAA,SAAA,CACrB+jC,MAAAA,GAAAA,GAAwB,SAAA,EAAA,IAAAnlC,IAAA,UAAA,UAAA,EAAA,GACxBmlC,WAAAA,GAAAA,CACFjiC,EAAA,kBACF,EACD,SAAAjC,EAAA,MAAA,CAIDuM,kCACE,SAAqB+M,CAAAA,EAAAA,KAAAA,CAGH,SAAA,CAAA,CAAA,CAAA,SAAA,MAAAtQ,EAAA+L,EAAA,eAAA,YAAA/L,EAAA,QAAA,GAAA7I,EAAA,SAAA,CACVkkC,cACSA,MAAAA,kBACLnkB,QAAAA,IAAgBA,CAC1B,QAAA,KAAA,CACF,EACD,SAAA/f,EAAAG,EAAA,CAEK,KAAA,eAAEmd,KAAAA,IAAAA,CAA6B,CAAA,CACnChB,EAAAA,CAAAA,IAAAA,GAAAA,IAAAA,UAAAA,EAAAA,EAAAA,CACqB,SAAA,CAAAzc,EAAA,OAAA,CACtB,MAAA,eAEwBZ,SAAAA,CAAAA,EAAAA,GAAmB,WAG1C,QACmB,SAAAwC,EACC,WAAA,GACF,MAAA,EAAA,CACH,EAAA,IAAA5B,EAAA,OAAA,OACWmC,gBACvB,SAAA,CAAA,IAAA,IAAAhC,EAAA2wB,GAAA,CAGL,SAAA+O,EAAA,UAGE,OAAA,OAAA,CACW,CAAA,CAAA,CACJpjB,CAAAA,CAAAA,CAEH0X,EAAAA,IAAAA,EAAAA,SAAAA,MAIe1zB,SAGX8jC,MAAAA,kCAEFA,QAAAA,GAA2B,CAC7B9jC,EAAA,eAAA,EACFA,EAAA,gBAAA,EAEAN,EAAA,QAAA,eAAA,CACyB,SAAA,SAGVM,MAAM,OAEjBwB,CAAOohC,CACT,EAAEnjC,wBAOS,SAAAC,EAAAG,EAAA,CAA2BJ,KACpCF,KAAA,OAAA,aAAA,UAAA,CAAAE,CAEI,CACO,CAAA,CAAA,CAAA,EACCF,EAAA6D,EAAA,CACNxD,SAAe,CAAA,OAAA,IAAAL,EAAA,SAAA,CACb81B,KAAAA,SACF,MAAA,kCAAE51B,WAEG,CAAMO,EAAA,eAAA,EAAoBA,EAAA,gBAAA,EAAMgc,EAAA,QAAA,SAAA,CAGvC+mB,IAAAA,EACAtjC,SACEF,QAAA,CAAY,CAAcE,EACf,WACauB,QAAAA,GACpBG,MAAAA,GAAAA,GAAAA,MAAAA,2BAAAA,SACU,CAAAzB,EAAAG,EAAA,CACVokC,KAAK,UACN,CAAA,EAAE7C,GACH7hC,OAAA,CAAAoF,EAAAH,EAAA0/B,IAAAA,EAAA,UAAA3/B,GAAAA,EAAA,YAAAI,EAAA,SAAA,IAAAH,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,IAAAk9B,GAAAhiC,EAAA0I,GAAA,CAAM5I,IAAMkiC,EAAA,QAAA,OAAejiC,MAClB,mBACM,EAAAiiC,UACU1/B,EAAAA,CAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,CAAAA,SACd,CAAA,IAAAtC,EAAA,OAAA,CACP,MAAA,gBACG,SAAA6F,GAAA67B,GAAA,MAAA,CAAA,CAET1hC,CAAAA,CAAA,CACO,CAAA,CAAA,CAAA,CACLF,CAAM,CAAA,CAAA,CAEJQ,CAAAA,EAAAA,EAAEC,MAAe,CACjBD,MAAAA,cACA8/B,SAAAA,CAAAA,EAAAA,IAAqC,MACzB,MAAA,OACH,CAEX,OAAA9jB,EAAA,OAAA,EACuBvc,WAEvBC,EAACG,SAAI,CACHC,KAAAA,SAAyD,MAC1D,gBACM,SAAAJ,EAAAG,EAAA,CAGXN,KAAA,OAAE,IAAA,UAGO,KAAA,IAAA,CACC,CAAA,CAAA,EAGJS,SAAiB,CAAAT,EAAAmJ,GAAA,CACjB1I,SAAkB1B,IAAA,UAClB0d,QAAAA,IAAAA,CAA+Bxa,EACxB,kBAAA,EACK,SACX,CAAA9B,EAAAG,EAAA,CACH,KAAA,SAAA,CACA4N,EAAAA,EAAS2zB,OAAAA,CACTniC,SAAUmiC,SAAiB,CAA0B3hC,CAAAA,CAEhD,CAAA,EAACK,EAAK4I,GAAA,CAAU,UACpB04B,mBASKz+B,aACAa,MAAsBvB,OAAAA,KAAAA,MAAAA,EAAYikB,EAFpBllB,OAGf,OAGM0D,EACTjF,EAEEC,OAAAA,YAAA,EAAYskC,IAAA,OAAevkC,EACV2hC,OAAAA,MAAAA,EAGpBlb,EAAA,IAAA,OAAA,MAAA,EAGNC,EAAAD,CAAA,CAEH3mB,EAAW,SAAA,CAAAG,EAAAG,EAAA,CAAaJ,KACtBF,CACQ,GAAA,UACE,KAAA,SAAA,EAAAykC,GAAA,EAAA,CAAA,KAEgBjlC,OAAAA,CACxB,SAAA,CAAA,aAAAilC,IAAA,OAAA,YAAA,OAAA,OAAA,CAAA,CACAr7B,CAAAA,CACE,CAAA,EAAapJ,EAAAmJ,GAAA,CAASlJ,QAAM,IAAA,CACrB,MAAA,KAAAwc,EAAA,QAAA,iBAAA,+BAAA,CAAA,EAAM,QAAAmoB,GAAA,CAAWA,EAAA,MAAA,CAAA,CAAe,CAAM,EACrC,SAAA,CAAAzkC,EAAAG,EAAA,CACTJ,KAAA,UAEQ,SACe,OAAA,UACP,4BACb+B,CAAOohC,CAAAA,CAAAA,CACT,EAAAljC,EAAAoJ,GAAA,CAAA,CAAA,EAAApJ,EAAA0kC,GAAA,CAAE3kC,UAEFC,QAAK,SAAM,cAAA,CAAS,EACpBA,EAAAA,GAAA,CAAA,SAAM2kC,EAAO,QAAO,IAAA,CAEtB9kC,MAACmJ,EAAQ+tB,GAAA2I,EAAA,GAAA,EACGnI,WACK,KAAAA,EAEb/Q,MAAAA,kBAA2B,CAE3B,EACEA,SAAAA,CAAAA,EAAAA,GACF,KAAO,UACLA,CAAa0C,EAAAA,EAAAA,QAAAA,CACf,MAAA,oBACAzC,SAAAA,CAAAA,8BAA4BzmB,EAAA,IAAA,CAC9B,SAAAijC,CAAEljC,CAAAA,EAAAA,GAAAA,CAEG,CAAA,CACHK,CACE,CAAA,CAAA,CACM,CAAA,EAAAJ,EACE8F,EAAA,CACR,gCACD,GAEHjG,EAAA,WAAMM,EAAA,CAEN,KAAO,IAETN,KAAAA,IAAS,CAAA,CAGL,CAAA,CAAA,CAKA+kC,CAAAA,CAAAA,CACEH,CAAAA,CAAa,CAAA,EAAAzQ,EACd,QAAA0L,EAAA7/B,EAAA,KAAA,CACH,MAAA,iCAAAjB,IAAA,UAAA,UAAA,EAAA,GAAEmB,SAAAA,CAAAA,EAEFC,MAAK,EAAAyH,CAAA,EAAA,IAAAgH,GAAA,CAAA,KAAA,CAAM,GAAUe,EAAI,SAAAwyB,EAAM,SAAAC,EAAiC,WAAA4C,EAGvD,OAAAC,EAAW,QAAAxD,EAAoB,aAAAF,GACjC,OAAAC,EACGsD,EAAAA,EAEFpN,GAAAA,IAAiCmI,EACvC,OAAA7/B,EAAe,KAAA,CACbghB,IAAAA,GAAAA,EAAgB0W,KAAAA,MACX,GAAAyK,EAAA,WAAA,EAAA,IAAA6C,EAAA,aAAA,EAAA,IAAAC,EAAA,SAAA,EAAA,IAAAC,GAAA,OAAA,EAAA,GACL7jC,SAAAA,CAAAA,GAAwBrB,EAAA6D,EAAA,CAC1B,SAAA,CAAA1D,EAAA6lB,GAAA,CACF,UAAA,GAAE9lB,SAAA4jC,GAEG,MAAM,eAAU,SACrB,EAAA,SAAa3jC,EAAAslB,GAAA,CAAmBvlB,SAAAA,EACH,SAAA0B,EAAgB,cAC7C,GAAQ,KAAA,IACC,gBAAA,GAEbzB,eAAKkgC,CAAA,CAAO,CAAA,CAA8BN,EAAAA,IAAAA,WAAAA,CAAAA,EAAAA,EAAAA,MAAAA,CAAU7/B,MAAAA,qBAC5CK,SAAK,CAAAJ,EAAA,IAAA,CAAS,SAAA,0EAAA,CAAM,EAAAA,EAAA8F,EAAA,CACrB,GAAA,SACH,MAAA,SACH,SAAA,QAAA,GAIK,CAAA,EAAA,CAAAM,GAAAvG,EAAA,MACM,CACXE,MAEOwa,qBACF,SAAA,CAAA1a,EAAA,IAAA,CACA2P,SAAAA,CAAAA,uCAAAA,EAAAA,IAAAA,CACJwyB,SAAAA,CACAC,CAAAA,EAAAA,uDAAAA,CAAAA,CACA4C,EAAAA,EAAAA,SAAAA,CACAC,KAAAA,SACAxD,SAAAA,IAAAA,UACAF,QAAAA,IAAAA,CACAC,EAAAA,SAAAA,GACE5yB,SAAAA,IACwBzM,CAoB1B,MAAAwF,GAAA,MAAAnB,EAAA,GAAA,OAAA,CAEgB+5B,EAAgBV,EAAA,IACpBsC,KAAAA,WAKRniC,QAAAA,GACEG,MAAO,CAAA,CACM,EACD2jC,GAAAA,GAAAA,SAAAA,OAAAA,CACJ,MAAAqB,GAAAx9B,GAAA,SAAA,CAAA,EACI,SAAA,KAAArB,EAAA,IAAAA,CAAA,MAAA6+B,GAAA,EAAA,GAAA,MAAAA,GAAA,EAAA,EAAA,KAGRx1B,OAAAA,IAAAA,MAAAA,YAAAA,CAEa,OAAAlP,GAAA,CACRzB,EAAA,SAAA,EACU,MAAA,UAAAyB,EAAA,CACC4/B,CAAAA,IAGnBthC,EACY,SAAA,CAAAoB,EAAAG,EAAA,CAAoBJ,eAC1B,CAAA,EAAA,+CAAA,CAAA,CAGA,CACHC,CAAK,CAAA,CAAA,CAAI,CAAA,EAAwBH,EAE1BiG,EAAA,CACJ,MAEJM,cACMtG,GAAM2B,EAAA,IAAAA,CAAA,MAAA+N,CAAA,GAAA,MAAAA,CAAA,GAAoBzP,QAAAA,IAC7BF,CAAAE,GAEEC,CAAAA,CAAA,EAAY,SAEd,CAAAA,EAAAslB,GAAA,CACAzlB,SAAAA,EACEI,SAAAA,EACAgB,cAAsB,GACtBf,QAAe8hC,EAAA,IAAA,IACbnjC,gBAAoB,GACpB,aAAawlC,EACP,kBAAA,IAAA,CACFtF,GAAgBvvB,CAAmB/C,CAAU,CAC7BxJ,CAAAA,EAAAA,GACRg/B,GAAAb,GAAA,GAAAvhC,EAAA,MAAA,CAAA,MAAA,eACG,SACF,CAAAG,EAAAG,EAAA,CAAA,KACR,SACD,CAAIqH,EAAAA,IAAAA,EAAAA,QACIiH,MAAAA,GACG2mB,SAAAA,GACJgM,EAAA,CACe,CAAA,CAAA,CAEd,CAAA,EAAA,GAAA,CAAsB,CAC9B,EAAAyD,qBACU,QAAA,GAAA7kC,EAAAilC,GAAA,CACVpmC,SAAAA,EACAqC,QAAAA,EACAN,gBAAAA,EACF,MAAA,EAAA,UACCygC,GACL,QAAAhB,EAAA,QAAA1B,EAAE5+B,CAAAA,EAAAA,IAAA,WAEGglC,IAAA,CAAA,EAAArF,GAAA,MAAAA,EAAA,eAAA,CAAAyD,IAAAnjC,EAAA,MAAA,CAAA,MAAM,iBAAU,SAEvBA,EAAAiK,GAAA,EAAA,CAAA,CAAA,EAAArL,IAAS,SAAAmmC,IAAA,CAAA,EAAArF,GAAA,MAAAA,EAAA,eAAA,CAAAyD,IAAAtjC,EAAA,MAAA,CAAA,MAGd,eACD,SAAA,CAAA,0BAAAG,EAAA,KAAA,EAAA,EAAAA,EAAA,SAAA,CAAA,KAAA,eAGG,QACHF,QAAM,IAAA,CACNkG,sBAIE+4B,SAAAA,WAA4B,CAC9B,CAAA,CAAA,CAAEh/B,CAAAA,CAGAyP,EAAAA,CAAAA,CACA/N,CAAAA,EAAAA,GAAAA,GAAAA,EAAAA,KAAAA,CAAAA,SACa5B,EAAA,SAAA,CACbsJ,KAAAA,SAAiC,MAClB,wBAAA,SACDk7B,IAAAA,UAAAA,cACKa,GAAMz5B,EAAA2a,EAAA,EACvB2Y,MAAAA,CACF,eAAA,KAAA,EAGA,SAAW,CAAA/+B,EAAA,MAAA,CAAcD,MAAAA,KAClB,SAAMi0B,EAAA,MAAAvsB,EAAAA,EAAA,CAAA,EAAA,IAAAgH,GAAAzO,EAAA0I,GAAA,CAAA,IAAW+F,EACtBzO,QAAA,YAAaohC,EAAarhC,EAAAA,EAAAA,CAAAA,CACG,CAAA,EAAA,IACtBF,EAAA,MAAA,CAAA,MAEL,KAAA,SAUF,CAAA,aAAA,IAAAG,EAAA,OAAA,CAEOshC,MAAAA,MAEX7/B,SAAAA,GAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,CACA6/B,CAAAA,CAAAA,CAAAA,CACA6D,CAAiBL,CAAAA,CACV,CAAA,CAAA,CACIzD,CACX+D,EAAAA,EAAAA,GAC6BzG,SAIpB,CAAA//B,IAAA,WAEXoB,EAAA,KAAE0/B,CAEA,MAAW,wCAAA,SACT1/B,EAAAA,KAAS,CAAC,SAGHA,EAAAslB,GAAA,CAIJxlB,SAAM,GAAcC,KAAAA,GAGvB,CAAA,CACO,CAAA,CACC,CAAA,EAAAnB,aACSiB,EAAA,IAAA,CACNqjC,MAAAA,WACT,SAAA,CAAA,sBAAAljC,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,KAAA,CAAA,CAAA,EAAAA,EAAA,SAAA,CAAA,KACD,SAAA,QAEQ,IAAA,CAEZ8B,EAAA,kBA3JE0N,EA+JVwS,SAAW,WACV,CAAAjiB,CAAAA,CACE,CAAA,CAAA,CACO,CAAA,CAAA,CACC,CAAA,CACgB,CACkB,SAAAklC,GACjC,CAAA,QAAA3D,EAAwB,SAAA7/B,EAAE1B,gBAAAA,EAEjC,MAAAslC,EAAetlC,UAAAA,EAKTkD,QAAAA,CAAoBb,EAAAA,CACpB,KAAA,CAAAokB,EAFYxkB,CAIf,EAAA0kB,GAAA,EAAA4e,EAEHzlC,GAAA0lC,EAAW,OAAA,CAAAtmB,EAAAumB,IAAA,CAAA,KAAIzlC,CAEb,aAAAqhC,EAAY,QACTpf,CAAiCA,EAAAA,EAEhC2N,GAAA8V,GAAA,YAAAA,EAAA,SAAArE,EAAA,OACAniB,EAAA0Q,EAAA2V,EAAAG,GAAA,CAAA,CAAA,CAAA,EACN,CACL,EAIA7mC,EAAY0iC,EAAA,OAAAgE,EACXhE,CAAA,EAAIxhC,EAAMwhC,EAAA,SAAAoE,EAAuC3lC,IAC/C,IAAA4E,GAAAA,EAAA,OAAA,EAAA,OAAA,CAAAM,EAAAH,EAAA0/B,IAAAA,EAAA,UAAA3/B,GAAAA,EAAA,KAAAI,EAAA,EAAA,IAAAH,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA/E,KACS,IAAAuhC,GAAA,YAAAA,EAAS,OAAA,CAAAriB,EAAAumB,IAAMvmB,GAAAumB,GAAA,YAAAA,EAAA,QAAAG,GAAK,CAAAA,EACzBrE,GAAA,YAAAA,EAAA,MAAA,CAAA,EAAA,IAACvhB,EAGI,IACXqlB,GAKSQ,GAAAhH,IAEIsE,CAAAA,GAAAA,IAAAA,GACT2C,GAAAvE,EAAA,CAAA,CAAA,EAAA,KACDvhB,EAEQ,IAEZ,MAEJ+lB,EAAAjH,GAAAyC,EAAA,CAAA,EAAA,EAAA,EACE+C,EAAArgB,GAAA,CAAA1jB,EAAAwE,EAAAkK,EAAAP,IAAA,CAETnO,EAAA,eAAA,EAEAA,EAAA,gBAAqB,EACnBghC,EAAAA,CACA7/B,MAAAA,EAAAA,EACA0jC,cAAAA,EAAAA,EAAAA,CACAE,CACAM,EAAAA,CAAAA,CAAAA,EACAP,EAAAA,IACCt1B,OAAAA,GAAA,IAAA,OACD,SAAO0W,EAA6BlmB,EAAA,CAG9BglC,EAAAA,OAAAA,QAAwB,WAAAhlC,EAAA,OAAA,UAC5B,CACQ,OAAAuI,EAAAk9B,EAAA,UAAA,MAAAl9B,EAAA,iBAAA,SAAAkI,EAAA,CAAEqwB,QAAAA,EAAAA,GAA0BoE,IAAAA,QAC5B7V,EAAAA,EAAAA,UAAAA,MAAAA,sBAA2ByR,SAAAA,EACjC,CAA2C,GAC1C,CAAA,EACLvhC,EAAA,UAAA,CACA,IAAsByhC,EAChB0E,MAAAA,UAGAjkC,KAAAA,GACHoD,EAIGygC,SAAAA,GAAAA,CACJ,KAAgB/P,CACd,MAAoBwL,EACV/gC,EAAA,OACVqlC,GAAoB3gC,EAAO,CAAA,EAAA,EAAA,EAAAihC,CAE/B,EACA,MAAa,CACJ,mBAAAZ,CACT,EACS,sBAAAA,EACE,+BAAoBK,EAAAA,EAC7B,SAAmBG,CAAAA,EAAAA,UAAAA,CACfK,MAAAA,kBAAmB,OAAAnmB,EACzB,SAAA,CAAA/f,EAAA,OAAA,CACM8lC,MAAajH,UAEbwF,WAAmBrgB,IAAY/e,GAAAjF,EAAI8E,IACtB,IAAAG,EAAA,aACC,MAAA,GAAAA,EAAA,WAAA,KAAAA,EAAA,QAAA,GACF,SAAAA,GAAA,YAAAA,EAAA,GAAA,IACPH,EAAI,CAAA,CAAA,YACW9C,CACvB,SAAA,CAAAhC,EAAA,OAAA,CACE,MAAAshC,EAAA,mBAEqBA,EAAA,MAAA,CAC1BxxB,CAAAA,EAAAA,IAAAA,OAAsBwxB,EAAA,SAAA,EAAA,IAAA,KAAA,CACpB,CAAA,EAAA,CAAA0E,KAAyB,GAAAnmC,EAAA6D,EAAA,CACrBhD,SAAOylC,CAAAA,IAAqB7lC,IAAAA,IAAAA,EAAS2P,OAAAA,CACzC,SAAA,CAAAjQ,EAAA,OAAA,CACWX,MAAAA,EACA,SAAAwG,GAAA6/B,CAAA,CAAA,CACV,EAAA,IAAA,UAAAA,IAAA,EAAA,GAAA,GAAA,CACD,CAAA,CAAA,CACEK,CAAW1mC,CAAAA,CAAmD,CAChE,EAAAW,EAAA,KAAA,UACGshC,EAAA,IAAA38B,GAAA9E,SAAAA,OAAAA,EAAA,KAAA,CAEL,SACE,CAAAA,EAAAiG,EAAA,CACOigC,MAAAA,cACC,GAAAtkC,EAAA,IAAAA,CAAA,MAAAkD,EAAA,EAAA,GAAA,MAAAA,EAAA,EAAA,GACAmhC,QAAc/lB,IAAAA,IACHpb,EAAA,EAAA,CACT,EAAEob,SAAAA,CAAAA,EAAAA,GAAAA,CAAWrf,SAAAA,EAAAA,GAEnBm+B,SAAAA,EACF,cAAA,GACO,KAAA,IACewG,gBAAAA,GACtB,aAAAhB,CAAA,CACqBgB,EAAAA,GAAAA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,SAAAA,EAAAA,aAAAA,GAAAA,EAAAA,MAAAA,sBACmBtlC,SAExC,CAAAC,EAAAG,EAAA,CAAe,KAAA,SAAA,CAA0B4f,EAAAA,IAAAA,EAAAA,OAAAA,CAAKhgB,MAC5CC,EAAA,aAAY,SAAA6F,GAAAlB,EAAA,YAAA,CAAA,CACT5C,CAAAA,CACQ,GAEEK,CAAAA,gCACiB,SAAApC,EAAIiF,GAAW,CACvCib,SAAAA,EAAiB,QAEpBvb,EAAA,QAEH9E,MAAAwlC,EAAA,EAAAtlC,UACEC,EAAA4lC,EAAAjhC,EAAA,OAAMpF,QAAAA,CAAeyF,CAAOjF,CAAAA,CAA8B,EAAQ4E,IAAM,EAAA,CAErC,CAAA,CAAA,CAGnC,CAAA,CAGE,CACE,MAAAyhC,GAAaV,IAAc3lC,MAA6BsmC,MAEzBC,GAC1B,IAAA1D,GAEV,IAAA,IAAA,SAEH5iC,GAAAyO,EAAA,SAAA,MACG6yB,EAAAA,GACC,IAAA7yB,EAAA,EAAA,EAAA1O,GAAAA,EACO,OACGwmC,EACNvgC,KAAAA,CAAqD,YAAA0I,EAEnDqwB,QAAAA,EACF,iBAAApwB,EAAE5O,KAAAA,EAGK,KAAAymC,CAEL/kC,EAAAA,EAAAA,EACaglC,GAAA/3B,EAAAmlB,CAAA,EAAA6S,EACR/3B,GAAA,MAAAA,EAAA,OAAAy3B,GAAA,EAAAO,KACU99B,EAAA2F,GAAA,YAAAA,EAAA,UAAA,YAAA3F,EAAA,SAAA,GAAA+9B,GAAAC,EACDxC,IAAAA,GAAAA,MAAAA,EAAAA,SAAAA,EAAAA,GAAAA,YAAAA,EAAAA,UAAAA,MAAAA,EAAAA,QAAAA,EAAAA,GAGdhD,GADEC,IAAqBF,EACvBvhC,GAAWymC,GAAcvmC,OAAAA,GAAAA,IACvBC,EAAK,GAAAqhC,CAAA,EAAAA,CAAM,CACX,cAAeD,ECptCjC,MAAe0F,GAAA,8CCAAC,GAAA,oDCAArxB,GAAA,2CCAAsxB,GAAA,qDCAAC,GAAA,qDCAAC,GAAA,wCCaf,SAASC,IAAU,CACjBvf,OAAAA,GAAS,KAAM,CAAC,IAAK,UAAU,CAAC,EAE9B/nB,EAAA,OAAA,CAAMmC,GAAG,UAASjC,UAChBF,EAAA,MAAA,CAAKC,MAAM,iBAAgBC,UACzBF,EAAA,KAAA,CAAAE,UACEC,EAAA,MAAA,CACE6D,IAAKu4B,GACLt4B,IAAI,GACJO,MAAM,MACNC,OAAO,MACPgL,MAAO,CACLivB,YAAa,MACb9K,eAAgB,GAClB,CAAA,CACD,EACDzzB,EAAA,MAAA,CAAK6D,IAAKqjC,GAAUpjC,IAAI,SAASO,MAAM,KAAA,CAAO,CAAC,CAAA,CAC7C,EACJrE,EAAA,IAAA,CAAAD,SACEC,EAAA,MAAA,CAAAD,SACEC,EAAA,IAAA,CAAAD,SACEC,EAAC8F,EAAI,CAACE,GAAG,SAASlG,MAAM,SAAQC,SAAC,QAAA,CAE3B,CAAA,CACL,CAAA,CACA,CAAA,CACJ,EACHC,EAAA,IAAA,CAAGF,MAAM,OAAMC,SAAC,iDAAA,CAAkD,CAAC,CAAA,CAChE,EACLC,EAAA,MAAA,CAAKgC,GAAG,gBAAejC,SACrBF,EAAA,MAAA,CAAKC,MAAM,WAAUC,UACnBF,EAAA,UAAA,CAAAE,UACEC,EAAA,MAAA,CACE6D,IAAKijC,GACLhjC,IAAI,gCACJoF,QAAQ,MAAA,CACT,EACDlJ,EAAA,KAAA,CAAAD,SAAI,iBAAA,CAAmB,EACvBC,EAAA,IAAA,CAAAD,SAAG,uEAAA,CAGA,CAAC,CAAA,CACG,EACTF,EAAA,UAAA,CAAAE,UACEC,EAAA,MAAA,CACE6D,IAAKojC,GACLnjC,IAAI,uCACJoF,QAAQ,MAAA,CACT,EACDlJ,EAAA,KAAA,CAAAD,SAAI,wBAAA,CAA0B,EAC9BC,EAAA,IAAA,CAAAD,SAAG,8DAAA,CAA+D,CAAC,CAAA,CAC5D,EACTF,EAAA,UAAA,CAAAE,UACEC,EAAA,MAAA,CACE6D,IAAKkjC,GACLjjC,IAAI,sCACJoF,QAAQ,MAAA,CACT,EACDlJ,EAAA,KAAA,CAAAD,SAAI,uBAAA,CAAyB,EAC7BC,EAAA,IAAA,CAAAD,SAAG,oEAAA,CAEA,CAAC,CAAA,CACG,EACTF,EAAA,UAAA,CAAAE,UACEC,EAAA,MAAA,CACE6D,IAAK6R,GACL5R,IAAI,gCACJoF,QAAQ,MAAA,CACT,EACDlJ,EAAA,KAAA,CAAAD,SAAI,wBAAA,CAA0B,EAC9BC,EAAA,IAAA,CAAAD,SAAG,4FAAA,CAGA,CAAC,CAAA,CACG,EACTF,EAAA,UAAA,CAAAE,UACEC,EAAA,MAAA,CACE6D,IAAKmjC,GACLljC,IAAI,wEACJoF,QAAQ,MAAA,CACT,EACDlJ,EAAA,KAAA,CAAAD,SAAI,wBAAA,CAA0B,EAC9BC,EAAA,IAAA,CAAAD,SAAG,mDAAA,CAAoD,CAAC,CAAA,CACjD,CAAC,CAAA,CACP,CAAA,CACF,EACLC,EAAK,KAAA,CAAA,CAAA,EACLH,EAAA,IAAA,CAAAE,UACEC,EAAA,IAAA,CAAGyD,KAAK,oCAAoC/C,OAAO,SAAQX,SAAC,OAEzD,CAAA,EAAE,IAAI,KACN,IACHC,EAAA,IAAA,CACEyD,KAAK,mCACL/C,OAAO,SACPR,QAAgB,GAAA,CACdI,EAAEC,eAAe,EACjBuB,EAAOgvB,YAAc,yBACvB,EAAE/wB,SACH,UAEE,CAAA,EAAC,IACF,IACFC,EAAA,IAAA,CACEyD,KAAK,yDACL/C,OAAO,SAAQX,SAChB,gBAEE,CAAA,EAEL,GAAA,CAAA,CAAG,CAAC,CAAA,CACA,CAEV,CC5DAuO,OAAO84B,WAAatlC,EAKpBqP,WAAW,IAAM,aACf,UAAW/Q,KAAQinC,GACbrxB,MAAM2B,QAAQ0vB,GAAMjnC,CAAI,CAAC,GACrBA,GAAAA,EAAAA,GAAAA,CAAI,GAAE,KAANA,MAAAA,EAAAA,KAAAA,IAENinC,GAAAA,EAAAA,IAAMjnC,KAANinC,MAAAA,EAAAA,KAAAA,EAGN,EAAG,GAAI,EAEP,SAASC,IAAM,mBACP1yB,MAAAA,EAAaC,GAAY/S,CAAM,EAC/B,CAACylC,EAAYC,CAAa,EAAI1oC,EAAS,EAAK,EAC5C,CAACF,EAASC,CAAU,EAAIC,EAAS,SAAS,EAC1C8Z,EAAWC,KAEjB/I,GAAgB,IAAM,CACpB,MAAMstB,EAAQh2B,EAAMmN,MAAM5T,IAAI,OAAO,EACjCy8B,IACFjkB,SAASwkB,gBAAgBrsB,UAAUswB,IAAK,MAAKxE,CAAM,EAAC,EAEjDhV,SAAAA,cAAc,2BAA2B,EACzCqf,aAAa,UAAWrK,IAAU,OAAS,aAAeA,CAAK,GAEpE,MAAMsK,EAAWtgC,EAAMmN,MAAM5T,IAAI,UAAU,EACvC+mC,GACFvuB,SAASwkB,gBAAgBruB,MAAMsuB,YAC7B,cACC,GAAE8J,CAAS,IACd,CAEJ,EAAG,CAAE,CAAA,EAELtoC,EAAU,IAAM,CACd,MAAM44B,EAAc5wB,EAAMmN,MAAM5T,IAAI,aAAa,EAC3Cy4B,EAAOuO,oBACVr5B,OAAOuS,SAASnU,OAAOwqB,MAAM,cAAc,GAAK,CAAG,CAAA,EAAE,GAAG,CAAC,CAC5D,EAEA,GAAIkC,EAAM,CACRx4B,MAAAA,EAAYwG,EAAA,QAAA,IAAA,UAAA,EAAEgyB,EAAAA,EAAAA,QAAAA,IAAAA,cAAAA,GAAM,SAAA,CAIpBv6B,EAAiBuI,SAAAA,EACjB,KAAqBA,CAER,aAAAwgC,CACX/oC,EAAAA,MAAAA,GAAoB,CACd,YAAAm5B,EAAE6P,UAAcD,EAAY,cAAyBE,EACzD9P,KAAAA,CAAAA,CAAAA,EAEe8P,EAAAA,GAAAA,CACf1O,SAAAA,EACD,YAAAwO,CAED,CAAA,EAAyB,MAAY5P,QAAAA,WAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAa4P,GAAAA,CAAAA,EAAYJ,EAAC,EAAA,EAC/D3oC,EAAckpC,SAAAA,CAIdC,IAEAR,KAAAA,CACA3oC,MAAAA,EAAoBopC,KACtB,GAAG3mC,EAAA,CACE8F,EAAA,QAAA,IAAA,iBAAA9F,EAAA,KAAA,EAAA,EACL,MACIA,MAAAA,EACF8F,SAAAA,CACM,EAAAzI,EAAA,CAAED,QAAAA,CAAAA,CAAO+C,EAASumC,GAAQtpC,CAAA,EAAE4C,EAAAA,SAAAA,GAAS,SAAA,CACnCoG,GAAAA,CACRsgC,MAAAA,GAAqBtpC,EAAA+C,CAAA,CACrB5C,MAAoB,CACpB,QAAa,CACP2oC,EAAA,EAAA,EACIU,EAAAA,WACI,IAEVV,MACA3oC,EAAAA,SAAoB,CACtB,CACC,EAAA,CACE,CAAA,EACLA,IAAAA,EAAAA,KACFiD,EAAA,gBAAA+e,EAAA,SACF,MAAAsnB,EAAA,IAAA,CACF,IAAKj3B,EAAA,WAAA,IAAA,CAGLpP,IAD2B,SAAA,eAAA,SAAA,GAKjBsmC,YADqB,cAAA,gBAAA,EAEvBA,OAGG,MAAAC,EAAA,SAAA,iBAAA,iBAAA,EACCC,EAAAA,EAAoBlgB,EAAAA,OAAAA,CAAAA,EACtBkgB,GAAAA,EAAAA,WAAAA,IAAUpvB,EAAA,MAAA,CAGd,CACIA,EAAAA,GAAAA,EACMxR,MAAAA,IAAAA,cAAiB,CACzBwR,EACF9Z,EAAA+oC,EAAA,CAAAtnB,CAAA,CAAA,EACF,MAAA0nB,EAAA3zB,EAAA,aAAAA,EAAA,cAAAA,EAAA,cAAAA,EAAA,aAAAA,EAAA,YAAAA,EAAA,gBAAAA,EAAA,sBAAAxV,EACI,IAAA,CACCmpC,GACTJ,GACA/oC,EAAU+oC,CAAAA,CAAAA,CAAAA,EACV,KAAMI,CAQNnpC,aAAAA,CACE,EAAAwV,EAA0B4zB,EAAAvpC,EAAA4gC,GAAA,IAAA,EAS1B,GARYE,GAAA,mBAAAlf,EAAA,QAAA,GAAAkf,GAAA,SAAAlf,EAAA,QAAA,EAENgf,EAAAA,UAAiBjrB,EAAAA,QAAAA,GAEnB6zB,UAC0B5nB,KAG9B,YAAwBxhB,KAAAA,EAAAA,QAAAA,EAASmpC,OAAAA,EAAAA,GAA6B3I,CAAAA,CAAAA,EAE9D2I,MAAAA,EAA6BrxB,GAAA,IAAA,CAC/B,KAAA,CACAvW,SAAAA,KAEEigB,MAAAA,CAAAA,qBAAAA,KAAAA,CAAAA,CAAAA,EACD,CAAAA,CAAA,CAAA,EAEDzhB,OAAAA,EAAgBkE,IAAAA,CACPtD,MAAAA,EAAU,SAAA,eAAE,KAAA,EACrB0oC,IAEMC,EAAAA,QAAAA,kBAAgC/zB,EAAA,SAAA,kBAC5BnK,EAAAA,CAAAA,EAAAA,SAAAA,iBAAAA,CAAAA,EAAAA,EAAaoW,IAAAA,CACQvd,SAAAA,KAC3Bud,UAAS,OAAA,QAAAjM,EAAA,SAAA,SAAA,CAGbxV,EAAAA,CAAAA,EAAgB,SAAA,SAAA,CAAA,EACRspC,EAAAA,EAAgBtvB,CACtB,SAAU,CAAAvZ,EAAA+oC,GAAA,CACHzC,SAAAA,GAA4BvxB,EACnC,SAAA,CAAA5U,EAAA6oC,GAAA,CACajzB,KAAAA,IAGfxW,QAAgBmoC,EAAAvnC,EAAAk2B,GAAA,CAAA,CAAA,EAAAt3B,IAAA,UAAAoB,EAAAiK,GAAA,CACR6+B,gBACNA,CAAAA,EAAgBxL,EAAAA,GAAO,EAAS1oB,CAA6B,CAChDgB,EAAAA,EAAAA,GAAAA,CAEf,cACE7V,QACEF,EAAO05B,GAAA,EAAA,CAAA,QAA8B1Y,CAAS9gB,KAAAA,WAE1C4K,QAAK3K,EAAAmnC,GAAA,EAAA,CAAA,CACL4B,CAAAA,CAIW,CAAA,EAAAlpC,EAAI+oC,GAAA,CAAA,SAEVzB,EAAS,SAAAtmB,EAEb,SAEG,CAAA0mB,GAAAvnC,EAAA6oC,GAAA,CAACl+B,KAAK,iBAASo+B,QAAS/oC,EAACu5B,GAAO,EAAA,CAAA,CAAI,EAC1Cv5B,GAAMA,EAAA6oC,GAAA,CAACl+B,KAAK,YAAWo+B,QAAS/oC,EAACmnC,GAAS,EAAA,CAAA,CAAI,EAACI,GAAAvnC,EAAA6oC,GAAA,CAEjDhpC,KAAC+oC,aAAO/nB,eAA6BxhB,CAAWwhB,CAC7C0mB,EAAAA,GACCvnC,EAAAA,GAAC6oC,CAAMl+B,KAAK,KAAiBo+B,QAAS/oC,EAAC2xB,GAAe,EAAA,CAAA,CAAI,EAE3D4V,GAAcvnC,EAAC6oC,GAAK,CAACl+B,KAAK,KAAYo+B,QAAS/oC,EAACiuB,GAAU,EAAA,CAAA,CAAI,EAC9DsZ,GAAcvnC,EAAM6oC,GAAA,CAACl+B,KAAK,KAAao+B,SAAS/oC,CAAAA,EAAY6oC,GAAA,CAC5DtB,MAAcvnC,GAAY,QAAAA,EAAAw3B,GAAA,EAAA,CAAA,CAAcx3B,EAAAA,EAAAA,GAAY,CACpDunC,KAAcvnC,MAAY,QAAAA,EAAA4sB,GAAA,EAAA,CAAA,CAAc5sB,CAAAA,CAAa,CAAI,EACzDunC,GACC1nC,EAAAA,GAAM,CAAC8K,KAAK,MAAI5K,QAAAA,EACdC,GAAM,EAAA,CAAA,CAAA,EAACyP,EAAKo5B,GAAA,CAAA,KAAU7oC,yBAAU,QAC/B6oC,EAAK7S,GAAA,EAAA,CAAA,CAAA,EAACrrB,EAAKk+B,GAAA,CAAA,KAAe7oC,oBAAS,QAAGA,EAAAqmB,GAAA,EAAA,CAAA,CAClC,EAERkhB,EAAcvnC,GAAAA,CAAO2K,KAAK,gBAAMo+B,SAAS/oC,CAAAA,EAAmB6oC,GAAA,CAC7D7oC,MAAM,GAAM,QAAAA,EAAA60B,GAAA,EAAA,CAAA,CAAkC70B,EAAAA,EAAAA,GAAU,CACxDA,KAAM,IAAM,QAAAA,EAAA60B,GAAA,CAA6B70B,MAAAA,EAAkB,CAC3DH,CAAM,CAAM,CAAA,CAAA,CAAeE,EAAAA,EAAAA,GACzBC,CAAM,KAAM,uBAAA,QAAUA,EAAAA,GAAS,EAAA,CAAA,CAAE,EACjCA,EAAAA,GAAM,CAAA,KAAM,qBAAI+oC,QAAAA,KAAgB,EAAA,CAAA,CAAA,CAAA,CAAM,CAAA,EAAAnqC,IAAE,WAAAoB,EAAA4oC,GAAA,CAAA,SAAK5oC,EAAA6oC,GAAA,CAE/C7oC,KAAAA,oBAAO2K,QAAK3K,EAAAgpC,GAAA,EAAA,CAAA,CAAA,CAA2C,CAAE,EACzDhpC,GAAMA,EAAA,SAAA,CAAA,KAAM,SAAA,GAA8BA,iBAAW,QAAGM,GAAA,CAG7CA,EAAA,SAEH2oC,OAAmCjpC,MAAAA,6CAAc,EAAI8B,EAAA,YAAA,IAMxDA,EAAA,YAAA,EAED,EACE,SAAMonC,IAAqB,CAC3B,KAAI,QACFhoC,KAAAA,KACAY,IAAAA,SAAqB,CACvB,CAAA,CAAA,EACFylC,GAAO,CAAA3yB,EAAA,SAAA,sBAAAA,EAAA,SAAA,oBAAA,gBAAA5U,EAAAuY,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA3D,EAAA,aAAA5U,EAAAoK,GAAA,CACLtI,SAAAA,EAAqBqnC,GAAA,CACvB,cAAA,OAAAv0B,EAAA,aAAA,UAAAA,EAAA,YAAA,gBAAA/L,EAAA,OAAA,cAAA,YAAAA,EAAA,gBAAA,KACF,aAAAD,EAAA9G,EAAA,cAAA,YAAA8G,EAAA,eAAAwgC,EAAA,OAAA,cAAA,YAAAA,EAAA,aAAA,KAAErpC,cAEDI,EAAAA,EAAI,cAAJA,YAAAA,EAAI,gBAAAkpC,EAAA,OAAA,cAAA,YAAAA,EAAA,cAAA,KAACjpC,QAAKoH,GAAA,CAAa,KAAA,CAAS,UAAA8hC,EAAW,SAAA7nC,CAAA,EAI9C+F,MAKMzH,cACI,GACNsO,OAAAA,YACSuG,iCAca,CACd,KAAA,gCAAE00B,MAAAA,IAAW7nC,SAAAA,IACnBK,QAAqBynC,GAAA,CACrBj7B,EAAqB,UAAA,EACNxM,EAAA,aAAA+e,EACNqiB,EAAAA,EAAAA,IAAAA,CAAAA,MAAAA,EAAAA,EAAAA,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,CACG,CAAA,CAAA,EAED,CACG,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAtuB,gBACU5U,EAAAoK,GAAA,CAClBm/B,QAAAA,GAAMC,CACN1nC,EAAAA,SAAsB+e,EAAAA,gBAEpBpf,EAAAA,aAAAA,GAIJ,EAEJ,SAAAzB,EAAAu8B,GAAA,CACF,QAAA,IAAA,CACDz6B,EAAA,aAAA,EAGH,CACM,EAEExB,CAAAA,EAAAA,CAAAA,CAAAA,EAAaA,cAAiBN,EAAAoK,GAAA,CAChCtI,QAAAA,GAAsB,CACxBxB,EAAA,SAAAA,EAAA,gBACFwB,EAAA,aAAA,GAES,EAELA,SAAAA,EAAsB2mB,GAAA,CACxB,QAAA,IAAA,CACD3mB,EAAA,aAAA,EAGH,CACM,EAEExB,CAAAA,EAAAA,CAAAA,CAAAA,EAAaA,aAAiBN,EAAAoK,GAAA,CAChCtI,MAAAA,QACF,QAAAxB,GAAA,CACFA,EAAA,SAAAA,EAAA,gBAAEP,cAEO,GAEL+B,EACF,SAAA9B,EAAAiM,GAAA,CACD,UAAAw9B,EAAA70B,EAAA,cAAA,YAAA60B,EAAA,UAAA70B,EAAA,YAGJ,UAAakc,EAAAA,EAAAA,cAAAA,YAAAA,EACN,SACE,QAAA,CAAA,cAEJ,IAAMpwB,CACJoB,EAAOgvB,YAAc,GACvBxkB,IACFxK,EAAA,aAAA,GAGW8S,CAA8Ckc,CACvDrvB,CAAkCA,CAAAA,EAClChD,IAAU,YAAAuB,EAAAoK,GAAA,CAAEkC,QAAAA,GAAAA,CAAkBhM,EAAA,SAAAA,EAAA,gBAC5BwB,EAAOgvB,WAAc,GAEnBhvB,EACF,SAAA9B,EAAA4M,GAAA,CACF,QAAA,IAAA9K,EAAA,WAAA,EAAA,CACD,CACI,CAAA,EAER,CAAC,CAAC8S,EAAWuhB,kBACN/rB,GAAA,CACJlK,QAAgBI,GAAA,EACVA,EAAEI,SAAWJ,EAAEuR,eAAevR,EAAA,OAAA,UAAA,SAAA,OAAA,KAChCwB,EAAOq0B,eAAa,GAExB,EAAEp2B,SAEFC,EAAC4M,GAAM,CAACnO,iBAAgBqD,EAAoB,eAAA,iBAAS,SAAA8S,EAAA,eAAA,SAGxD,MAAa80B,EAAAA,8BAEM90B,EAAA,eAAA,SAEZtU,aAGAwB,EAAO4nC,eAAiB,EAC1B,CAAA,CACF,CAAE3pC,CAAAA,EAAAA,CAAAA,CAAAA,EAEDwP,uBAAUvP,EAAAoK,GAAA,CACTuE,MAAAA,QACAlN,QAAAA,IACAgO,EAAAA,WAAiCA,gBACjCD,EAAAA,sBAAoCA,GAElC1N,EACF,SAAA9B,EAAA2U,GAAA,CACD,QAAA,IAAA7S,EAAA,sBAAA,EAAA,CAGJ,CACO,CAAA,EACE9B,EAAA2pC,GAAA,CACNzpC,WAAAA,CACE,CAAII,CAAAA,CACFwB,CAAAA,CAA+B,CACjC,SACF6nC,GAAA,CAAE5pC,WAAAA,CAEgB,EAChBtB,CAA+C,KAChD,CAAA2jB,EAAAC,CAAA,EAAAvjB,EAAA,EAAA,EAACid,GAGYsG,CAAA,EAACklB,MAAAA,EAAAA,GAAAA,CAAAA,EAA0BqC,EAAA3qC,IAAAG,EAC7C,IAAA,CAEN,GAAAmoC,GAAAnlB,EAAA,CAEA,KAA2B,CAAEmlB,MAAAA,EAAc,SAAA9lC,CAGzC,EAAO2gB,EAAAA,GACPrG,SAAAA,CACMnH,GAAAA,EAAAA,kBAA+B,SACHlW,EAAA,GAAA,cAAA,KAAA,CACxB,MAAM,WACI0jB,EAAS,kBAAA,GACnB,MAAAxN,EAAA,SAAA,aAAA,CAAA,SAAA,EAAA,MAAA,CAAElW,EAAO+C,CAAiB,MAAA8R,CAChC,EAAa,MAAAwe,EAAA,kBAEmB,SAC5BjwB,EAA8BpD,qBAAAA,GAE5BqtB,CAAmC/pB,EACjB4T,QAAAA,MAAwBlX,EAAA,GAAA,2BAAcqY,CAC1D,OAAC,mBACD,CAAM,EAAA6yB,EAASr2B,QAAAA,GAAAA,eAAAA,GAAAA,CAAkBwc,EAAMgC,QACvC3K,KAA2B,OAAA3lB,EAAA,CACzBK,cAA8B,EAAA,CAChC,GAIF8nC,CAAAA,EAAAA,SAA6B,cAAY/e,EAEvC,OAAA,aACU/oB,EAAA,qBAAA,GAGZlB,CAAQ8G,EAEWrI,EAAAA,QAAQ2rB,GAAG,QAAA,IAAiB+E,CAAAA,CAC7CnvB,IACA,CACamvB,MAAAA,IAAAA,CAA+B6Z,EACzB,UAAAA,EAChB,QAAA,GAAA,QACHA,EAAA,QAAA,KAKE9nC,CAA8B,EAChC,CAAAsgB,EAAAmlB,EAAA3yB,EAAA,SAAA,YAAA,CAAA,EAAA,MACFi1B,EAAC5qC,IAEkBI,EAAAA,IAAAA,CACjBuB,EAAQ8G,QAAqC,KAAA,MAC/C,MAAA,gBAAA,EAAA,KAAA/C,GAAAA,EAAA,MAAA,EAAA,KAAA/C,GAAA,CACCA,IACLE,EAAA,WAAAF,EACA,CAAA,EAAA,MAAatB,GAAA,CAAA,CAAA,CACX,EACqBjB,OAAAA,GAAAA,EAAAA,GAAiB,IAAA,GAAA,EAAA,EACpCuqC,GAAAA,GAA6B,CAC/BvlB,IACFwlB,EAAA,aAKsBroB,IAAM,EAAAqoB,EAAA,QACdxqC,IAAAA,OACduB,IANEwhB,IAUgCxgB,CAChC,EAEEhB,IAAe,CAChB,SACLooC,IAAA,CACAxkB,MAAAA,EAA6BpC,KAC7BrG,CACE,GAAA/Z,EACM,SAAAP,CACc,EAAA6kB,EAAA,OACXtmB,EAAAslB,GAAA,CACL,GAAAtjB,EACI8nC,SAAAA,CAEFtoB,CAAgB,CAAA,CC3gB1BuoB,GACE/pC,EAACgqC,GAAU,CAAAjqC,SACTC,EAACsnC,GAAK,EAAA,CAAC,CACG,EACZnuB,SAASC,eAAe,KAAK,CAC/B,EAGAjI,WAAW,IAAM,CACX,GAAA,CAEF8G,OAAOjL,KAAKi9B,YAAY,EAAEvzB,QAAiBpJ,GAAA,CACrCA,EAAIC,WAAW,SAAS,GAC1B08B,aAAaC,WAAW58B,CAAG,CAC7B,CACD,EACD2K,OAAOjL,KAAKm9B,cAAc,EAAEzzB,QAAiBpJ,GAAA,CACvCA,EAAIC,WAAW,SAAS,GAC1B48B,eAAeD,WAAW58B,CAAG,CAC/B,CACD,EAGD28B,aAAaC,WAAW,yBAAyB,OACvC,CAAC,CACf,EAAG,GAAI,EAEP57B,OAAO87B,UAAY,IAAM,CACd7pB,SAAAA,KAAKjP,UAAUgsB,OAAO,OAAO,CACxC"}